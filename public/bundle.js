/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(32);

	var _app = __webpack_require__(178);

	var _app2 = _interopRequireDefault(_app);

	__webpack_require__(250);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Main = function Main() {
	  return _react2.default.createElement(_app2.default, null);
	};

	(0, _reactDom.render)(_react2.default.createElement(Main, null), document.getElementById('app'));

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(2);


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var ReactChildren = __webpack_require__(5);
	var ReactComponent = __webpack_require__(18);
	var ReactPureComponent = __webpack_require__(21);
	var ReactClass = __webpack_require__(22);
	var ReactDOMFactories = __webpack_require__(24);
	var ReactElement = __webpack_require__(9);
	var ReactPropTypes = __webpack_require__(29);
	var ReactVersion = __webpack_require__(30);

	var onlyChild = __webpack_require__(31);
	var warning = __webpack_require__(11);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if (process.env.NODE_ENV !== 'production') {
	  var ReactElementValidator = __webpack_require__(25);
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var __spread = _assign;

	if (process.env.NODE_ENV !== 'production') {
	  var warned = false;
	  __spread = function () {
	    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
	    warned = true;
	    return _assign.apply(null, arguments);
	  };
	}

	var React = {

	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },

	  Component: ReactComponent,
	  PureComponent: ReactPureComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Deprecated hook for JSX spread, don't use this for anything.
	  __spread: __spread
	};

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 3 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 4 */
/***/ function(module, exports) {

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/

	'use strict';
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var PooledClass = __webpack_require__(6);
	var ReactElement = __webpack_require__(9);

	var emptyFunction = __webpack_require__(12);
	var traverseAllChildren = __webpack_require__(15);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func,
	      context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result,
	      keyPrefix = bookKeeping.keyPrefix,
	      func = bookKeeping.func,
	      context = bookKeeping.context;


	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};

	module.exports = ReactChildren;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(7);

	var invariant = __webpack_require__(8);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 7 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';

	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */

	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;

	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }

	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

	  throw error;
	}

	module.exports = reactProdInvariant;

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var validateFormat = function validateFormat(format) {};

	if (process.env.NODE_ENV !== 'production') {
	  validateFormat = function validateFormat(format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}

	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var ReactCurrentOwner = __webpack_require__(10);

	var warning = __webpack_require__(11);
	var canDefineProperty = __webpack_require__(13);
	var hasOwnProperty = Object.prototype.hasOwnProperty;

	var REACT_ELEMENT_TYPE = __webpack_require__(14);

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	var specialPropKeyWarningShown, specialPropRefWarningShown;

	function hasValidRef(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.ref !== undefined;
	}

	function hasValidKey(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.key !== undefined;
	}

	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    if (!specialPropKeyWarningShown) {
	      specialPropKeyWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}

	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    if (!specialPropRefWarningShown) {
	      specialPropRefWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}

	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, no instanceof check
	 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};

	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
	 */
	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (key || ref) {
	      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
	        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
	        if (key) {
	          defineKeyPropWarningGetter(props, displayName);
	        }
	        if (ref) {
	          defineRefPropWarningGetter(props, displayName);
	        }
	      }
	    }
	  }
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	/**
	 * Return a function that produces ReactElements of a given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
	 */
	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
	 */
	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = _assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    // Remaining properties override existing props
	    var defaultProps;
	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	 * Verifies the object is a ReactElement.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 10 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyFunction = __webpack_require__(12);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  (function () {
	    var printWarning = function printWarning(format) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    };

	    warning = function warning(condition, format) {
	      if (format === undefined) {
	        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	      }

	      if (format.indexOf('Failed Composite propType: ') === 0) {
	        return; // Ignore CompositeComponent proptype check.
	      }

	      if (!condition) {
	        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	          args[_key2 - 2] = arguments[_key2];
	        }

	        printWarning.apply(undefined, [format].concat(args));
	      }
	    };
	  })();
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 12 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    // $FlowFixMe https://github.com/facebook/flow/issues/285
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 14 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.

	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	module.exports = REACT_ELEMENT_TYPE;

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(7);

	var ReactCurrentOwner = __webpack_require__(10);
	var REACT_ELEMENT_TYPE = __webpack_require__(14);

	var getIteratorFn = __webpack_require__(16);
	var invariant = __webpack_require__(8);
	var KeyEscapeUtils = __webpack_require__(17);
	var warning = __webpack_require__(11);

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';

	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var didWarnAboutMaps = false;

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 16 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/* global Symbol */

	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ },
/* 17 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */

	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });

	  return '$' + escapedString;
	}

	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}

	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};

	module.exports = KeyEscapeUtils;

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(7);

	var ReactNoopUpdateQueue = __webpack_require__(19);

	var canDefineProperty = __webpack_require__(13);
	var emptyObject = __webpack_require__(20);
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'setState');
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'forceUpdate');
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var warning = __webpack_require__(11);

	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnNoop(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnNoop(publicInstance, 'setState');
	  }
	};

	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyObject = {};

	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var ReactComponent = __webpack_require__(18);
	var ReactNoopUpdateQueue = __webpack_require__(19);

	var emptyObject = __webpack_require__(20);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactPureComponent(props, context, updater) {
	  // Duplicated from ReactComponent.
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	function ComponentDummy() {}
	ComponentDummy.prototype = ReactComponent.prototype;
	ReactPureComponent.prototype = new ComponentDummy();
	ReactPureComponent.prototype.constructor = ReactPureComponent;
	// Avoid an extra prototype jump for these methods.
	_assign(ReactPureComponent.prototype, ReactComponent.prototype);
	ReactPureComponent.prototype.isPureReactComponent = true;

	module.exports = ReactPureComponent;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(7),
	    _assign = __webpack_require__(4);

	var ReactComponent = __webpack_require__(18);
	var ReactElement = __webpack_require__(9);
	var ReactPropTypeLocationNames = __webpack_require__(23);
	var ReactNoopUpdateQueue = __webpack_require__(19);

	var emptyObject = __webpack_require__(20);
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	var MIXINS_KEY = 'mixins';

	// Helper function to allow the creation of anonymous functions which do not
	// have .name set to the name of the variable being assigned to.
	function identity(fn) {
	  return fn;
	}

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */


	var injectedMixins = [];

	/**
	 * Composite components are higher-level components that compose other composite
	 * or host components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: 'DEFINE_MANY',

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: 'DEFINE_MANY',

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: 'DEFINE_MANY',

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: 'DEFINE_MANY',

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: 'DEFINE_MANY',

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: 'DEFINE_MANY_MERGED',

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: 'DEFINE_MANY_MERGED',

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: 'DEFINE_MANY_MERGED',

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: 'DEFINE_ONCE',

	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: 'DEFINE_MANY',

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: 'DEFINE_MANY',

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: 'DEFINE_MANY',

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: 'DEFINE_ONCE',

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: 'DEFINE_MANY',

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: 'DEFINE_MANY',

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: 'DEFINE_MANY',

	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: 'OVERRIDE_BASE'

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, childContextTypes, 'childContext');
	    }
	    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, contextTypes, 'context');
	    }
	    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, propTypes, 'prop');
	    }
	    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };

	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but only in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
	    }
	  }
	}

	function validateMethodOverride(isAlreadyDefined, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === 'OVERRIDE_BASE') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (isAlreadyDefined) {
	    !(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classes.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    if (process.env.NODE_ENV !== 'production') {
	      var typeofSpec = typeof spec;
	      var isMixinValid = typeofSpec === 'object' && spec !== null;

	      process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
	    }

	    return;
	  }

	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;

	  var proto = Constructor.prototype;
	  var autoBindPairs = proto.__reactAutoBindPairs;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }

	    var property = spec[name];
	    var isAlreadyDefined = proto.hasOwnProperty(name);
	    validateMethodOverride(isAlreadyDefined, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

	      if (shouldAutoBind) {
	        autoBindPairs.push(name, property);
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === 'DEFINE_MANY_MERGED') {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === 'DEFINE_MANY') {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = name in RESERVED_SPEC_KEYS;
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;

	    var isInherited = name in Constructor;
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  var pairs = component.__reactAutoBindPairs;
	  for (var i = 0; i < pairs.length; i += 2) {
	    var autoBindKey = pairs[i];
	    var method = pairs[i + 1];
	    component[autoBindKey] = bindAutoBindMethod(component, method);
	  }
	}

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback, 'replaceState');
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  }
	};

	var ReactClassComponent = function () {};
	_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    // To keep our warnings more understandable, we'll use a little hack here to
	    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
	    // unnecessarily identify a class without displayName as 'Constructor'.
	    var Constructor = identity(function (props, context, updater) {
	      // This constructor gets overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindPairs.length) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (initialState === undefined && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;

	      this.state = initialState;
	    });
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	    Constructor.prototype.__reactAutoBindPairs = [];

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactElement = __webpack_require__(9);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @private
	 */
	var createDOMFactory = ReactElement.createFactory;
	if (process.env.NODE_ENV !== 'production') {
	  var ReactElementValidator = __webpack_require__(25);
	  createDOMFactory = ReactElementValidator.createFactory;
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = {
	  a: createDOMFactory('a'),
	  abbr: createDOMFactory('abbr'),
	  address: createDOMFactory('address'),
	  area: createDOMFactory('area'),
	  article: createDOMFactory('article'),
	  aside: createDOMFactory('aside'),
	  audio: createDOMFactory('audio'),
	  b: createDOMFactory('b'),
	  base: createDOMFactory('base'),
	  bdi: createDOMFactory('bdi'),
	  bdo: createDOMFactory('bdo'),
	  big: createDOMFactory('big'),
	  blockquote: createDOMFactory('blockquote'),
	  body: createDOMFactory('body'),
	  br: createDOMFactory('br'),
	  button: createDOMFactory('button'),
	  canvas: createDOMFactory('canvas'),
	  caption: createDOMFactory('caption'),
	  cite: createDOMFactory('cite'),
	  code: createDOMFactory('code'),
	  col: createDOMFactory('col'),
	  colgroup: createDOMFactory('colgroup'),
	  data: createDOMFactory('data'),
	  datalist: createDOMFactory('datalist'),
	  dd: createDOMFactory('dd'),
	  del: createDOMFactory('del'),
	  details: createDOMFactory('details'),
	  dfn: createDOMFactory('dfn'),
	  dialog: createDOMFactory('dialog'),
	  div: createDOMFactory('div'),
	  dl: createDOMFactory('dl'),
	  dt: createDOMFactory('dt'),
	  em: createDOMFactory('em'),
	  embed: createDOMFactory('embed'),
	  fieldset: createDOMFactory('fieldset'),
	  figcaption: createDOMFactory('figcaption'),
	  figure: createDOMFactory('figure'),
	  footer: createDOMFactory('footer'),
	  form: createDOMFactory('form'),
	  h1: createDOMFactory('h1'),
	  h2: createDOMFactory('h2'),
	  h3: createDOMFactory('h3'),
	  h4: createDOMFactory('h4'),
	  h5: createDOMFactory('h5'),
	  h6: createDOMFactory('h6'),
	  head: createDOMFactory('head'),
	  header: createDOMFactory('header'),
	  hgroup: createDOMFactory('hgroup'),
	  hr: createDOMFactory('hr'),
	  html: createDOMFactory('html'),
	  i: createDOMFactory('i'),
	  iframe: createDOMFactory('iframe'),
	  img: createDOMFactory('img'),
	  input: createDOMFactory('input'),
	  ins: createDOMFactory('ins'),
	  kbd: createDOMFactory('kbd'),
	  keygen: createDOMFactory('keygen'),
	  label: createDOMFactory('label'),
	  legend: createDOMFactory('legend'),
	  li: createDOMFactory('li'),
	  link: createDOMFactory('link'),
	  main: createDOMFactory('main'),
	  map: createDOMFactory('map'),
	  mark: createDOMFactory('mark'),
	  menu: createDOMFactory('menu'),
	  menuitem: createDOMFactory('menuitem'),
	  meta: createDOMFactory('meta'),
	  meter: createDOMFactory('meter'),
	  nav: createDOMFactory('nav'),
	  noscript: createDOMFactory('noscript'),
	  object: createDOMFactory('object'),
	  ol: createDOMFactory('ol'),
	  optgroup: createDOMFactory('optgroup'),
	  option: createDOMFactory('option'),
	  output: createDOMFactory('output'),
	  p: createDOMFactory('p'),
	  param: createDOMFactory('param'),
	  picture: createDOMFactory('picture'),
	  pre: createDOMFactory('pre'),
	  progress: createDOMFactory('progress'),
	  q: createDOMFactory('q'),
	  rp: createDOMFactory('rp'),
	  rt: createDOMFactory('rt'),
	  ruby: createDOMFactory('ruby'),
	  s: createDOMFactory('s'),
	  samp: createDOMFactory('samp'),
	  script: createDOMFactory('script'),
	  section: createDOMFactory('section'),
	  select: createDOMFactory('select'),
	  small: createDOMFactory('small'),
	  source: createDOMFactory('source'),
	  span: createDOMFactory('span'),
	  strong: createDOMFactory('strong'),
	  style: createDOMFactory('style'),
	  sub: createDOMFactory('sub'),
	  summary: createDOMFactory('summary'),
	  sup: createDOMFactory('sup'),
	  table: createDOMFactory('table'),
	  tbody: createDOMFactory('tbody'),
	  td: createDOMFactory('td'),
	  textarea: createDOMFactory('textarea'),
	  tfoot: createDOMFactory('tfoot'),
	  th: createDOMFactory('th'),
	  thead: createDOMFactory('thead'),
	  time: createDOMFactory('time'),
	  title: createDOMFactory('title'),
	  tr: createDOMFactory('tr'),
	  track: createDOMFactory('track'),
	  u: createDOMFactory('u'),
	  ul: createDOMFactory('ul'),
	  'var': createDOMFactory('var'),
	  video: createDOMFactory('video'),
	  wbr: createDOMFactory('wbr'),

	  // SVG
	  circle: createDOMFactory('circle'),
	  clipPath: createDOMFactory('clipPath'),
	  defs: createDOMFactory('defs'),
	  ellipse: createDOMFactory('ellipse'),
	  g: createDOMFactory('g'),
	  image: createDOMFactory('image'),
	  line: createDOMFactory('line'),
	  linearGradient: createDOMFactory('linearGradient'),
	  mask: createDOMFactory('mask'),
	  path: createDOMFactory('path'),
	  pattern: createDOMFactory('pattern'),
	  polygon: createDOMFactory('polygon'),
	  polyline: createDOMFactory('polyline'),
	  radialGradient: createDOMFactory('radialGradient'),
	  rect: createDOMFactory('rect'),
	  stop: createDOMFactory('stop'),
	  svg: createDOMFactory('svg'),
	  text: createDOMFactory('text'),
	  tspan: createDOMFactory('tspan')
	};

	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(10);
	var ReactComponentTreeHook = __webpack_require__(26);
	var ReactElement = __webpack_require__(9);

	var checkReactTypeSpec = __webpack_require__(27);

	var canDefineProperty = __webpack_require__(13);
	var getIteratorFn = __webpack_require__(16);
	var warning = __webpack_require__(11);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();

	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      info = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }
	  return info;
	}

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
	  if (memoizer[currentComponentErrorInfo]) {
	    return;
	  }
	  memoizer[currentComponentErrorInfo] = true;

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwner = '';
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }

	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
	  }
	}

	var ReactElementValidator = {

	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    if (!validType) {
	      if (typeof type !== 'function' && typeof type !== 'string') {
	        var info = '';
	        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
	        }
	        info += getDeclarationErrorAddendum();
	        process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;
	      }
	    }

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }

	    return validatedFactory;
	  },

	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(7);

	var ReactCurrentOwner = __webpack_require__(10);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	function isNative(fn) {
	  // Based on isNative() from Lodash
	  var funcToString = Function.prototype.toString;
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	  var reIsNative = RegExp('^' + funcToString
	  // Take an example native function source for comparison
	  .call(hasOwnProperty)
	  // Strip regex characters so we can use it for regex
	  .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  // Remove hasOwnProperty from the template to make it generic
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
	  try {
	    var source = funcToString.call(fn);
	    return reIsNative.test(source);
	  } catch (err) {
	    return false;
	  }
	}

	var canUseCollections =
	// Array.from
	typeof Array.from === 'function' &&
	// Map
	typeof Map === 'function' && isNative(Map) &&
	// Map.prototype.keys
	Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
	// Set
	typeof Set === 'function' && isNative(Set) &&
	// Set.prototype.keys
	Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

	var setItem;
	var getItem;
	var removeItem;
	var getItemIDs;
	var addRoot;
	var removeRoot;
	var getRootIDs;

	if (canUseCollections) {
	  var itemMap = new Map();
	  var rootIDSet = new Set();

	  setItem = function (id, item) {
	    itemMap.set(id, item);
	  };
	  getItem = function (id) {
	    return itemMap.get(id);
	  };
	  removeItem = function (id) {
	    itemMap['delete'](id);
	  };
	  getItemIDs = function () {
	    return Array.from(itemMap.keys());
	  };

	  addRoot = function (id) {
	    rootIDSet.add(id);
	  };
	  removeRoot = function (id) {
	    rootIDSet['delete'](id);
	  };
	  getRootIDs = function () {
	    return Array.from(rootIDSet.keys());
	  };
	} else {
	  var itemByKey = {};
	  var rootByKey = {};

	  // Use non-numeric keys to prevent V8 performance issues:
	  // https://github.com/facebook/react/pull/7232
	  var getKeyFromID = function (id) {
	    return '.' + id;
	  };
	  var getIDFromKey = function (key) {
	    return parseInt(key.substr(1), 10);
	  };

	  setItem = function (id, item) {
	    var key = getKeyFromID(id);
	    itemByKey[key] = item;
	  };
	  getItem = function (id) {
	    var key = getKeyFromID(id);
	    return itemByKey[key];
	  };
	  removeItem = function (id) {
	    var key = getKeyFromID(id);
	    delete itemByKey[key];
	  };
	  getItemIDs = function () {
	    return Object.keys(itemByKey).map(getIDFromKey);
	  };

	  addRoot = function (id) {
	    var key = getKeyFromID(id);
	    rootByKey[key] = true;
	  };
	  removeRoot = function (id) {
	    var key = getKeyFromID(id);
	    delete rootByKey[key];
	  };
	  getRootIDs = function () {
	    return Object.keys(rootByKey).map(getIDFromKey);
	  };
	}

	var unmountedIDs = [];

	function purgeDeep(id) {
	  var item = getItem(id);
	  if (item) {
	    var childIDs = item.childIDs;

	    removeItem(id);
	    childIDs.forEach(purgeDeep);
	  }
	}

	function describeComponentFrame(name, source, ownerName) {
	  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
	}

	function getDisplayName(element) {
	  if (element == null) {
	    return '#empty';
	  } else if (typeof element === 'string' || typeof element === 'number') {
	    return '#text';
	  } else if (typeof element.type === 'string') {
	    return element.type;
	  } else {
	    return element.type.displayName || element.type.name || 'Unknown';
	  }
	}

	function describeID(id) {
	  var name = ReactComponentTreeHook.getDisplayName(id);
	  var element = ReactComponentTreeHook.getElement(id);
	  var ownerID = ReactComponentTreeHook.getOwnerID(id);
	  var ownerName;
	  if (ownerID) {
	    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
	  }
	  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
	  return describeComponentFrame(name, element && element._source, ownerName);
	}

	var ReactComponentTreeHook = {
	  onSetChildren: function (id, nextChildIDs) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.childIDs = nextChildIDs;

	    for (var i = 0; i < nextChildIDs.length; i++) {
	      var nextChildID = nextChildIDs[i];
	      var nextChild = getItem(nextChildID);
	      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
	      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
	      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
	      if (nextChild.parentID == null) {
	        nextChild.parentID = id;
	        // TODO: This shouldn't be necessary but mounting a new root during in
	        // componentWillMount currently causes not-yet-mounted components to
	        // be purged from our tree data so their parent id is missing.
	      }
	      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
	    }
	  },
	  onBeforeMountComponent: function (id, element, parentID) {
	    var item = {
	      element: element,
	      parentID: parentID,
	      text: null,
	      childIDs: [],
	      isMounted: false,
	      updateCount: 0
	    };
	    setItem(id, item);
	  },
	  onBeforeUpdateComponent: function (id, element) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.element = element;
	  },
	  onMountComponent: function (id) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.isMounted = true;
	    var isRoot = item.parentID === 0;
	    if (isRoot) {
	      addRoot(id);
	    }
	  },
	  onUpdateComponent: function (id) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.updateCount++;
	  },
	  onUnmountComponent: function (id) {
	    var item = getItem(id);
	    if (item) {
	      // We need to check if it exists.
	      // `item` might not exist if it is inside an error boundary, and a sibling
	      // error boundary child threw while mounting. Then this instance never
	      // got a chance to mount, but it still gets an unmounting event during
	      // the error boundary cleanup.
	      item.isMounted = false;
	      var isRoot = item.parentID === 0;
	      if (isRoot) {
	        removeRoot(id);
	      }
	    }
	    unmountedIDs.push(id);
	  },
	  purgeUnmountedComponents: function () {
	    if (ReactComponentTreeHook._preventPurging) {
	      // Should only be used for testing.
	      return;
	    }

	    for (var i = 0; i < unmountedIDs.length; i++) {
	      var id = unmountedIDs[i];
	      purgeDeep(id);
	    }
	    unmountedIDs.length = 0;
	  },
	  isMounted: function (id) {
	    var item = getItem(id);
	    return item ? item.isMounted : false;
	  },
	  getCurrentStackAddendum: function (topElement) {
	    var info = '';
	    if (topElement) {
	      var name = getDisplayName(topElement);
	      var owner = topElement._owner;
	      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
	    }

	    var currentOwner = ReactCurrentOwner.current;
	    var id = currentOwner && currentOwner._debugID;

	    info += ReactComponentTreeHook.getStackAddendumByID(id);
	    return info;
	  },
	  getStackAddendumByID: function (id) {
	    var info = '';
	    while (id) {
	      info += describeID(id);
	      id = ReactComponentTreeHook.getParentID(id);
	    }
	    return info;
	  },
	  getChildIDs: function (id) {
	    var item = getItem(id);
	    return item ? item.childIDs : [];
	  },
	  getDisplayName: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element) {
	      return null;
	    }
	    return getDisplayName(element);
	  },
	  getElement: function (id) {
	    var item = getItem(id);
	    return item ? item.element : null;
	  },
	  getOwnerID: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element || !element._owner) {
	      return null;
	    }
	    return element._owner._debugID;
	  },
	  getParentID: function (id) {
	    var item = getItem(id);
	    return item ? item.parentID : null;
	  },
	  getSource: function (id) {
	    var item = getItem(id);
	    var element = item ? item.element : null;
	    var source = element != null ? element._source : null;
	    return source;
	  },
	  getText: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (typeof element === 'string') {
	      return element;
	    } else if (typeof element === 'number') {
	      return '' + element;
	    } else {
	      return null;
	    }
	  },
	  getUpdateCount: function (id) {
	    var item = getItem(id);
	    return item ? item.updateCount : 0;
	  },


	  getRootIDs: getRootIDs,
	  getRegisteredIDs: getItemIDs
	};

	module.exports = ReactComponentTreeHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(7);

	var ReactPropTypeLocationNames = __webpack_require__(23);
	var ReactPropTypesSecret = __webpack_require__(28);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(26);
	}

	var loggedTypeFailures = {};

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var componentStackInfo = '';

	        if (process.env.NODE_ENV !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(26);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }

	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}

	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 28 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactElement = __webpack_require__(9);
	var ReactPropTypeLocationNames = __webpack_require__(23);
	var ReactPropTypesSecret = __webpack_require__(28);

	var emptyFunction = __webpack_require__(12);
	var getIteratorFn = __webpack_require__(16);
	var warning = __webpack_require__(11);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),
	  symbol: createPrimitiveTypeChecker('symbol'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	/*eslint-disable no-self-compare*/
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    return x !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}
	/*eslint-enable no-self-compare*/

	/**
	 * We use an Error-like object for backward compatibility as people may call
	 * PropTypes directly and inspect their output. However we don't use real
	 * Errors anymore. We don't inspect their stack anyway, and creating them
	 * is prohibitively expensive if they are created too often, such as what
	 * happens in oneOfType() for any type before the one that matched.
	 */
	function PropTypeError(message) {
	  this.message = message;
	  this.stack = '';
	}
	// Make `instanceof Error` still work for returned errors.
	PropTypeError.prototype = Error.prototype;

	function createChainableTypeChecker(validate) {
	  if (process.env.NODE_ENV !== 'production') {
	    var manualPropTypeCallCache = {};
	  }
	  function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (process.env.NODE_ENV !== 'production') {
	      if (secret !== ReactPropTypesSecret && typeof console !== 'undefined') {
	        var cacheKey = componentName + ':' + propName;
	        if (!manualPropTypeCallCache[cacheKey]) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will not work in production with the next major version. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName) : void 0;
	          manualPropTypeCallCache[cacheKey] = true;
	        }
	      }
	    }
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        if (props[propName] === null) {
	          return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	        }
	        return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName, secret) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	    }
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!ReactElement.isValidElement(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
	    return emptyFunction.thatReturnsNull;
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (is(propValue, expectedValues[i])) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	    }
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	    return emptyFunction.thatReturnsNull;
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }

	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }

	      return true;
	    default:
	      return false;
	  }
	}

	function isSymbol(propType, propValue) {
	  // Native Symbol.
	  if (propType === 'symbol') {
	    return true;
	  }

	  // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	  if (propValue['@@toStringTag'] === 'Symbol') {
	    return true;
	  }

	  // Fallback for non-spec compliant Symbols which are polyfilled.
	  if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	    return true;
	  }

	  return false;
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  if (isSymbol(propType, propValue)) {
	    return 'symbol';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return ANONYMOUS;
	  }
	  return propValue.constructor.name;
	}

	module.exports = ReactPropTypes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 30 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	module.exports = '15.4.2';

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	'use strict';

	var _prodInvariant = __webpack_require__(7);

	var ReactElement = __webpack_require__(9);

	var invariant = __webpack_require__(8);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
	  return children;
	}

	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(33);


/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDefaultInjection = __webpack_require__(38);
	var ReactMount = __webpack_require__(166);
	var ReactReconciler = __webpack_require__(59);
	var ReactUpdates = __webpack_require__(56);
	var ReactVersion = __webpack_require__(171);

	var findDOMNode = __webpack_require__(172);
	var getHostComponentFromComposite = __webpack_require__(173);
	var renderSubtreeIntoContainer = __webpack_require__(174);
	var warning = __webpack_require__(11);

	ReactDefaultInjection.inject();

	var ReactDOM = {
	  findDOMNode: findDOMNode,
	  render: ReactMount.render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,

	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    ComponentTree: {
	      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
	      getNodeFromInstance: function (inst) {
	        // inst is an internal instance (but could be a composite)
	        if (inst._renderedComponent) {
	          inst = getHostComponentFromComposite(inst);
	        }
	        if (inst) {
	          return ReactDOMComponentTree.getNodeFromInstance(inst);
	        } else {
	          return null;
	        }
	      }
	    },
	    Mount: ReactMount,
	    Reconciler: ReactReconciler
	  });
	}

	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(48);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        // Firefox does not have the issue with devtools loaded over file://
	        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
	        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }

	    var testFunc = function testFn() {};
	    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, 'It looks like you\'re using a minified copy of the development build ' + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;

	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;

	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
	        break;
	      }
	    }
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  var ReactInstrumentation = __webpack_require__(62);
	  var ReactDOMUnknownPropertyHook = __webpack_require__(175);
	  var ReactDOMNullInputValuePropHook = __webpack_require__(176);
	  var ReactDOMInvalidARIAHook = __webpack_require__(177);

	  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
	}

	module.exports = ReactDOM;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var DOMProperty = __webpack_require__(36);
	var ReactDOMComponentFlags = __webpack_require__(37);

	var invariant = __webpack_require__(8);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var Flags = ReactDOMComponentFlags;

	var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);

	/**
	 * Check if a given node should be cached.
	 */
	function shouldPrecacheNode(node, nodeID) {
	  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';
	}

	/**
	 * Drill down (through composites and empty components) until we get a host or
	 * host text component.
	 *
	 * This is pretty polymorphic but unavoidable with the current structure we have
	 * for `_renderedChildren`.
	 */
	function getRenderedHostOrTextFromComponent(component) {
	  var rendered;
	  while (rendered = component._renderedComponent) {
	    component = rendered;
	  }
	  return component;
	}

	/**
	 * Populate `_hostNode` on the rendered host/text component with the given
	 * DOM node. The passed `inst` can be a composite.
	 */
	function precacheNode(inst, node) {
	  var hostInst = getRenderedHostOrTextFromComponent(inst);
	  hostInst._hostNode = node;
	  node[internalInstanceKey] = hostInst;
	}

	function uncacheNode(inst) {
	  var node = inst._hostNode;
	  if (node) {
	    delete node[internalInstanceKey];
	    inst._hostNode = null;
	  }
	}

	/**
	 * Populate `_hostNode` on each child of `inst`, assuming that the children
	 * match up with the DOM (element) children of `node`.
	 *
	 * We cache entire levels at once to avoid an n^2 problem where we access the
	 * children of a node sequentially and have to walk from the start to our target
	 * node every time.
	 *
	 * Since we update `_renderedChildren` and the actual DOM at (slightly)
	 * different times, we could race here and see a newer `_renderedChildren` than
	 * the DOM nodes we see. To avoid this, ReactMultiChild calls
	 * `prepareToManageChildren` before we change `_renderedChildren`, at which
	 * time the container's child nodes are always cached (until it unmounts).
	 */
	function precacheChildNodes(inst, node) {
	  if (inst._flags & Flags.hasCachedChildNodes) {
	    return;
	  }
	  var children = inst._renderedChildren;
	  var childNode = node.firstChild;
	  outer: for (var name in children) {
	    if (!children.hasOwnProperty(name)) {
	      continue;
	    }
	    var childInst = children[name];
	    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
	    if (childID === 0) {
	      // We're currently unmounting this child in ReactMultiChild; skip it.
	      continue;
	    }
	    // We assume the child nodes are in the same order as the child instances.
	    for (; childNode !== null; childNode = childNode.nextSibling) {
	      if (shouldPrecacheNode(childNode, childID)) {
	        precacheNode(childInst, childNode);
	        continue outer;
	      }
	    }
	    // We reached the end of the DOM children without finding an ID match.
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
	  }
	  inst._flags |= Flags.hasCachedChildNodes;
	}

	/**
	 * Given a DOM node, return the closest ReactDOMComponent or
	 * ReactDOMTextComponent instance ancestor.
	 */
	function getClosestInstanceFromNode(node) {
	  if (node[internalInstanceKey]) {
	    return node[internalInstanceKey];
	  }

	  // Walk up the tree until we find an ancestor whose instance we have cached.
	  var parents = [];
	  while (!node[internalInstanceKey]) {
	    parents.push(node);
	    if (node.parentNode) {
	      node = node.parentNode;
	    } else {
	      // Top of the tree. This node must not be part of a React tree (or is
	      // unmounted, potentially).
	      return null;
	    }
	  }

	  var closest;
	  var inst;
	  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
	    closest = inst;
	    if (parents.length) {
	      precacheChildNodes(inst, node);
	    }
	  }

	  return closest;
	}

	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */
	function getInstanceFromNode(node) {
	  var inst = getClosestInstanceFromNode(node);
	  if (inst != null && inst._hostNode === node) {
	    return inst;
	  } else {
	    return null;
	  }
	}

	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */
	function getNodeFromInstance(inst) {
	  // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.
	  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

	  if (inst._hostNode) {
	    return inst._hostNode;
	  }

	  // Walk up the tree until we find an ancestor whose DOM node we have cached.
	  var parents = [];
	  while (!inst._hostNode) {
	    parents.push(inst);
	    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
	    inst = inst._hostParent;
	  }

	  // Now parents contains each ancestor that does *not* have a cached native
	  // node, and `inst` is the deepest ancestor that does.
	  for (; parents.length; inst = parents.pop()) {
	    precacheChildNodes(inst, inst._hostNode);
	  }

	  return inst._hostNode;
	}

	var ReactDOMComponentTree = {
	  getClosestInstanceFromNode: getClosestInstanceFromNode,
	  getInstanceFromNode: getInstanceFromNode,
	  getNodeFromInstance: getNodeFromInstance,
	  precacheChildNodes: precacheChildNodes,
	  precacheNode: precacheNode,
	  uncacheNode: uncacheNode
	};

	module.exports = ReactDOMComponentTree;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 35 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';

	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */

	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;

	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }

	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

	  throw error;
	}

	module.exports = reactProdInvariant;

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_PROPERTY: 0x1,
	  HAS_BOOLEAN_VALUE: 0x4,
	  HAS_NUMERIC_VALUE: 0x8,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }

	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;

	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];

	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,

	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;

	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }

	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }

	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }

	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};

	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
	/* eslint-enable max-len */

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',
	  ROOT_ATTRIBUTE_NAME: 'data-reactroot',

	  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
	  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',

	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   *
	   * autofocus is predefined, because adding it to the property whitelist
	   * causes unintended side effects.
	   *
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? { autofocus: 'autoFocus' } : null,

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 37 */
/***/ function(module, exports) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMComponentFlags = {
	  hasCachedChildNodes: 1 << 0
	};

	module.exports = ReactDOMComponentFlags;

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ARIADOMPropertyConfig = __webpack_require__(39);
	var BeforeInputEventPlugin = __webpack_require__(40);
	var ChangeEventPlugin = __webpack_require__(55);
	var DefaultEventPluginOrder = __webpack_require__(72);
	var EnterLeaveEventPlugin = __webpack_require__(73);
	var HTMLDOMPropertyConfig = __webpack_require__(78);
	var ReactComponentBrowserEnvironment = __webpack_require__(79);
	var ReactDOMComponent = __webpack_require__(92);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDOMEmptyComponent = __webpack_require__(137);
	var ReactDOMTreeTraversal = __webpack_require__(138);
	var ReactDOMTextComponent = __webpack_require__(139);
	var ReactDefaultBatchingStrategy = __webpack_require__(140);
	var ReactEventListener = __webpack_require__(141);
	var ReactInjection = __webpack_require__(144);
	var ReactReconcileTransaction = __webpack_require__(145);
	var SVGDOMPropertyConfig = __webpack_require__(153);
	var SelectEventPlugin = __webpack_require__(154);
	var SimpleEventPlugin = __webpack_require__(155);

	var alreadyInjected = false;

	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;

	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
	  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);

	  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
	    return new ReactDOMEmptyComponent(instantiate);
	  });

	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	}

	module.exports = {
	  inject: inject
	};

/***/ },
/* 39 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ARIADOMPropertyConfig = {
	  Properties: {
	    // Global States and Properties
	    'aria-current': 0, // state
	    'aria-details': 0,
	    'aria-disabled': 0, // state
	    'aria-hidden': 0, // state
	    'aria-invalid': 0, // state
	    'aria-keyshortcuts': 0,
	    'aria-label': 0,
	    'aria-roledescription': 0,
	    // Widget Attributes
	    'aria-autocomplete': 0,
	    'aria-checked': 0,
	    'aria-expanded': 0,
	    'aria-haspopup': 0,
	    'aria-level': 0,
	    'aria-modal': 0,
	    'aria-multiline': 0,
	    'aria-multiselectable': 0,
	    'aria-orientation': 0,
	    'aria-placeholder': 0,
	    'aria-pressed': 0,
	    'aria-readonly': 0,
	    'aria-required': 0,
	    'aria-selected': 0,
	    'aria-sort': 0,
	    'aria-valuemax': 0,
	    'aria-valuemin': 0,
	    'aria-valuenow': 0,
	    'aria-valuetext': 0,
	    // Live Region Attributes
	    'aria-atomic': 0,
	    'aria-busy': 0,
	    'aria-live': 0,
	    'aria-relevant': 0,
	    // Drag-and-Drop Attributes
	    'aria-dropeffect': 0,
	    'aria-grabbed': 0,
	    // Relationship Attributes
	    'aria-activedescendant': 0,
	    'aria-colcount': 0,
	    'aria-colindex': 0,
	    'aria-colspan': 0,
	    'aria-controls': 0,
	    'aria-describedby': 0,
	    'aria-errormessage': 0,
	    'aria-flowto': 0,
	    'aria-labelledby': 0,
	    'aria-owns': 0,
	    'aria-posinset': 0,
	    'aria-rowcount': 0,
	    'aria-rowindex': 0,
	    'aria-rowspan': 0,
	    'aria-setsize': 0
	  },
	  DOMAttributeNames: {},
	  DOMPropertyNames: {}
	};

	module.exports = ARIADOMPropertyConfig;

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPropagators = __webpack_require__(41);
	var ExecutionEnvironment = __webpack_require__(48);
	var FallbackCompositionState = __webpack_require__(49);
	var SyntheticCompositionEvent = __webpack_require__(52);
	var SyntheticInputEvent = __webpack_require__(54);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: 'onBeforeInput',
	      captured: 'onBeforeInputCapture'
	    },
	    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionEnd',
	      captured: 'onCompositionEndCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionStart',
	      captured: 'onCompositionStartCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionUpdate',
	      captured: 'onCompositionUpdateCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case 'topCompositionStart':
	      return eventTypes.compositionStart;
	    case 'topCompositionEnd':
	      return eventTypes.compositionEnd;
	    case 'topCompositionUpdate':
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topKeyUp':
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case 'topKeyDown':
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case 'topKeyPress':
	    case 'topMouseDown':
	    case 'topBlur':
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topCompositionEnd':
	      return getDataFromCustomEvent(nativeEvent);
	    case 'topKeyPress':
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case 'topTextInput':
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  // If composition event is available, we extract a string only at
	  // compositionevent, otherwise extract it at fallback events.
	  if (currentComposition) {
	    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case 'topPaste':
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case 'topKeyPress':
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case 'topCompositionEnd':
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
	  }
	};

	module.exports = BeforeInputEventPlugin;

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(42);
	var EventPluginUtils = __webpack_require__(44);

	var accumulateInto = __webpack_require__(46);
	var forEachAccumulated = __webpack_require__(47);
	var warning = __webpack_require__(11);

	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(inst, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(inst, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(inst, phase, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
	  }
	  var listener = listenerAtPhase(inst, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    var targetInst = event._targetInst;
	    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
	    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(inst, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(inst, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event._targetInst, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}

	function accumulateEnterLeaveDispatches(leave, enter, from, to) {
	  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var EventPluginRegistry = __webpack_require__(43);
	var EventPluginUtils = __webpack_require__(44);
	var ReactErrorUtils = __webpack_require__(45);

	var accumulateInto = __webpack_require__(46);
	var forEachAccumulated = __webpack_require__(47);
	var invariant = __webpack_require__(8);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};

	var getDictionaryKey = function (inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	};

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	function shouldPreventMouseEvent(name, type, props) {
	  switch (name) {
	    case 'onClick':
	    case 'onClickCapture':
	    case 'onDoubleClick':
	    case 'onDoubleClickCapture':
	    case 'onMouseDown':
	    case 'onMouseDownCapture':
	    case 'onMouseMove':
	    case 'onMouseMoveCapture':
	    case 'onMouseUp':
	    case 'onMouseUpCapture':
	      return !!(props.disabled && isInteractive(type));
	    default:
	      return false;
	  }
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  /**
	   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {function} listener The callback to store.
	   */
	  putListener: function (inst, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;

	    var key = getDictionaryKey(inst);
	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[key] = listener;

	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(inst, registrationName, listener);
	    }
	  },

	  /**
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (inst, registrationName) {
	    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
	    // live here; needs to be moved to a better place soon
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
	      return null;
	    }
	    var key = getDictionaryKey(inst);
	    return bankForRegistrationName && bankForRegistrationName[key];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (inst, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(inst, registrationName);
	    }

	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      var key = getDictionaryKey(inst);
	      delete bankForRegistrationName[key];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   */
	  deleteAllListeners: function (inst) {
	    var key = getDictionaryKey(inst);
	    for (var registrationName in listenerBank) {
	      if (!listenerBank.hasOwnProperty(registrationName)) {
	        continue;
	      }

	      if (!listenerBank[registrationName][key]) {
	        continue;
	      }

	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(inst, registrationName);
	      }

	      delete listenerBank[registrationName][key];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },

	  __getListenerBank: function () {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	/**
	 * Injectable ordering of event plugins.
	 */
	var eventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!eventPluginOrder) {
	    // Wait until an `eventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var pluginModule = namesToPlugins[pluginName];
	    var pluginIndex = eventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !pluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
	    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
	    var publishedEvents = pluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, pluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
	  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

	  if (process.env.NODE_ENV !== 'production') {
	    var lowerCasedName = registrationName.toLowerCase();
	    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;

	    if (registrationName === 'onDoubleClick') {
	      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Mapping from lowercase registration names to the properly cased version,
	   * used to warn in the case of missing event handlers. Available
	   * only in __DEV__.
	   * @type {Object}
	   */
	  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,
	  // Trust the developer to only use possibleRegistrationNames in __DEV__

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (injectedEventPluginOrder) {
	    !!eventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
	    // Clone the ordering so it cannot be dynamically mutated.
	    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var pluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
	        namesToPlugins[pluginName] = pluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    if (dispatchConfig.phasedRegistrationNames !== undefined) {
	      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
	      // that it is not undefined.
	      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

	      for (var phase in phasedRegistrationNames) {
	        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
	          continue;
	        }
	        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
	        if (pluginModule) {
	          return pluginModule;
	        }
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    eventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
	      for (var lowerCasedName in possibleRegistrationNames) {
	        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
	          delete possibleRegistrationNames[lowerCasedName];
	        }
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var ReactErrorUtils = __webpack_require__(45);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `ComponentTree`: [required] Module that can convert between React instances
	 *   and actual node references.
	 */
	var ComponentTree;
	var TreeTraversal;
	var injection = {
	  injectComponentTree: function (Injected) {
	    ComponentTree = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
	    }
	  },
	  injectTreeTraversal: function (Injected) {
	    TreeTraversal = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
	    }
	  }
	};

	function isEndish(topLevelType) {
	  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
	}

	function isMoveish(topLevelType) {
	  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
	}
	function isStartish(topLevelType) {
	  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
	}

	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchInstances = event._dispatchInstances;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    var instancesIsArr = Array.isArray(dispatchInstances);
	    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

	    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
	  };
	}

	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {*} inst Internal component instance
	 */
	function executeDispatch(event, simulated, listener, inst) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
	  }
	  event.currentTarget = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
	  }
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchInstances[i])) {
	        return dispatchInstances[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchInstances)) {
	      return dispatchInstances;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchInstances = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchInstance = event._dispatchInstances;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
	  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
	  var res = dispatchListener ? dispatchListener(event) : null;
	  event.currentTarget = null;
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,

	  getInstanceFromNode: function (node) {
	    return ComponentTree.getInstanceFromNode(node);
	  },
	  getNodeFromInstance: function (node) {
	    return ComponentTree.getNodeFromInstance(node);
	  },
	  isAncestor: function (a, b) {
	    return TreeTraversal.isAncestor(a, b);
	  },
	  getLowestCommonAncestor: function (a, b) {
	    return TreeTraversal.getLowestCommonAncestor(a, b);
	  },
	  getParentInstance: function (inst) {
	    return TreeTraversal.getParentInstance(inst);
	  },
	  traverseTwoPhase: function (target, fn, arg) {
	    return TreeTraversal.traverseTwoPhase(target, fn, arg);
	  },
	  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
	    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
	  },

	  injection: injection
	};

	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var caughtError = null;

	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a) {
	  try {
	    func(a);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	  }
	}

	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,

	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};

	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
	      var boundFunc = func.bind(null, a);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      // $FlowFixMe https://github.com/facebook/flow/issues/2336
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}

	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	/**
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;

	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  if (Array.isArray(current)) {
	    if (Array.isArray(next)) {
	      current.push.apply(current, next);
	      return current;
	    }
	    current.push(next);
	    return current;
	  }

	  if (Array.isArray(next)) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 47 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */

	function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	}

	module.exports = forEachAccumulated;

/***/ },
/* 48 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var PooledClass = __webpack_require__(50);

	var getTextContentAccessor = __webpack_require__(51);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	_assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },

	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(48);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(53);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

	module.exports = SyntheticCompositionEvent;

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var PooledClass = __webpack_require__(50);

	var emptyFunction = __webpack_require__(12);
	var warning = __webpack_require__(11);

	var didWarnForAddedNewProperty = false;
	var isProxySupported = typeof Proxy === 'function';

	var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {*} targetInst Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @param {DOMEventTarget} nativeEventTarget Target node.
	 */
	function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
	  if (process.env.NODE_ENV !== 'production') {
	    // these have a getter/setter for warnings
	    delete this.nativeEvent;
	    delete this.preventDefault;
	    delete this.stopPropagation;
	  }

	  this.dispatchConfig = dispatchConfig;
	  this._targetInst = targetInst;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      delete this[propName]; // this has a getter/setter for warnings
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	  return this;
	}

	_assign(SyntheticEvent.prototype, {

	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else if (typeof event.returnValue !== 'unknown') {
	      // eslint-disable-line valid-typeof
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else if (typeof event.cancelBubble !== 'unknown') {
	      // eslint-disable-line valid-typeof
	      // The ChangeEventPlugin registers a "propertychange" event for
	      // IE. This event does not support bubbling or cancelling, and
	      // any references to cancelBubble throw "Member not found".  A
	      // typeof check of "unknown" circumvents this issue (and is also
	      // IE specific).
	      event.cancelBubble = true;
	    }

	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      if (process.env.NODE_ENV !== 'production') {
	        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
	      } else {
	        this[propName] = null;
	      }
	    }
	    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
	      this[shouldBeReleasedProperties[i]] = null;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
	      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
	      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
	    }
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	if (process.env.NODE_ENV !== 'production') {
	  if (isProxySupported) {
	    /*eslint-disable no-func-assign */
	    SyntheticEvent = new Proxy(SyntheticEvent, {
	      construct: function (target, args) {
	        return this.apply(target, Object.create(target.prototype), args);
	      },
	      apply: function (constructor, that, args) {
	        return new Proxy(constructor.apply(that, args), {
	          set: function (target, prop, value) {
	            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
	              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
	              didWarnForAddedNewProperty = true;
	            }
	            target[prop] = value;
	            return true;
	          }
	        });
	      }
	    });
	    /*eslint-enable no-func-assign */
	  }
	}
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;

	  var E = function () {};
	  E.prototype = Super.prototype;
	  var prototype = new E();

	  _assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = _assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

	module.exports = SyntheticEvent;

	/**
	  * Helper to nullify syntheticEvent instance properties when destructing
	  *
	  * @param {object} SyntheticEvent
	  * @param {String} propName
	  * @return {object} defineProperty object
	  */
	function getPooledWarningPropertyDefinition(propName, getVal) {
	  var isFunction = typeof getVal === 'function';
	  return {
	    configurable: true,
	    set: set,
	    get: get
	  };

	  function set(val) {
	    var action = isFunction ? 'setting the method' : 'setting the property';
	    warn(action, 'This is effectively a no-op');
	    return val;
	  }

	  function get() {
	    var action = isFunction ? 'accessing the method' : 'accessing the property';
	    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
	    warn(action, result);
	    return getVal;
	  }

	  function warn(action, result) {
	    var warningCondition = false;
	    process.env.NODE_ENV !== 'production' ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(53);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

	module.exports = SyntheticInputEvent;

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(42);
	var EventPropagators = __webpack_require__(41);
	var ExecutionEnvironment = __webpack_require__(48);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(56);
	var SyntheticEvent = __webpack_require__(53);

	var getEventTarget = __webpack_require__(69);
	var isEventSupported = __webpack_require__(70);
	var isTextInputElement = __webpack_require__(71);

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: 'onChange',
	      captured: 'onChangeCapture'
	    },
	    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementInst = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}

	function startWatchingForChangeEventIE8(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementInst = null;
	}

	function getTargetInstForChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topChange') {
	    return targetInst;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForChangeEventIE8();
	  }
	}

	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.
	  // IE10+ fire input events to often, such when a placeholder
	  // changes or when an input with a placeholder is focused.
	  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 11);
	}

	/**
	 * (For IE <=11) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For IE <=11) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  if (activeElement.attachEvent) {
	    activeElement.attachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.addEventListener('propertychange', handlePropertyChange, false);
	  }
	}

	/**
	 * (For IE <=11) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;

	  if (activeElement.detachEvent) {
	    activeElement.detachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.removeEventListener('propertychange', handlePropertyChange, false);
	  }

	  activeElement = null;
	  activeElementInst = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For IE <=11) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetInstForInputEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topInput') {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return targetInst;
	  }
	}

	function handleEventsForInputEventIE(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9-11, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetInstForInputEventIE(topLevelType, targetInst) {
	  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementInst;
	    }
	  }
	}

	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetInstForClickEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topClick') {
	    return targetInst;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

	    var getTargetInstFunc, handleEventFunc;
	    if (shouldUseChangeEvent(targetNode)) {
	      if (doesChangeEventBubble) {
	        getTargetInstFunc = getTargetInstForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(targetNode)) {
	      if (isInputEventSupported) {
	        getTargetInstFunc = getTargetInstForInputEvent;
	      } else {
	        getTargetInstFunc = getTargetInstForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForClickEvent;
	    }

	    if (getTargetInstFunc) {
	      var inst = getTargetInstFunc(topLevelType, targetInst);
	      if (inst) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, targetNode, targetInst);
	    }
	  }

	};

	module.exports = ChangeEventPlugin;

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var CallbackQueue = __webpack_require__(57);
	var PooledClass = __webpack_require__(50);
	var ReactFeatureFlags = __webpack_require__(58);
	var ReactReconciler = __webpack_require__(59);
	var Transaction = __webpack_require__(68);

	var invariant = __webpack_require__(8);

	var dirtyComponents = [];
	var updateBatchNumber = 0;
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
	}

	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */true);
	}

	_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  // Any updates enqueued while reconciling must be performed after this entire
	  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
	  // C, B could update twice in a single batch if C's render enqueues an update
	  // to B (since B would have already updated, we should skip it, and the only
	  // way we can know to do so is by checking the batch counter).
	  updateBatchNumber++;

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    var markerName;
	    if (ReactFeatureFlags.logTopLevelRenders) {
	      var namedComponent = component;
	      // Duck type TopLevelWrapper. This is probably always true.
	      if (component._currentElement.type.isReactTopLevelWrapper) {
	        namedComponent = component._renderedComponent;
	      }
	      markerName = 'React update: ' + namedComponent.getName();
	      console.time(markerName);
	    }

	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);

	    if (markerName) {
	      console.timeEnd(markerName);
	    }

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	  if (component._updateBatchNumber == null) {
	    component._updateBatchNumber = updateBatchNumber + 1;
	  }
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var PooledClass = __webpack_require__(50);

	var invariant = __webpack_require__(8);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */

	var CallbackQueue = function () {
	  function CallbackQueue(arg) {
	    _classCallCheck(this, CallbackQueue);

	    this._callbacks = null;
	    this._contexts = null;
	    this._arg = arg;
	  }

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */


	  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._callbacks.push(callback);
	    this._contexts = this._contexts || [];
	    this._contexts.push(context);
	  };

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */


	  CallbackQueue.prototype.notifyAll = function notifyAll() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    var arg = this._arg;
	    if (callbacks && contexts) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i], arg);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  };

	  CallbackQueue.prototype.checkpoint = function checkpoint() {
	    return this._callbacks ? this._callbacks.length : 0;
	  };

	  CallbackQueue.prototype.rollback = function rollback(len) {
	    if (this._callbacks && this._contexts) {
	      this._callbacks.length = len;
	      this._contexts.length = len;
	    }
	  };

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */


	  CallbackQueue.prototype.reset = function reset() {
	    this._callbacks = null;
	    this._contexts = null;
	  };

	  /**
	   * `PooledClass` looks for this.
	   */


	  CallbackQueue.prototype.destructor = function destructor() {
	    this.reset();
	  };

	  return CallbackQueue;
	}();

	module.exports = PooledClass.addPoolingTo(CallbackQueue);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 58 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactFeatureFlags = {
	  // When true, call console.time() before and .timeEnd() after each top-level
	  // render (both initial renders and updates). Useful when looking at prod-mode
	  // timeline profiles in Chrome, for example.
	  logTopLevelRenders: false
	};

	module.exports = ReactFeatureFlags;

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactRef = __webpack_require__(60);
	var ReactInstrumentation = __webpack_require__(62);

	var warning = __webpack_require__(11);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} the containing host component instance
	   * @param {?object} info about the host container
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID // 0 in production and for roots
	  ) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
	      }
	    }
	    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
	      }
	    }
	    return markup;
	  },

	  /**
	   * Returns a value that can be passed to
	   * ReactComponentEnvironment.replaceNodeWithMarkup.
	   */
	  getHostNode: function (internalInstance) {
	    return internalInstance.getHostNode();
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance, safely) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
	      }
	    }
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent(safely);
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
	      }
	    }
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.

	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
	      }
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
	    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
	      // The component's enqueued batch number should always be the current
	      // batch or the following one.
	      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
	      return;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
	      }
	    }
	    internalInstance.performUpdateIfNecessary(transaction);
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  }

	};

	module.exports = ReactReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactOwner = __webpack_require__(61);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  var prevRef = null;
	  var prevOwner = null;
	  if (prevElement !== null && typeof prevElement === 'object') {
	    prevRef = prevElement.ref;
	    prevOwner = prevElement._owner;
	  }

	  var nextRef = null;
	  var nextOwner = null;
	  if (nextElement !== null && typeof nextElement === 'object') {
	    nextRef = nextElement.ref;
	    nextOwner = nextElement._owner;
	  }

	  return prevRef !== nextRef ||
	  // If owner changes but we have an unchanged function ref, don't update refs
	  typeof nextRef === 'string' && nextOwner !== prevOwner;
	};

	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid owner.
	 * @final
	 */
	function isValidOwner(object) {
	  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	}

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {
	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
	    var ownerPublicInstance = owner.getPublicInstance();
	    // Check that `component`'s owner is still alive and that `component` is still the current ref
	    // because we do not want to detach the ref if another component stole it.
	    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	// Trust the developer to only use ReactInstrumentation with a __DEV__ check

	var debugTool = null;

	if (process.env.NODE_ENV !== 'production') {
	  var ReactDebugTool = __webpack_require__(63);
	  debugTool = ReactDebugTool;
	}

	module.exports = { debugTool: debugTool };
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactInvalidSetStateWarningHook = __webpack_require__(64);
	var ReactHostOperationHistoryHook = __webpack_require__(65);
	var ReactComponentTreeHook = __webpack_require__(26);
	var ExecutionEnvironment = __webpack_require__(48);

	var performanceNow = __webpack_require__(66);
	var warning = __webpack_require__(11);

	var hooks = [];
	var didHookThrowForEvent = {};

	function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
	  try {
	    fn.call(context, arg1, arg2, arg3, arg4, arg5);
	  } catch (e) {
	    process.env.NODE_ENV !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
	    didHookThrowForEvent[event] = true;
	  }
	}

	function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
	  for (var i = 0; i < hooks.length; i++) {
	    var hook = hooks[i];
	    var fn = hook[event];
	    if (fn) {
	      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
	    }
	  }
	}

	var isProfiling = false;
	var flushHistory = [];
	var lifeCycleTimerStack = [];
	var currentFlushNesting = 0;
	var currentFlushMeasurements = [];
	var currentFlushStartTime = 0;
	var currentTimerDebugID = null;
	var currentTimerStartTime = 0;
	var currentTimerNestedFlushDuration = 0;
	var currentTimerType = null;

	var lifeCycleTimerHasWarned = false;

	function clearHistory() {
	  ReactComponentTreeHook.purgeUnmountedComponents();
	  ReactHostOperationHistoryHook.clearHistory();
	}

	function getTreeSnapshot(registeredIDs) {
	  return registeredIDs.reduce(function (tree, id) {
	    var ownerID = ReactComponentTreeHook.getOwnerID(id);
	    var parentID = ReactComponentTreeHook.getParentID(id);
	    tree[id] = {
	      displayName: ReactComponentTreeHook.getDisplayName(id),
	      text: ReactComponentTreeHook.getText(id),
	      updateCount: ReactComponentTreeHook.getUpdateCount(id),
	      childIDs: ReactComponentTreeHook.getChildIDs(id),
	      // Text nodes don't have owners but this is close enough.
	      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
	      parentID: parentID
	    };
	    return tree;
	  }, {});
	}

	function resetMeasurements() {
	  var previousStartTime = currentFlushStartTime;
	  var previousMeasurements = currentFlushMeasurements;
	  var previousOperations = ReactHostOperationHistoryHook.getHistory();

	  if (currentFlushNesting === 0) {
	    currentFlushStartTime = 0;
	    currentFlushMeasurements = [];
	    clearHistory();
	    return;
	  }

	  if (previousMeasurements.length || previousOperations.length) {
	    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
	    flushHistory.push({
	      duration: performanceNow() - previousStartTime,
	      measurements: previousMeasurements || [],
	      operations: previousOperations || [],
	      treeSnapshot: getTreeSnapshot(registeredIDs)
	    });
	  }

	  clearHistory();
	  currentFlushStartTime = performanceNow();
	  currentFlushMeasurements = [];
	}

	function checkDebugID(debugID) {
	  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	  if (allowRoot && debugID === 0) {
	    return;
	  }
	  if (!debugID) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
	  }
	}

	function beginLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType && !lifeCycleTimerHasWarned) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  currentTimerStartTime = performanceNow();
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}

	function endLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  if (isProfiling) {
	    currentFlushMeasurements.push({
	      timerType: timerType,
	      instanceID: debugID,
	      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
	    });
	  }
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}

	function pauseCurrentLifeCycleTimer() {
	  var currentTimer = {
	    startTime: currentTimerStartTime,
	    nestedFlushStartTime: performanceNow(),
	    debugID: currentTimerDebugID,
	    timerType: currentTimerType
	  };
	  lifeCycleTimerStack.push(currentTimer);
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}

	function resumeCurrentLifeCycleTimer() {
	  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
	      startTime = _lifeCycleTimerStack$.startTime,
	      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
	      debugID = _lifeCycleTimerStack$.debugID,
	      timerType = _lifeCycleTimerStack$.timerType;

	  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
	  currentTimerStartTime = startTime;
	  currentTimerNestedFlushDuration += nestedFlushDuration;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}

	var lastMarkTimeStamp = 0;
	var canUsePerformanceMeasure =
	// $FlowFixMe https://github.com/facebook/flow/issues/2345
	typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

	function shouldMark(debugID) {
	  if (!isProfiling || !canUsePerformanceMeasure) {
	    return false;
	  }
	  var element = ReactComponentTreeHook.getElement(debugID);
	  if (element == null || typeof element !== 'object') {
	    return false;
	  }
	  var isHostElement = typeof element.type === 'string';
	  if (isHostElement) {
	    return false;
	  }
	  return true;
	}

	function markBegin(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }

	  var markName = debugID + '::' + markType;
	  lastMarkTimeStamp = performanceNow();
	  performance.mark(markName);
	}

	function markEnd(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }

	  var markName = debugID + '::' + markType;
	  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';

	  // Chrome has an issue of dropping markers recorded too fast:
	  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
	  // To work around this, we will not report very small measurements.
	  // I determined the magic number by tweaking it back and forth.
	  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
	  // When the bug is fixed, we can `measure()` unconditionally if we want to.
	  var timeStamp = performanceNow();
	  if (timeStamp - lastMarkTimeStamp > 0.1) {
	    var measurementName = displayName + ' [' + markType + ']';
	    performance.measure(measurementName, markName);
	  }

	  performance.clearMarks(markName);
	  performance.clearMeasures(measurementName);
	}

	var ReactDebugTool = {
	  addHook: function (hook) {
	    hooks.push(hook);
	  },
	  removeHook: function (hook) {
	    for (var i = 0; i < hooks.length; i++) {
	      if (hooks[i] === hook) {
	        hooks.splice(i, 1);
	        i--;
	      }
	    }
	  },
	  isProfiling: function () {
	    return isProfiling;
	  },
	  beginProfiling: function () {
	    if (isProfiling) {
	      return;
	    }

	    isProfiling = true;
	    flushHistory.length = 0;
	    resetMeasurements();
	    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
	  },
	  endProfiling: function () {
	    if (!isProfiling) {
	      return;
	    }

	    isProfiling = false;
	    resetMeasurements();
	    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
	  },
	  getFlushHistory: function () {
	    return flushHistory;
	  },
	  onBeginFlush: function () {
	    currentFlushNesting++;
	    resetMeasurements();
	    pauseCurrentLifeCycleTimer();
	    emitEvent('onBeginFlush');
	  },
	  onEndFlush: function () {
	    resetMeasurements();
	    currentFlushNesting--;
	    resumeCurrentLifeCycleTimer();
	    emitEvent('onEndFlush');
	  },
	  onBeginLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
	    markBegin(debugID, timerType);
	    beginLifeCycleTimer(debugID, timerType);
	  },
	  onEndLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    endLifeCycleTimer(debugID, timerType);
	    markEnd(debugID, timerType);
	    emitEvent('onEndLifeCycleTimer', debugID, timerType);
	  },
	  onBeginProcessingChildContext: function () {
	    emitEvent('onBeginProcessingChildContext');
	  },
	  onEndProcessingChildContext: function () {
	    emitEvent('onEndProcessingChildContext');
	  },
	  onHostOperation: function (operation) {
	    checkDebugID(operation.instanceID);
	    emitEvent('onHostOperation', operation);
	  },
	  onSetState: function () {
	    emitEvent('onSetState');
	  },
	  onSetChildren: function (debugID, childDebugIDs) {
	    checkDebugID(debugID);
	    childDebugIDs.forEach(checkDebugID);
	    emitEvent('onSetChildren', debugID, childDebugIDs);
	  },
	  onBeforeMountComponent: function (debugID, element, parentDebugID) {
	    checkDebugID(debugID);
	    checkDebugID(parentDebugID, true);
	    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
	    markBegin(debugID, 'mount');
	  },
	  onMountComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'mount');
	    emitEvent('onMountComponent', debugID);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUpdateComponent', debugID, element);
	    markBegin(debugID, 'update');
	  },
	  onUpdateComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'update');
	    emitEvent('onUpdateComponent', debugID);
	  },
	  onBeforeUnmountComponent: function (debugID) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUnmountComponent', debugID);
	    markBegin(debugID, 'unmount');
	  },
	  onUnmountComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'unmount');
	    emitEvent('onUnmountComponent', debugID);
	  },
	  onTestEvent: function () {
	    emitEvent('onTestEvent');
	  }
	};

	// TODO remove these when RN/www gets updated
	ReactDebugTool.addDevtool = ReactDebugTool.addHook;
	ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;

	ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
	ReactDebugTool.addHook(ReactComponentTreeHook);
	var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	if (/[?&]react_perf\b/.test(url)) {
	  ReactDebugTool.beginProfiling();
	}

	module.exports = ReactDebugTool;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var warning = __webpack_require__(11);

	if (process.env.NODE_ENV !== 'production') {
	  var processingChildContext = false;

	  var warnInvalidSetState = function () {
	    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
	  };
	}

	var ReactInvalidSetStateWarningHook = {
	  onBeginProcessingChildContext: function () {
	    processingChildContext = true;
	  },
	  onEndProcessingChildContext: function () {
	    processingChildContext = false;
	  },
	  onSetState: function () {
	    warnInvalidSetState();
	  }
	};

	module.exports = ReactInvalidSetStateWarningHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 65 */
/***/ function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var history = [];

	var ReactHostOperationHistoryHook = {
	  onHostOperation: function (operation) {
	    history.push(operation);
	  },
	  clearHistory: function () {
	    if (ReactHostOperationHistoryHook._preventClearing) {
	      // Should only be used for tests.
	      return;
	    }

	    history = [];
	  },
	  getHistory: function () {
	    return history;
	  }
	};

	module.exports = ReactHostOperationHistoryHook;

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var performance = __webpack_require__(67);

	var performanceNow;

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function performanceNow() {
	    return performance.now();
	  };
	} else {
	  performanceNow = function performanceNow() {
	    return Date.now();
	  };
	}

	module.exports = performanceNow;

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(48);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}

	module.exports = performance || {};

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	var OBSERVED_ERROR = {};

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var TransactionImpl = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	module.exports = TransactionImpl;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 69 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */

	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;

	  // Normalize SVG <use> element events #4963
	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  }

	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(48);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;

/***/ },
/* 71 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */

	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }

	  if (nodeName === 'textarea') {
	    return true;
	  }

	  return false;
	}

	module.exports = isTextInputElement;

/***/ },
/* 72 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */

	var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

	module.exports = DefaultEventPluginOrder;

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPropagators = __webpack_require__(41);
	var ReactDOMComponentTree = __webpack_require__(34);
	var SyntheticMouseEvent = __webpack_require__(74);

	var eventTypes = {
	  mouseEnter: {
	    registrationName: 'onMouseEnter',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  },
	  mouseLeave: {
	    registrationName: 'onMouseLeave',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  }
	};

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (nativeEventTarget.window === nativeEventTarget) {
	      // `nativeEventTarget` is probably a window object.
	      win = nativeEventTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = nativeEventTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;
	    if (topLevelType === 'topMouseOut') {
	      from = targetInst;
	      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
	      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
	    } else {
	      // Moving to a node from outside the window.
	      from = null;
	      to = targetInst;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
	    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = fromNode;
	    leave.relatedTarget = toNode;

	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = toNode;
	    enter.relatedTarget = fromNode;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

	    return [leave, enter];
	  }

	};

	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(75);
	var ViewportMetrics = __webpack_require__(76);

	var getEventModifierState = __webpack_require__(77);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(53);

	var getEventTarget = __webpack_require__(69);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;

/***/ },
/* 76 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;

/***/ },
/* 77 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(36);

	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: 0,
	    acceptCharset: 0,
	    accessKey: 0,
	    action: 0,
	    allowFullScreen: HAS_BOOLEAN_VALUE,
	    allowTransparency: 0,
	    alt: 0,
	    // specifies target context for links with `preload` type
	    as: 0,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: 0,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: HAS_BOOLEAN_VALUE,
	    cellPadding: 0,
	    cellSpacing: 0,
	    charSet: 0,
	    challenge: 0,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    cite: 0,
	    classID: 0,
	    className: 0,
	    cols: HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: 0,
	    content: 0,
	    contentEditable: 0,
	    contextMenu: 0,
	    controls: HAS_BOOLEAN_VALUE,
	    coords: 0,
	    crossOrigin: 0,
	    data: 0, // For `<object />` acts as `src`.
	    dateTime: 0,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: 0,
	    disabled: HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: 0,
	    encType: 0,
	    form: 0,
	    formAction: 0,
	    formEncType: 0,
	    formMethod: 0,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: 0,
	    frameBorder: 0,
	    headers: 0,
	    height: 0,
	    hidden: HAS_BOOLEAN_VALUE,
	    high: 0,
	    href: 0,
	    hrefLang: 0,
	    htmlFor: 0,
	    httpEquiv: 0,
	    icon: 0,
	    id: 0,
	    inputMode: 0,
	    integrity: 0,
	    is: 0,
	    keyParams: 0,
	    keyType: 0,
	    kind: 0,
	    label: 0,
	    lang: 0,
	    list: 0,
	    loop: HAS_BOOLEAN_VALUE,
	    low: 0,
	    manifest: 0,
	    marginHeight: 0,
	    marginWidth: 0,
	    max: 0,
	    maxLength: 0,
	    media: 0,
	    mediaGroup: 0,
	    method: 0,
	    min: 0,
	    minLength: 0,
	    // Caution; `option.selected` is not updated if `select.multiple` is
	    // disabled with `removeAttribute`.
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: 0,
	    nonce: 0,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: 0,
	    pattern: 0,
	    placeholder: 0,
	    playsInline: HAS_BOOLEAN_VALUE,
	    poster: 0,
	    preload: 0,
	    profile: 0,
	    radioGroup: 0,
	    readOnly: HAS_BOOLEAN_VALUE,
	    referrerPolicy: 0,
	    rel: 0,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: 0,
	    rows: HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: HAS_NUMERIC_VALUE,
	    sandbox: 0,
	    scope: 0,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: 0,
	    seamless: HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: 0,
	    size: HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: 0,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: 0,
	    src: 0,
	    srcDoc: 0,
	    srcLang: 0,
	    srcSet: 0,
	    start: HAS_NUMERIC_VALUE,
	    step: 0,
	    style: 0,
	    summary: 0,
	    tabIndex: 0,
	    target: 0,
	    title: 0,
	    // Setting .type throws on non-<input> tags
	    type: 0,
	    useMap: 0,
	    value: 0,
	    width: 0,
	    wmode: 0,
	    wrap: 0,

	    /**
	     * RDFa Properties
	     */
	    about: 0,
	    datatype: 0,
	    inlist: 0,
	    prefix: 0,
	    // property is also supported for OpenGraph in meta tags.
	    property: 0,
	    resource: 0,
	    'typeof': 0,
	    vocab: 0,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: 0,
	    autoCorrect: 0,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: 0,
	    // color is for Safari mask-icon link
	    color: 0,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: 0,
	    itemScope: HAS_BOOLEAN_VALUE,
	    itemType: 0,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: 0,
	    itemRef: 0,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: 0,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: 0,
	    // IE-only attribute that controls focus behavior
	    unselectable: 0
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {}
	};

	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(80);
	var ReactDOMIDOperations = __webpack_require__(91);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup

	};

	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMLazyTree = __webpack_require__(81);
	var Danger = __webpack_require__(87);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactInstrumentation = __webpack_require__(62);

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(84);
	var setInnerHTML = __webpack_require__(83);
	var setTextContent = __webpack_require__(85);

	function getNodeAfter(parentNode, node) {
	  // Special case for text components, which return [open, close] comments
	  // from getHostNode.
	  if (Array.isArray(node)) {
	    node = node[1];
	  }
	  return node ? node.nextSibling : parentNode.firstChild;
	}

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
	  // We rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
	  // we are careful to use `null`.)
	  parentNode.insertBefore(childNode, referenceNode);
	});

	function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
	  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
	}

	function moveChild(parentNode, childNode, referenceNode) {
	  if (Array.isArray(childNode)) {
	    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
	  } else {
	    insertChildAt(parentNode, childNode, referenceNode);
	  }
	}

	function removeChild(parentNode, childNode) {
	  if (Array.isArray(childNode)) {
	    var closingComment = childNode[1];
	    childNode = childNode[0];
	    removeDelimitedText(parentNode, childNode, closingComment);
	    parentNode.removeChild(closingComment);
	  }
	  parentNode.removeChild(childNode);
	}

	function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
	  var node = openingComment;
	  while (true) {
	    var nextNode = node.nextSibling;
	    insertChildAt(parentNode, node, referenceNode);
	    if (node === closingComment) {
	      break;
	    }
	    node = nextNode;
	  }
	}

	function removeDelimitedText(parentNode, startNode, closingComment) {
	  while (true) {
	    var node = startNode.nextSibling;
	    if (node === closingComment) {
	      // The closing comment is removed by ReactMultiChild.
	      break;
	    } else {
	      parentNode.removeChild(node);
	    }
	  }
	}

	function replaceDelimitedText(openingComment, closingComment, stringText) {
	  var parentNode = openingComment.parentNode;
	  var nodeAfterComment = openingComment.nextSibling;
	  if (nodeAfterComment === closingComment) {
	    // There are no text nodes between the opening and closing comments; insert
	    // a new one if stringText isn't empty.
	    if (stringText) {
	      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
	    }
	  } else {
	    if (stringText) {
	      // Set the text content of the first node after the opening comment, and
	      // remove all following nodes up until the closing comment.
	      setTextContent(nodeAfterComment, stringText);
	      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
	    } else {
	      removeDelimitedText(parentNode, openingComment, closingComment);
	    }
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onHostOperation({
	      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
	      type: 'replace text',
	      payload: stringText
	    });
	  }
	}

	var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
	if (process.env.NODE_ENV !== 'production') {
	  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
	    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
	    if (prevInstance._debugID !== 0) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: prevInstance._debugID,
	        type: 'replace with',
	        payload: markup.toString()
	      });
	    } else {
	      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
	      if (nextInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: nextInstance._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  };
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,

	  replaceDelimitedText: replaceDelimitedText,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  processUpdates: function (parentNode, updates) {
	    if (process.env.NODE_ENV !== 'production') {
	      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
	    }

	    for (var k = 0; k < updates.length; k++) {
	      var update = updates[k];
	      switch (update.type) {
	        case 'INSERT_MARKUP':
	          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'insert child',
	              payload: { toIndex: update.toIndex, content: update.content.toString() }
	            });
	          }
	          break;
	        case 'MOVE_EXISTING':
	          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'move child',
	              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
	            });
	          }
	          break;
	        case 'SET_MARKUP':
	          setInnerHTML(parentNode, update.content);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace children',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'TEXT_CONTENT':
	          setTextContent(parentNode, update.content);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace text',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'REMOVE_NODE':
	          removeChild(parentNode, update.fromNode);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'remove child',
	              payload: { fromIndex: update.fromIndex }
	            });
	          }
	          break;
	      }
	    }
	  }

	};

	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMNamespaces = __webpack_require__(82);
	var setInnerHTML = __webpack_require__(83);

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(84);
	var setTextContent = __webpack_require__(85);

	var ELEMENT_NODE_TYPE = 1;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	/**
	 * In IE (8-11) and Edge, appending nodes with no children is dramatically
	 * faster than appending a full subtree, so we essentially queue up the
	 * .appendChild calls here and apply them so each node is added to its parent
	 * before any children are added.
	 *
	 * In other browsers, doing so is slower or neutral compared to the other order
	 * (in Firefox, twice as slow) so we only do this inversion in IE.
	 *
	 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
	 */
	var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);

	function insertTreeChildren(tree) {
	  if (!enableLazy) {
	    return;
	  }
	  var node = tree.node;
	  var children = tree.children;
	  if (children.length) {
	    for (var i = 0; i < children.length; i++) {
	      insertTreeBefore(node, children[i], null);
	    }
	  } else if (tree.html != null) {
	    setInnerHTML(node, tree.html);
	  } else if (tree.text != null) {
	    setTextContent(node, tree.text);
	  }
	}

	var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
	  // DocumentFragments aren't actually part of the DOM after insertion so
	  // appending children won't update the DOM. We need to ensure the fragment
	  // is properly populated first, breaking out of our lazy approach for just
	  // this level. Also, some <object> plugins (like Flash Player) will read
	  // <param> nodes immediately upon insertion into the DOM, so <object>
	  // must also be populated prior to insertion into the DOM.
	  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
	    insertTreeChildren(tree);
	    parentNode.insertBefore(tree.node, referenceNode);
	  } else {
	    parentNode.insertBefore(tree.node, referenceNode);
	    insertTreeChildren(tree);
	  }
	});

	function replaceChildWithTree(oldNode, newTree) {
	  oldNode.parentNode.replaceChild(newTree.node, oldNode);
	  insertTreeChildren(newTree);
	}

	function queueChild(parentTree, childTree) {
	  if (enableLazy) {
	    parentTree.children.push(childTree);
	  } else {
	    parentTree.node.appendChild(childTree.node);
	  }
	}

	function queueHTML(tree, html) {
	  if (enableLazy) {
	    tree.html = html;
	  } else {
	    setInnerHTML(tree.node, html);
	  }
	}

	function queueText(tree, text) {
	  if (enableLazy) {
	    tree.text = text;
	  } else {
	    setTextContent(tree.node, text);
	  }
	}

	function toString() {
	  return this.node.nodeName;
	}

	function DOMLazyTree(node) {
	  return {
	    node: node,
	    children: [],
	    html: null,
	    text: null,
	    toString: toString
	  };
	}

	DOMLazyTree.insertTreeBefore = insertTreeBefore;
	DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
	DOMLazyTree.queueChild = queueChild;
	DOMLazyTree.queueHTML = queueHTML;
	DOMLazyTree.queueText = queueText;

	module.exports = DOMLazyTree;

/***/ },
/* 82 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMNamespaces = {
	  html: 'http://www.w3.org/1999/xhtml',
	  mathml: 'http://www.w3.org/1998/Math/MathML',
	  svg: 'http://www.w3.org/2000/svg'
	};

	module.exports = DOMNamespaces;

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(48);
	var DOMNamespaces = __webpack_require__(82);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(84);

	// SVG temp container for IE lacking innerHTML
	var reusableSVGContainer;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  // IE does not have innerHTML for SVG nodes, so instead we inject the
	  // new markup in a temp node and then move the child nodes across into
	  // the target node
	  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
	    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
	    var svgNode = reusableSVGContainer.firstChild;
	    while (svgNode.firstChild) {
	      node.appendChild(svgNode.firstChild);
	    }
	  } else {
	    node.innerHTML = html;
	  }
	});

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	  testElement = null;
	}

	module.exports = setInnerHTML;

/***/ },
/* 84 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/* globals MSApp */

	'use strict';

	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */

	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};

	module.exports = createMicrosoftUnsafeLocalFunction;

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(48);
	var escapeTextContentForBrowser = __webpack_require__(86);
	var setInnerHTML = __webpack_require__(83);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  if (text) {
	    var firstChild = node.firstChild;

	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      if (node.nodeType === 3) {
	        node.nodeValue = text;
	        return;
	      }
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;

/***/ },
/* 86 */
/***/ function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * Based on the escape-html library, which is used under the MIT License below:
	 *
	 * Copyright (c) 2012-2013 TJ Holowaychuk
	 * Copyright (c) 2015 Andreas Lubbe
	 * Copyright (c) 2015 Tiancheng "Timothy" Gu
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining
	 * a copy of this software and associated documentation files (the
	 * 'Software'), to deal in the Software without restriction, including
	 * without limitation the rights to use, copy, modify, merge, publish,
	 * distribute, sublicense, and/or sell copies of the Software, and to
	 * permit persons to whom the Software is furnished to do so, subject to
	 * the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be
	 * included in all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 *
	 */

	'use strict';

	// code copied and modified from escape-html
	/**
	 * Module variables.
	 * @private
	 */

	var matchHtmlRegExp = /["'&<>]/;

	/**
	 * Escape special characters in the given string of html.
	 *
	 * @param  {string} string The string to escape for inserting into HTML
	 * @return {string}
	 * @public
	 */

	function escapeHtml(string) {
	  var str = '' + string;
	  var match = matchHtmlRegExp.exec(str);

	  if (!match) {
	    return str;
	  }

	  var escape;
	  var html = '';
	  var index = 0;
	  var lastIndex = 0;

	  for (index = match.index; index < str.length; index++) {
	    switch (str.charCodeAt(index)) {
	      case 34:
	        // "
	        escape = '&quot;';
	        break;
	      case 38:
	        // &
	        escape = '&amp;';
	        break;
	      case 39:
	        // '
	        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
	        break;
	      case 60:
	        // <
	        escape = '&lt;';
	        break;
	      case 62:
	        // >
	        escape = '&gt;';
	        break;
	      default:
	        continue;
	    }

	    if (lastIndex !== index) {
	      html += str.substring(lastIndex, index);
	    }

	    lastIndex = index + 1;
	    html += escape;
	  }

	  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
	}
	// end code copied and modified from escape-html


	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  if (typeof text === 'boolean' || typeof text === 'number') {
	    // this shortcircuit helps perf for types that we know will never have
	    // special characters, especially given that this function is used often
	    // for numeric dom ids.
	    return '' + text;
	  }
	  return escapeHtml(text);
	}

	module.exports = escapeTextContentForBrowser;

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var DOMLazyTree = __webpack_require__(81);
	var ExecutionEnvironment = __webpack_require__(48);

	var createNodesFromMarkup = __webpack_require__(88);
	var emptyFunction = __webpack_require__(12);
	var invariant = __webpack_require__(8);

	var Danger = {

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
	    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;

	    if (typeof markup === 'string') {
	      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	      oldChild.parentNode.replaceChild(newChild, oldChild);
	    } else {
	      DOMLazyTree.replaceChildWithTree(oldChild, markup);
	    }
	  }

	};

	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/*eslint-disable fb-www/unsafe-html*/

	var ExecutionEnvironment = __webpack_require__(48);

	var createArrayFromMixed = __webpack_require__(89);
	var getMarkupWrap = __webpack_require__(90);
	var invariant = __webpack_require__(8);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = Array.from(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var invariant = __webpack_require__(8);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
	  // in old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

	  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/*eslint-disable fb-www/unsafe-html */

	var ExecutionEnvironment = __webpack_require__(48);

	var invariant = __webpack_require__(8);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */

	var shouldWrap = {};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap
	};

	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}

	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(80);
	var ReactDOMComponentTree = __webpack_require__(34);

	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
	    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
	    DOMChildrenOperations.processUpdates(node, updates);
	  }
	};

	module.exports = ReactDOMIDOperations;

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var AutoFocusUtils = __webpack_require__(93);
	var CSSPropertyOperations = __webpack_require__(95);
	var DOMLazyTree = __webpack_require__(81);
	var DOMNamespaces = __webpack_require__(82);
	var DOMProperty = __webpack_require__(36);
	var DOMPropertyOperations = __webpack_require__(103);
	var EventPluginHub = __webpack_require__(42);
	var EventPluginRegistry = __webpack_require__(43);
	var ReactBrowserEventEmitter = __webpack_require__(105);
	var ReactDOMComponentFlags = __webpack_require__(37);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDOMInput = __webpack_require__(108);
	var ReactDOMOption = __webpack_require__(111);
	var ReactDOMSelect = __webpack_require__(112);
	var ReactDOMTextarea = __webpack_require__(113);
	var ReactInstrumentation = __webpack_require__(62);
	var ReactMultiChild = __webpack_require__(114);
	var ReactServerRenderingTransaction = __webpack_require__(133);

	var emptyFunction = __webpack_require__(12);
	var escapeTextContentForBrowser = __webpack_require__(86);
	var invariant = __webpack_require__(8);
	var isEventSupported = __webpack_require__(70);
	var shallowEqual = __webpack_require__(123);
	var validateDOMNesting = __webpack_require__(136);
	var warning = __webpack_require__(11);

	var Flags = ReactDOMComponentFlags;
	var deleteListener = EventPluginHub.deleteListener;
	var getNode = ReactDOMComponentTree.getNodeFromInstance;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = EventPluginRegistry.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };

	var STYLE = 'style';
	var HTML = '__html';
	var RESERVED_PROPS = {
	  children: null,
	  dangerouslySetInnerHTML: null,
	  suppressContentEditableWarning: null
	};

	// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
	var DOC_FRAGMENT_TYPE = 11;

	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}

	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined because undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}

	var styleMutationWarning = {};

	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }

	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }

	  var hash = ownerName + '|' + componentName;

	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }

	  styleMutationWarning[hash] = true;

	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
	}

	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (voidElementTags[component._tag]) {
	    !(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
	  }
	  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
	}

	function enqueuePutListener(inst, registrationName, listener, transaction) {
	  if (transaction instanceof ReactServerRenderingTransaction) {
	    return;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : void 0;
	  }
	  var containerInfo = inst._hostContainerInfo;
	  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
	  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
	  listenTo(registrationName, doc);
	  transaction.getReactMountReady().enqueue(putListener, {
	    inst: inst,
	    registrationName: registrationName,
	    listener: listener
	  });
	}

	function putListener() {
	  var listenerToPut = this;
	  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
	}

	function inputPostMount() {
	  var inst = this;
	  ReactDOMInput.postMountWrapper(inst);
	}

	function textareaPostMount() {
	  var inst = this;
	  ReactDOMTextarea.postMountWrapper(inst);
	}

	function optionPostMount() {
	  var inst = this;
	  ReactDOMOption.postMountWrapper(inst);
	}

	var setAndValidateContentChildDev = emptyFunction;
	if (process.env.NODE_ENV !== 'production') {
	  setAndValidateContentChildDev = function (content) {
	    var hasExistingContent = this._contentDebugID != null;
	    var debugID = this._debugID;
	    // This ID represents the inlined child that has no backing instance:
	    var contentDebugID = -debugID;

	    if (content == null) {
	      if (hasExistingContent) {
	        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
	      }
	      this._contentDebugID = null;
	      return;
	    }

	    validateDOMNesting(null, String(content), this, this._ancestorInfo);
	    this._contentDebugID = contentDebugID;
	    if (hasExistingContent) {
	      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
	      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
	    } else {
	      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
	      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
	      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
	    }
	  };
	}

	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};

	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
	  var node = getNode(inst);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;

	  switch (inst._tag) {
	    case 'iframe':
	    case 'object':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'video':
	    case 'audio':

	      inst._wrapperState.listeners = [];
	      // Create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
	        }
	      }
	      break;
	    case 'source':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
	      break;
	    case 'input':
	    case 'select':
	    case 'textarea':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
	      break;
	  }
	}

	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special-case tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};

	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};

	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = _assign({
	  'menuitem': true
	}, omittedCloseTags);

	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
	    validatedTagCache[tag] = true;
	  }
	}

	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}

	var globalIdCounter = 1;

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(element) {
	  var tag = element.type;
	  validateDangerousTag(tag);
	  this._currentElement = element;
	  this._tag = tag.toLowerCase();
	  this._namespaceURI = null;
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._hostNode = null;
	  this._hostParent = null;
	  this._rootNodeID = 0;
	  this._domID = 0;
	  this._hostContainerInfo = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._flags = 0;
	  if (process.env.NODE_ENV !== 'production') {
	    this._ancestorInfo = null;
	    setAndValidateContentChildDev.call(this, null);
	  }
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?ReactDOMComponent} the parent component instance
	   * @param {?object} info about the host container
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    this._rootNodeID = globalIdCounter++;
	    this._domID = hostContainerInfo._idCounter++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var props = this._currentElement.props;

	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, hostParent);
	        props = ReactDOMInput.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, hostParent);
	        props = ReactDOMOption.getHostProps(this, props);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, hostParent);
	        props = ReactDOMSelect.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, hostParent);
	        props = ReactDOMTextarea.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	    }

	    assertValidProps(this, props);

	    // We create tags in the namespace of their parent container, except HTML
	    // tags get no namespace.
	    var namespaceURI;
	    var parentTag;
	    if (hostParent != null) {
	      namespaceURI = hostParent._namespaceURI;
	      parentTag = hostParent._tag;
	    } else if (hostContainerInfo._tag) {
	      namespaceURI = hostContainerInfo._namespaceURI;
	      parentTag = hostContainerInfo._tag;
	    }
	    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
	      namespaceURI = DOMNamespaces.html;
	    }
	    if (namespaceURI === DOMNamespaces.html) {
	      if (this._tag === 'svg') {
	        namespaceURI = DOMNamespaces.svg;
	      } else if (this._tag === 'math') {
	        namespaceURI = DOMNamespaces.mathml;
	      }
	    }
	    this._namespaceURI = namespaceURI;

	    if (process.env.NODE_ENV !== 'production') {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo._tag) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(this._tag, null, this, parentInfo);
	      }
	      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
	    }

	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var el;
	      if (namespaceURI === DOMNamespaces.html) {
	        if (this._tag === 'script') {
	          // Create the script via .innerHTML so its "parser-inserted" flag is
	          // set to true and it does not execute
	          var div = ownerDocument.createElement('div');
	          var type = this._currentElement.type;
	          div.innerHTML = '<' + type + '></' + type + '>';
	          el = div.removeChild(div.firstChild);
	        } else if (props.is) {
	          el = ownerDocument.createElement(this._currentElement.type, props.is);
	        } else {
	          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
	          // See discussion in https://github.com/facebook/react/pull/6896
	          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	          el = ownerDocument.createElement(this._currentElement.type);
	        }
	      } else {
	        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
	      }
	      ReactDOMComponentTree.precacheNode(this, el);
	      this._flags |= Flags.hasCachedChildNodes;
	      if (!this._hostParent) {
	        DOMPropertyOperations.setAttributeForRoot(el);
	      }
	      this._updateDOMProperties(null, props, transaction);
	      var lazyTree = DOMLazyTree(el);
	      this._createInitialChildren(transaction, props, context, lazyTree);
	      mountImage = lazyTree;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }

	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(inputPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'textarea':
	        transaction.getReactMountReady().enqueue(textareaPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'select':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'button':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'option':
	        transaction.getReactMountReady().enqueue(optionPostMount, this);
	        break;
	    }

	    return mountImage;
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = _assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }

	    if (!this._hostParent) {
	      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
	    }
	    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
	    return ret;
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	        if (process.env.NODE_ENV !== 'production') {
	          setAndValidateContentChildDev.call(this, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },

	  _createInitialChildren: function (transaction, props, context, lazyTree) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      // TODO: Validate that text is allowed as a child of this node
	      if (contentToUse != null) {
	        // Avoid setting textContent when the text is empty. In IE11 setting
	        // textContent on a text area will cause the placeholder to not
	        // show within the textarea until it has been focused and blurred again.
	        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
	        if (contentToUse !== '') {
	          if (process.env.NODE_ENV !== 'production') {
	            setAndValidateContentChildDev.call(this, contentToUse);
	          }
	          DOMLazyTree.queueText(lazyTree, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
	        }
	      }
	    }
	  },

	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;

	    switch (this._tag) {
	      case 'input':
	        lastProps = ReactDOMInput.getHostProps(this, lastProps);
	        nextProps = ReactDOMInput.getHostProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getHostProps(this, lastProps);
	        nextProps = ReactDOMOption.getHostProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
	        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
	        break;
	      case 'textarea':
	        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
	        break;
	    }

	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);

	    switch (this._tag) {
	      case 'input':
	        // Update the wrapper around inputs *after* updating props. This has to
	        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
	        // raise warnings and prevent the new value from being assigned.
	        ReactDOMInput.updateWrapper(this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        break;
	      case 'select':
	        // <select> value update needs to occur after <option> children
	        // reconciliation
	        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	        break;
	    }
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, lastProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = _assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        var node = getNode(this);
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertently setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	        if (process.env.NODE_ENV !== 'production') {
	          setAndValidateContentChildDev.call(this, nextContent);
	        }
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    } else if (nextChildren != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        setAndValidateContentChildDev.call(this, null);
	      }

	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  getHostNode: function () {
	    return getNode(this);
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
	        break;
	    }

	    this.unmountChildren(safely);
	    ReactDOMComponentTree.uncacheNode(this);
	    EventPluginHub.deleteAllListeners(this);
	    this._rootNodeID = 0;
	    this._domID = 0;
	    this._wrapperState = null;

	    if (process.env.NODE_ENV !== 'production') {
	      setAndValidateContentChildDev.call(this, null);
	    }
	  },

	  getPublicInstance: function () {
	    return getNode(this);
	  }

	};

	_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMComponentTree = __webpack_require__(34);

	var focusNode = __webpack_require__(94);

	var AutoFocusUtils = {
	  focusDOMComponent: function () {
	    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
	  }
	};

	module.exports = AutoFocusUtils;

/***/ },
/* 94 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */

	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}

	module.exports = focusNode;

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var CSSProperty = __webpack_require__(96);
	var ExecutionEnvironment = __webpack_require__(48);
	var ReactInstrumentation = __webpack_require__(62);

	var camelizeStyleName = __webpack_require__(97);
	var dangerousStyleValue = __webpack_require__(99);
	var hyphenateStyleName = __webpack_require__(100);
	var memoizeStringOnly = __webpack_require__(102);
	var warning = __webpack_require__(11);

	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});

	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;

	  var warnHyphenatedStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
	  };

	  var warnBadVendoredStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
	  };

	  var warnStyleValueWithSemicolon = function (name, value, owner) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
	  };

	  var warnStyleValueIsNaN = function (name, value, owner) {
	    if (warnedForNaNValue) {
	      return;
	    }

	    warnedForNaNValue = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
	  };

	  var checkRenderMessage = function (owner) {
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' Check the render method of `' + name + '`.';
	      }
	    }
	    return '';
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   * @param {ReactDOMComponent} component
	   */
	  var warnValidStyle = function (name, value, component) {
	    var owner;
	    if (component) {
	      owner = component._currentElement._owner;
	    }
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name, owner);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name, owner);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value, owner);
	    }

	    if (typeof value === 'number' && isNaN(value)) {
	      warnStyleValueIsNaN(name, value, owner);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles, component) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue, component);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, component) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   */
	  setValueForStyles: function (node, styles, component) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: component._debugID,
	        type: 'update styles',
	        payload: styles
	      });
	    }

	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName], component);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName], component);
	      if (styleName === 'float' || styleName === 'cssFloat') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 96 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */

	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridRow: true,
	  gridColumn: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var camelize = __webpack_require__(98);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;

/***/ },
/* 98 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var CSSProperty = __webpack_require__(96);
	var warning = __webpack_require__(11);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;
	var styleWarnings = {};

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @param {ReactDOMComponent} component
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value, component) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    if (process.env.NODE_ENV !== 'production') {
	      // Allow '0' to pass through without warning. 0 is already special and
	      // doesn't require units, so we don't need to warn about it.
	      if (component && value !== '0') {
	        var owner = component._currentElement._owner;
	        var ownerName = owner ? owner.getName() : null;
	        if (ownerName && !styleWarnings[ownerName]) {
	          styleWarnings[ownerName] = {};
	        }
	        var warned = false;
	        if (ownerName) {
	          var warnings = styleWarnings[ownerName];
	          warned = warnings[name];
	          if (!warned) {
	            warnings[name] = true;
	          }
	        }
	        if (!warned) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
	        }
	      }
	    }
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var hyphenate = __webpack_require__(101);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;

/***/ },
/* 101 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;

/***/ },
/* 102 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 */

	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(36);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactInstrumentation = __webpack_require__(62);

	var quoteAttributeValueForBrowser = __webpack_require__(104);
	var warning = __webpack_require__(11);

	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};

	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
	  return false;
	}

	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },

	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },

	  createMarkupForRoot: function () {
	    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
	  },

	  setAttributeForRoot: function (node) {
	    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    }
	    return null;
	  },

	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	        return;
	      } else if (propertyInfo.mustUseProperty) {
	        // Contrary to `setAttribute`, object properties are properly
	        // `toString`ed by IE8/9.
	        node[propertyInfo.propertyName] = value;
	      } else {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	      return;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },

	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },

	  /**
	   * Deletes an attributes from a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForAttribute: function (node, name) {
	    node.removeAttribute(name);
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseProperty) {
	        var propName = propertyInfo.propertyName;
	        if (propertyInfo.hasBooleanValue) {
	          node[propName] = false;
	        } else {
	          node[propName] = '';
	        }
	      } else {
	        node.removeAttribute(propertyInfo.attributeName);
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  }

	};

	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(86);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var EventPluginRegistry = __webpack_require__(43);
	var ReactEventEmitterMixin = __webpack_require__(106);
	var ViewportMetrics = __webpack_require__(76);

	var getVendorPrefixedEventName = __webpack_require__(107);
	var isEventSupported = __webpack_require__(70);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var hasEventPageXY;
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
	  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
	  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === 'topWheel') {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === 'topScroll') {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === 'topFocus' || dependency === 'topBlur') {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening.topBlur = true;
	          isListening.topFocus = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },

	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },

	  /**
	   * Protect against document.createEvent() returning null
	   * Some popup blocker extensions appear to do this:
	   * https://github.com/facebook/react/issues/6887
	   */
	  supportsEventPageXY: function () {
	    if (!document.createEvent) {
	      return false;
	    }
	    var ev = document.createEvent('MouseEvent');
	    return ev != null && 'pageX' in ev;
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
	   * pageX/pageY isn't supported (legacy browsers).
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (hasEventPageXY === undefined) {
	      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
	    }
	    if (!hasEventPageXY && !isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  }

	});

	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(42);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   */
	  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(48);

	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */
	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};

	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  prefixes['ms' + styleProp] = 'MS' + eventName;
	  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

	  return prefixes;
	}

	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */
	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};

	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */
	var prefixedEventNames = {};

	/**
	 * Element to check for prefixes on.
	 */
	var style = {};

	/**
	 * Bootstrap if a DOM exists.
	 */
	if (ExecutionEnvironment.canUseDOM) {
	  style = document.createElement('div').style;

	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.
	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  }

	  // Same as above
	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}

	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */
	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }

	  var prefixMap = vendorPrefixes[eventName];

	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }

	  return '';
	}

	module.exports = getVendorPrefixedEventName;

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var DOMPropertyOperations = __webpack_require__(103);
	var LinkedValueUtils = __webpack_require__(109);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(56);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	var didWarnValueLink = false;
	var didWarnCheckedLink = false;
	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}

	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked != null : props.value != null;
	}

	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getHostProps: function (inst, props) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);

	    var hostProps = _assign({
	      // Make sure we set .type before any other properties (setting .value
	      // before .type means .value is lost in IE11 and below)
	      type: undefined,
	      // Make sure we set .step before .value (setting .value before .step
	      // means .value is rounded on mount, based upon step precision)
	      step: undefined,
	      // Make sure we set .min & .max before .value (to ensure proper order
	      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
	      min: undefined,
	      max: undefined
	    }, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });

	    return hostProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);

	      var owner = inst._currentElement._owner;

	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnCheckedLink = true;
	      }
	      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnCheckedDefaultChecked = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnValueDefaultValue = true;
	      }
	    }

	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	      initialValue: props.value != null ? props.value : defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };

	    if (process.env.NODE_ENV !== 'production') {
	      inst._wrapperState.controlled = isControlled(props);
	    }
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    if (process.env.NODE_ENV !== 'production') {
	      var controlled = isControlled(props);
	      var owner = inst._currentElement._owner;

	      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnUncontrolledToControlled = true;
	      }
	      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnControlledToUncontrolled = true;
	      }
	    }

	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
	    }

	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {

	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;

	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	    } else {
	      if (props.value == null && props.defaultValue != null) {
	        // In Chrome, assigning defaultValue to certain input types triggers input validation.
	        // For number inputs, the display value loses trailing decimal points. For email inputs,
	        // Chrome raises "The specified value <x> is not a valid email address".
	        //
	        // Here we check to see if the defaultValue has actually changed, avoiding these problems
	        // when the user is inputting text
	        //
	        // https://github.com/facebook/react/issues/7253
	        if (node.defaultValue !== '' + props.defaultValue) {
	          node.defaultValue = '' + props.defaultValue;
	        }
	      }
	      if (props.checked == null && props.defaultChecked != null) {
	        node.defaultChecked = !!props.defaultChecked;
	      }
	    }
	  },

	  postMountWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

	    // Detach value from defaultValue. We won't do anything if we're working on
	    // submit or reset inputs as those values & defaultValues are linked. They
	    // are not resetable nodes so this operation doesn't matter and actually
	    // removes browser-default values (eg "Submit Query") when no value is
	    // provided.

	    switch (props.type) {
	      case 'submit':
	      case 'reset':
	        break;
	      case 'color':
	      case 'date':
	      case 'datetime':
	      case 'datetime-local':
	      case 'month':
	      case 'time':
	      case 'week':
	        // This fixes the no-show issue on iOS Safari and Android Chrome:
	        // https://github.com/facebook/react/issues/7233
	        node.value = '';
	        node.value = node.defaultValue;
	        break;
	      default:
	        node.value = node.value;
	        break;
	    }

	    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	    // this is needed to work around a chrome bug where setting defaultChecked
	    // will sometimes influence the value of checked (even after detachment).
	    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	    // We need to temporarily unset name to avoid disrupting radio button groups.
	    var name = node.name;
	    if (name !== '') {
	      node.name = '';
	    }
	    node.defaultChecked = !node.defaultChecked;
	    node.defaultChecked = !node.defaultChecked;
	    if (name !== '') {
	      node.name = name;
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;

	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);

	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.
	      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }

	  return returnValue;
	}

	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var React = __webpack_require__(2);
	var ReactPropTypesSecret = __webpack_require__(110);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
	}

	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
	}

	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: React.PropTypes.func
	};

	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
	      }
	    }
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};

	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 110 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var React = __webpack_require__(2);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDOMSelect = __webpack_require__(112);

	var warning = __webpack_require__(11);
	var didWarnInvalidOptionChildren = false;

	function flattenChildren(children) {
	  var content = '';

	  // Flatten children and warn if they aren't strings or numbers;
	  // invalid types are ignored.
	  React.Children.forEach(children, function (child) {
	    if (child == null) {
	      return;
	    }
	    if (typeof child === 'string' || typeof child === 'number') {
	      content += child;
	    } else if (!didWarnInvalidOptionChildren) {
	      didWarnInvalidOptionChildren = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
	    }
	  });

	  return content;
	}

	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, hostParent) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
	    }

	    // Look up whether this option is 'selected'
	    var selectValue = null;
	    if (hostParent != null) {
	      var selectParent = hostParent;

	      if (selectParent._tag === 'optgroup') {
	        selectParent = selectParent._hostParent;
	      }

	      if (selectParent != null && selectParent._tag === 'select') {
	        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
	      }
	    }

	    // If the value is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      var value;
	      if (props.value != null) {
	        value = props.value + '';
	      } else {
	        value = flattenChildren(props.children);
	      }
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === value;
	      }
	    }

	    inst._wrapperState = { selected: selected };
	  },

	  postMountWrapper: function (inst) {
	    // value="" should make a value attribute (#6219)
	    var props = inst._currentElement.props;
	    if (props.value != null) {
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      node.setAttribute('value', props.value);
	    }
	  },

	  getHostProps: function (inst, props) {
	    var hostProps = _assign({ selected: undefined, children: undefined }, props);

	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      hostProps.selected = inst._wrapperState.selected;
	    }

	    var content = flattenChildren(props.children);

	    if (content) {
	      hostProps.children = content;
	    }

	    return hostProps;
	  }

	};

	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var LinkedValueUtils = __webpack_require__(109);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(56);

	var warning = __webpack_require__(11);

	var didWarnValueLink = false;
	var didWarnValueDefaultValue = false;

	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;

	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);

	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);

	  if (props.valueLink !== undefined && !didWarnValueLink) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
	    didWarnValueLink = true;
	  }

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    var isArray = Array.isArray(props[propName]);
	    if (props.multiple && !isArray) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    } else if (!props.multiple && isArray) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    }
	  }
	}

	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  getHostProps: function (inst, props) {
	    return _assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };

	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	      didWarnValueDefaultValue = true;
	    }
	  },

	  getSelectValueContext: function (inst) {
	    // ReactDOMOption looks at this initial value so the initial generated
	    // markup has correct `selected` attributes
	    return inst._wrapperState.initialValue;
	  },

	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // After the initial mount, we control selected-ness manually so don't pass
	    // this value down
	    inst._wrapperState.initialValue = undefined;

	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  if (this._rootNodeID) {
	    this._wrapperState.pendingUpdate = true;
	  }
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var LinkedValueUtils = __webpack_require__(109);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(56);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	var didWarnValueLink = false;
	var didWarnValDefaultVal = false;

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}

	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getHostProps: function (inst, props) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.  We could add a check in setTextContent
	    // to only set the value if/when the value differs from the node value (which would
	    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
	    // The value can be a boolean or object so that's why it's forced to be a string.
	    var hostProps = _assign({}, props, {
	      value: undefined,
	      defaultValue: undefined,
	      children: '' + inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });

	    return hostProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	        didWarnValDefaultVal = true;
	      }
	    }

	    var value = LinkedValueUtils.getValue(props);
	    var initialValue = value;

	    // Only bother fetching default value if we're going to use it
	    if (value == null) {
	      var defaultValue = props.defaultValue;
	      // TODO (yungsters): Remove support for children content in <textarea>.
	      var children = props.children;
	      if (children != null) {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
	        }
	        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
	        if (Array.isArray(children)) {
	          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
	          children = children[0];
	        }

	        defaultValue = '' + children;
	      }
	      if (defaultValue == null) {
	        defaultValue = '';
	      }
	      initialValue = defaultValue;
	    }

	    inst._wrapperState = {
	      initialValue: '' + initialValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;

	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	      if (props.defaultValue == null) {
	        node.defaultValue = newValue;
	      }
	    }
	    if (props.defaultValue != null) {
	      node.defaultValue = props.defaultValue;
	    }
	  },

	  postMountWrapper: function (inst) {
	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var textContent = node.textContent;

	    // Only set node.value if textContent is equal to the expected
	    // initial value. In IE10/IE11 there is a bug where the placeholder attribute
	    // will populate textContent as well.
	    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
	    if (textContent === inst._wrapperState.initialValue) {
	      node.value = textContent;
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var ReactComponentEnvironment = __webpack_require__(115);
	var ReactInstanceMap = __webpack_require__(116);
	var ReactInstrumentation = __webpack_require__(62);

	var ReactCurrentOwner = __webpack_require__(10);
	var ReactReconciler = __webpack_require__(59);
	var ReactChildReconciler = __webpack_require__(117);

	var emptyFunction = __webpack_require__(12);
	var flattenChildren = __webpack_require__(132);
	var invariant = __webpack_require__(8);

	/**
	 * Make an update for markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function makeInsertMarkup(markup, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'INSERT_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}

	/**
	 * Make an update for moving an existing element to another index.
	 *
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function makeMove(child, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'MOVE_EXISTING',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: ReactReconciler.getHostNode(child),
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}

	/**
	 * Make an update for removing an element at an index.
	 *
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function makeRemove(child, node) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'REMOVE_NODE',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: node,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Make an update for setting the markup of a node.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function makeSetMarkup(markup) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'SET_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Make an update for setting the text content.
	 *
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function makeTextContent(textContent) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'TEXT_CONTENT',
	    content: textContent,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Push an update, if any, onto the queue. Creates a new queue if none is
	 * passed and always returns the queue. Mutative.
	 */
	function enqueue(queue, update) {
	  if (update) {
	    queue = queue || [];
	    queue.push(update);
	  }
	  return queue;
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue(inst, updateQueue) {
	  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
	}

	var setChildrenForInstrumentation = emptyFunction;
	if (process.env.NODE_ENV !== 'production') {
	  var getDebugID = function (inst) {
	    if (!inst._debugID) {
	      // Check for ART-like instances. TODO: This is silly/gross.
	      var internal;
	      if (internal = ReactInstanceMap.get(inst)) {
	        inst = internal;
	      }
	    }
	    return inst._debugID;
	  };
	  setChildrenForInstrumentation = function (children) {
	    var debugID = getDebugID(this);
	    // TODO: React Native empty components are also multichild.
	    // This means they still get into this method but don't have _debugID.
	    if (debugID !== 0) {
	      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
	        return children[key]._debugID;
	      }) : []);
	    }
	  };
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        var selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },

	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
	      var nextChildren;
	      var selfDebugID = 0;
	      if (process.env.NODE_ENV !== 'production') {
	        selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          return nextChildren;
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	      return nextChildren;
	    },

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;

	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          var selfDebugID = 0;
	          if (process.env.NODE_ENV !== 'production') {
	            selfDebugID = getDebugID(this);
	          }
	          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }

	      if (process.env.NODE_ENV !== 'production') {
	        setChildrenForInstrumentation.call(this, children);
	      }

	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      // Set new text content.
	      var updates = [makeTextContent(nextContent)];
	      processQueue(this, updates);
	    },

	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      var updates = [makeSetMarkup(nextMarkup)];
	      processQueue(this, updates);
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      // Hook used by React ART
	      this._updateChildren(nextNestedChildrenElements, transaction, context);
	    },

	    /**
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var removedNodes = {};
	      var mountImages = [];
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var updates = null;
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var nextIndex = 0;
	      var lastIndex = 0;
	      // `nextMountIndex` will increment for each newly mounted child.
	      var nextMountIndex = 0;
	      var lastPlacedNode = null;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            // The `removedNodes` loop below will actually remove the child.
	          }
	          // The child must be instantiated before it's mounted.
	          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
	          nextMountIndex++;
	        }
	        nextIndex++;
	        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
	      }
	      // Remove children that are no longer present.
	      for (name in removedNodes) {
	        if (removedNodes.hasOwnProperty(name)) {
	          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
	        }
	      }
	      if (updates) {
	        processQueue(this, updates);
	      }
	      this._renderedChildren = nextChildren;

	      if (process.env.NODE_ENV !== 'production') {
	        setChildrenForInstrumentation.call(this, nextChildren);
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted. It does not actually perform any
	     * backend operations.
	     *
	     * @internal
	     */
	    unmountChildren: function (safely) {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren, safely);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, afterNode, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        return makeMove(child, afterNode, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, afterNode, mountImage) {
	      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child, node) {
	      return makeRemove(child, node);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
	      child._mountIndex = index;
	      return this.createChild(child, afterNode, mountImage);
	    },

	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child, node) {
	      var update = this.removeChild(child, node);
	      child._mountIndex = null;
	      return update;
	    }

	  }

	};

	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkup: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
	      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 116 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();

	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function (key) {
	    return key._reactInternalInstance;
	  },

	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(59);

	var instantiateReactComponent = __webpack_require__(118);
	var KeyEscapeUtils = __webpack_require__(128);
	var shouldUpdateReactComponent = __webpack_require__(124);
	var traverseAllChildren = __webpack_require__(129);
	var warning = __webpack_require__(11);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(26);
	}

	function instantiateChild(childInstances, child, name, selfDebugID) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    if (!ReactComponentTreeHook) {
	      ReactComponentTreeHook = __webpack_require__(26);
	    }
	    if (!keyUnique) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	    }
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, true);
	  }
	}

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID // 0 in production and for roots
	  ) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};

	    if (process.env.NODE_ENV !== 'production') {
	      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
	        return instantiateChild(childInsts, child, name, selfDebugID);
	      }, childInstances);
	    } else {
	      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    }
	    return childInstances;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID // 0 in production and for roots
	  ) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return;
	    }
	    var name;
	    var prevChild;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	          ReactReconciler.unmountComponent(prevChild, false);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, true);
	        nextChildren[name] = nextChildInstance;
	        // Creating mount image now ensures refs are resolved in right order
	        // (see https://github.com/facebook/react/pull/7101 for explanation).
	        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
	        mountImages.push(nextChildMountImage);
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        prevChild = prevChildren[name];
	        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	        ReactReconciler.unmountComponent(prevChild, false);
	      }
	    }
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren, safely) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild, safely);
	      }
	    }
	  }

	};

	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var ReactCompositeComponent = __webpack_require__(119);
	var ReactEmptyComponent = __webpack_require__(125);
	var ReactHostComponent = __webpack_require__(126);

	var getNextDebugID = __webpack_require__(127);
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function (element) {
	  this.construct(element);
	};
	_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
	  _instantiateReactComponent: instantiateReactComponent
	});

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {boolean} shouldHaveDebugID
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, shouldHaveDebugID) {
	  var instance;

	  if (node === null || node === false) {
	    instance = ReactEmptyComponent.create(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    var type = element.type;
	    if (typeof type !== 'function' && typeof type !== 'string') {
	      var info = '';
	      if (process.env.NODE_ENV !== 'production') {
	        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
	        }
	      }
	      info += getDeclarationErrorAddendum(element._owner);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info) : _prodInvariant('130', type == null ? type : typeof type, info) : void 0;
	    }

	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactHostComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);

	      // We renamed this. Allow the old name for compat. :(
	      if (!instance.getHostNode) {
	        instance.getHostNode = instance.getNativeNode;
	      }
	    } else {
	      instance = new ReactCompositeComponentWrapper(element);
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactHostComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
	  }

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if (process.env.NODE_ENV !== 'production') {
	    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var React = __webpack_require__(2);
	var ReactComponentEnvironment = __webpack_require__(115);
	var ReactCurrentOwner = __webpack_require__(10);
	var ReactErrorUtils = __webpack_require__(45);
	var ReactInstanceMap = __webpack_require__(116);
	var ReactInstrumentation = __webpack_require__(62);
	var ReactNodeTypes = __webpack_require__(120);
	var ReactReconciler = __webpack_require__(59);

	if (process.env.NODE_ENV !== 'production') {
	  var checkReactTypeSpec = __webpack_require__(121);
	}

	var emptyObject = __webpack_require__(20);
	var invariant = __webpack_require__(8);
	var shallowEqual = __webpack_require__(123);
	var shouldUpdateReactComponent = __webpack_require__(124);
	var warning = __webpack_require__(11);

	var CompositeTypes = {
	  ImpureClass: 0,
	  PureClass: 1,
	  StatelessFunctional: 2
	};

	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  var element = Component(this.props, this.context, this.updater);
	  warnIfInvalidElement(Component, element);
	  return element;
	};

	function warnIfInvalidElement(Component, element) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
	  }
	}

	function shouldConstruct(Component) {
	  return !!(Component.prototype && Component.prototype.isReactComponent);
	}

	function isPureComponent(Component) {
	  return !!(Component.prototype && Component.prototype.isPureReactComponent);
	}

	// Separated into a function to contain deoptimizations caused by try/finally.
	function measureLifeCyclePerf(fn, debugID, timerType) {
	  if (debugID === 0) {
	    // Top-level wrappers (see ReactMount) and empty components (see
	    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
	    // Both are implementation details that should go away in the future.
	    return fn();
	  }

	  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
	  try {
	    return fn();
	  } finally {
	    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
	  }
	}

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponent = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = 0;
	    this._compositeType = null;
	    this._instance = null;
	    this._hostParent = null;
	    this._hostContainerInfo = null;

	    // See ReactUpdateQueue
	    this._updateBatchNumber = null;
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedNodeType = null;
	    this._renderedComponent = null;
	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;

	    // ComponentWillUnmount shall only be called once
	    this._calledComponentWillUnmount = false;

	    if (process.env.NODE_ENV !== 'production') {
	      this._warnedAboutRefsInRender = false;
	    }
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} hostParent
	   * @param {?object} hostContainerInfo
	   * @param {?object} context
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var _this = this;

	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var publicProps = this._currentElement.props;
	    var publicContext = this._processContext(context);

	    var Component = this._currentElement.type;

	    var updateQueue = transaction.getUpdateQueue();

	    // Initialize the public class
	    var doConstruct = shouldConstruct(Component);
	    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
	    var renderedElement;

	    // Support functional components
	    if (!doConstruct && (inst == null || inst.render == null)) {
	      renderedElement = inst;
	      warnIfInvalidElement(Component, renderedElement);
	      !(inst === null || inst === false || React.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
	      inst = new StatelessComponent(Component);
	      this._compositeType = CompositeTypes.StatelessFunctional;
	    } else {
	      if (isPureComponent(Component)) {
	        this._compositeType = CompositeTypes.PureClass;
	      } else {
	        this._compositeType = CompositeTypes.ImpureClass;
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
	      }

	      var propsMutated = inst.props !== publicProps;
	      var componentName = Component.displayName || Component.name || 'Component';

	      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName) : void 0;
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = updateQueue;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    var markup;
	    if (inst.unstable_handleError) {
	      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } else {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }

	    if (inst.componentDidMount) {
	      if (process.env.NODE_ENV !== 'production') {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(function () {
	            return inst.componentDidMount();
	          }, _this._debugID, 'componentDidMount');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	      }
	    }

	    return markup;
	  },

	  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactCurrentOwner.current = this;
	      try {
	        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	    }
	  },

	  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
	    var Component = this._currentElement.type;

	    if (doConstruct) {
	      if (process.env.NODE_ENV !== 'production') {
	        return measureLifeCyclePerf(function () {
	          return new Component(publicProps, publicContext, updateQueue);
	        }, this._debugID, 'ctor');
	      } else {
	        return new Component(publicProps, publicContext, updateQueue);
	      }
	    }

	    // This can still be an instance in case of factory components
	    // but we'll count this as time spent rendering as the more common case.
	    if (process.env.NODE_ENV !== 'production') {
	      return measureLifeCyclePerf(function () {
	        return Component(publicProps, publicContext, updateQueue);
	      }, this._debugID, 'render');
	    } else {
	      return Component(publicProps, publicContext, updateQueue);
	    }
	  },

	  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var markup;
	    var checkpoint = transaction.checkpoint();
	    try {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } catch (e) {
	      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
	      transaction.rollback(checkpoint);
	      this._instance.unstable_handleError(e);
	      if (this._pendingStateQueue) {
	        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
	      }
	      checkpoint = transaction.checkpoint();

	      this._renderedComponent.unmountComponent(true);
	      transaction.rollback(checkpoint);

	      // Try again - we've informed the component about the error, so they can render an error message this time.
	      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }
	    return markup;
	  },

	  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var inst = this._instance;

	    var debugID = 0;
	    if (process.env.NODE_ENV !== 'production') {
	      debugID = this._debugID;
	    }

	    if (inst.componentWillMount) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillMount();
	        }, debugID, 'componentWillMount');
	      } else {
	        inst.componentWillMount();
	      }
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }

	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }

	    var nodeType = ReactNodeTypes.getType(renderedElement);
	    this._renderedNodeType = nodeType;
	    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	    );
	    this._renderedComponent = child;

	    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);

	    if (process.env.NODE_ENV !== 'production') {
	      if (debugID !== 0) {
	        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	      }
	    }

	    return markup;
	  },

	  getHostNode: function () {
	    return ReactReconciler.getHostNode(this._renderedComponent);
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    if (!this._renderedComponent) {
	      return;
	    }

	    var inst = this._instance;

	    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
	      inst._calledComponentWillUnmount = true;

	      if (safely) {
	        var name = this.getName() + '.componentWillUnmount()';
	        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          measureLifeCyclePerf(function () {
	            return inst.componentWillUnmount();
	          }, this._debugID, 'componentWillUnmount');
	        } else {
	          inst.componentWillUnmount();
	        }
	      }
	    }

	    if (this._renderedComponent) {
	      ReactReconciler.unmountComponent(this._renderedComponent, safely);
	      this._renderedNodeType = null;
	      this._renderedComponent = null;
	      this._instance = null;
	    }

	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = 0;
	    this._topLevelWrapper = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    var maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext;

	    if (inst.getChildContext) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
	        try {
	          childContext = inst.getChildContext();
	        } finally {
	          ReactInstrumentation.debugTool.onEndProcessingChildContext();
	        }
	      } else {
	        childContext = inst.getChildContext();
	      }
	    }

	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkContextTypes(Component.childContextTypes, childContext, 'childContext');
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
	      }
	      return _assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Assert that the context types are valid
	   *
	   * @param {object} typeSpecs Map of context field to a ReactPropType
	   * @param {object} values Runtime values that need to be type-checked
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkContextTypes: function (typeSpecs, values, location) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
	    }
	  },

	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
	    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    } else {
	      this._updateBatchNumber = null;
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;

	    var willReceive = false;
	    var nextContext;

	    // Determine if the context has changed or not
	    if (this._context === nextUnmaskedContext) {
	      nextContext = inst.context;
	    } else {
	      nextContext = this._processContext(nextUnmaskedContext);
	      willReceive = true;
	    }

	    var prevProps = prevParentElement.props;
	    var nextProps = nextParentElement.props;

	    // Not a simple state update but a props update
	    if (prevParentElement !== nextParentElement) {
	      willReceive = true;
	    }

	    // An update here will schedule an update but immediately set
	    // _pendingStateQueue which will ensure that any state updates gets
	    // immediately reconciled instead of waiting for the next batch.
	    if (willReceive && inst.componentWillReceiveProps) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillReceiveProps(nextProps, nextContext);
	        }, this._debugID, 'componentWillReceiveProps');
	      } else {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);
	    var shouldUpdate = true;

	    if (!this._pendingForceUpdate) {
	      if (inst.shouldComponentUpdate) {
	        if (process.env.NODE_ENV !== 'production') {
	          shouldUpdate = measureLifeCyclePerf(function () {
	            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	          }, this._debugID, 'shouldComponentUpdate');
	        } else {
	          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	        }
	      } else {
	        if (this._compositeType === CompositeTypes.PureClass) {
	          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
	        }
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
	    }

	    this._updateBatchNumber = null;
	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = _assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var _this2 = this;

	    var inst = this._instance;

	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }

	    if (inst.componentWillUpdate) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillUpdate(nextProps, nextState, nextContext);
	        }, this._debugID, 'componentWillUpdate');
	      } else {
	        inst.componentWillUpdate(nextProps, nextState, nextContext);
	      }
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (hasComponentDidUpdate) {
	      if (process.env.NODE_ENV !== 'production') {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	      }
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();

	    var debugID = 0;
	    if (process.env.NODE_ENV !== 'production') {
	      debugID = this._debugID;
	    }

	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
	      ReactReconciler.unmountComponent(prevComponentInstance, false);

	      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
	      this._renderedNodeType = nodeType;
	      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	      );
	      this._renderedComponent = child;

	      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);

	      if (process.env.NODE_ENV !== 'production') {
	        if (debugID !== 0) {
	          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	        }
	      }

	      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
	    }
	  },

	  /**
	   * Overridden in shallow rendering.
	   *
	   * @protected
	   */
	  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
	    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedElement;

	    if (process.env.NODE_ENV !== 'production') {
	      renderedElement = measureLifeCyclePerf(function () {
	        return inst.render();
	      }, this._debugID, 'render');
	    } else {
	      renderedElement = inst.render();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (renderedElement === undefined && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedElement = null;
	      }
	    }

	    return renderedElement;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedElement;
	    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
	      ReactCurrentOwner.current = this;
	      try {
	        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;

	    return renderedElement;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (this._compositeType === CompositeTypes.StatelessFunctional) {
	      return null;
	    }
	    return inst;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var React = __webpack_require__(2);

	var invariant = __webpack_require__(8);

	var ReactNodeTypes = {
	  HOST: 0,
	  COMPOSITE: 1,
	  EMPTY: 2,

	  getType: function (node) {
	    if (node === null || node === false) {
	      return ReactNodeTypes.EMPTY;
	    } else if (React.isValidElement(node)) {
	      if (typeof node.type === 'function') {
	        return ReactNodeTypes.COMPOSITE;
	      } else {
	        return ReactNodeTypes.HOST;
	      }
	    }
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
	  }
	};

	module.exports = ReactNodeTypes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var ReactPropTypeLocationNames = __webpack_require__(122);
	var ReactPropTypesSecret = __webpack_require__(110);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(26);
	}

	var loggedTypeFailures = {};

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var componentStackInfo = '';

	        if (process.env.NODE_ENV !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(26);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }

	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}

	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 123 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * 
	 */

	/*eslint-disable no-self-compare */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    // Added the nonzero y check to make Flow happy, but it is redundant
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = shallowEqual;

/***/ },
/* 124 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */

	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }

	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	}

	module.exports = shouldUpdateReactComponent;

/***/ },
/* 125 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyComponentFactory;

	var ReactEmptyComponentInjection = {
	  injectEmptyComponentFactory: function (factory) {
	    emptyComponentFactory = factory;
	  }
	};

	var ReactEmptyComponent = {
	  create: function (instantiate) {
	    return emptyComponentFactory(instantiate);
	  }
	};

	ReactEmptyComponent.injection = ReactEmptyComponentInjection;

	module.exports = ReactEmptyComponent;

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	var genericComponentClass = null;
	var textComponentClass = null;

	var ReactHostComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  }
	};

	/**
	 * Get a host internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
	  return new genericComponentClass(element);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactHostComponent = {
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactHostComponentInjection
	};

	module.exports = ReactHostComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 127 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var nextDebugID = 1;

	function getNextDebugID() {
	  return nextDebugID++;
	}

	module.exports = getNextDebugID;

/***/ },
/* 128 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */

	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });

	  return '$' + escapedString;
	}

	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}

	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};

	module.exports = KeyEscapeUtils;

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var ReactCurrentOwner = __webpack_require__(10);
	var REACT_ELEMENT_TYPE = __webpack_require__(130);

	var getIteratorFn = __webpack_require__(131);
	var invariant = __webpack_require__(8);
	var KeyEscapeUtils = __webpack_require__(128);
	var warning = __webpack_require__(11);

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';

	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var didWarnAboutMaps = false;

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 130 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.

	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	module.exports = REACT_ELEMENT_TYPE;

/***/ },
/* 131 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/* global Symbol */

	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var KeyEscapeUtils = __webpack_require__(128);
	var traverseAllChildren = __webpack_require__(129);
	var warning = __webpack_require__(11);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(26);
	}

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 * @param {number=} selfDebugID Optional debugID of the current internal instance.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
	  // We found a component instance.
	  if (traverseContext && typeof traverseContext === 'object') {
	    var result = traverseContext;
	    var keyUnique = result[name] === undefined;
	    if (process.env.NODE_ENV !== 'production') {
	      if (!ReactComponentTreeHook) {
	        ReactComponentTreeHook = __webpack_require__(26);
	      }
	      if (!keyUnique) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	      }
	    }
	    if (keyUnique && child != null) {
	      result[name] = child;
	    }
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children, selfDebugID) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};

	  if (process.env.NODE_ENV !== 'production') {
	    traverseAllChildren(children, function (traverseContext, child, name) {
	      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
	    }, result);
	  } else {
	    traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  }
	  return result;
	}

	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var PooledClass = __webpack_require__(50);
	var Transaction = __webpack_require__(68);
	var ReactInstrumentation = __webpack_require__(62);
	var ReactServerUpdateQueue = __webpack_require__(134);

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [];

	if (process.env.NODE_ENV !== 'production') {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}

	var noopCallbackQueue = {
	  enqueue: function () {}
	};

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.useCreateElement = false;
	  this.updateQueue = new ReactServerUpdateQueue(this);
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return noopCallbackQueue;
	  },

	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return this.updateQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {},

	  checkpoint: function () {},

	  rollback: function () {}
	};

	_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ReactUpdateQueue = __webpack_require__(135);

	var warning = __webpack_require__(11);

	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}

	/**
	 * This is the update queue used for server rendering.
	 * It delegates to ReactUpdateQueue while server rendering is in progress and
	 * switches to ReactNoopUpdateQueue after the transaction has completed.
	 * @class ReactServerUpdateQueue
	 * @param {Transaction} transaction
	 */

	var ReactServerUpdateQueue = function () {
	  function ReactServerUpdateQueue(transaction) {
	    _classCallCheck(this, ReactServerUpdateQueue);

	    this.transaction = transaction;
	  }

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */


	  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
	    return false;
	  };

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
	    }
	  };

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
	    } else {
	      warnNoop(publicInstance, 'forceUpdate');
	    }
	  };

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} completeState Next state.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
	    } else {
	      warnNoop(publicInstance, 'replaceState');
	    }
	  };

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} partialState Next partial state to be merged with state.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
	    } else {
	      warnNoop(publicInstance, 'setState');
	    }
	  };

	  return ReactServerUpdateQueue;
	}();

	module.exports = ReactServerUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var ReactCurrentOwner = __webpack_require__(10);
	var ReactInstanceMap = __webpack_require__(116);
	var ReactInstrumentation = __webpack_require__(62);
	var ReactUpdates = __webpack_require__(56);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}

	function formatUnexpectedArgument(arg) {
	  var type = typeof arg;
	  if (type !== 'object') {
	    return type;
	  }
	  var displayName = arg.constructor && arg.constructor.name || type;
	  var keys = Object.keys(arg);
	  if (keys.length > 0 && keys.length < 20) {
	    return displayName + ' (keys: ' + keys.join(', ') + ')';
	  }
	  return displayName;
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var ctor = publicInstance.constructor;
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
	    }
	    return null;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @param {string} callerName Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback, callerName) {
	    ReactUpdateQueue.validateCallback(callback, callerName);
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function (internalInstance, callback) {
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onSetState();
	      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
	    }

	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

	    if (!internalInstance) {
	      return;
	    }

	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
	    internalInstance._pendingElement = nextElement;
	    // TODO: introduce _pendingContext instead of setting it directly.
	    internalInstance._context = nextContext;
	    enqueueUpdate(internalInstance);
	  },

	  validateCallback: function (callback, callerName) {
	    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
	  }

	};

	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var emptyFunction = __webpack_require__(12);
	var warning = __webpack_require__(11);

	var validateDOMNesting = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    current: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.current = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	      case '#document':
	        return tag === 'html';
	    }

	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };

	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':

	      case 'pre':
	      case 'listing':

	      case 'table':

	      case 'hr':

	      case 'xmp':

	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }

	    var stack = [];
	    do {
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };

	  var didWarn = {};

	  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;

	    if (childText != null) {
	      process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
	      childTag = '#text';
	    }

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;

	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;

	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);

	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;

	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }

	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;

	      var tagDisplayName = childTag;
	      var whitespaceInfo = '';
	      if (childTag === '#text') {
	        if (/\S/.test(childText)) {
	          tagDisplayName = 'Text nodes';
	        } else {
	          tagDisplayName = 'Whitespace text nodes';
	          whitespaceInfo = ' Make sure you don\'t have any extra whitespace between tags on ' + 'each line of your source code.';
	        }
	      } else {
	        tagDisplayName = '<' + childTag + '>';
	      }

	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
	      }
	    }
	  };

	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}

	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var DOMLazyTree = __webpack_require__(81);
	var ReactDOMComponentTree = __webpack_require__(34);

	var ReactDOMEmptyComponent = function (instantiate) {
	  // ReactCompositeComponent uses this:
	  this._currentElement = null;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;
	  this._hostContainerInfo = null;
	  this._domID = 0;
	};
	_assign(ReactDOMEmptyComponent.prototype, {
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var domID = hostContainerInfo._idCounter++;
	    this._domID = domID;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var nodeValue = ' react-empty: ' + this._domID + ' ';
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var node = ownerDocument.createComment(nodeValue);
	      ReactDOMComponentTree.precacheNode(this, node);
	      return DOMLazyTree(node);
	    } else {
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd insert a comment node, but since this is a situation
	        // where React won't take over (static pages), we can simply return
	        // nothing.
	        return '';
	      }
	      return '<!--' + nodeValue + '-->';
	    }
	  },
	  receiveComponent: function () {},
	  getHostNode: function () {
	    return ReactDOMComponentTree.getNodeFromInstance(this);
	  },
	  unmountComponent: function () {
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	});

	module.exports = ReactDOMEmptyComponent;

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */
	function getLowestCommonAncestor(instA, instB) {
	  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

	  var depthA = 0;
	  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
	    depthA++;
	  }
	  var depthB = 0;
	  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
	    depthB++;
	  }

	  // If A is deeper, crawl up.
	  while (depthA - depthB > 0) {
	    instA = instA._hostParent;
	    depthA--;
	  }

	  // If B is deeper, crawl up.
	  while (depthB - depthA > 0) {
	    instB = instB._hostParent;
	    depthB--;
	  }

	  // Walk in lockstep until we find a match.
	  var depth = depthA;
	  while (depth--) {
	    if (instA === instB) {
	      return instA;
	    }
	    instA = instA._hostParent;
	    instB = instB._hostParent;
	  }
	  return null;
	}

	/**
	 * Return if A is an ancestor of B.
	 */
	function isAncestor(instA, instB) {
	  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
	  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;

	  while (instB) {
	    if (instB === instA) {
	      return true;
	    }
	    instB = instB._hostParent;
	  }
	  return false;
	}

	/**
	 * Return the parent instance of the passed-in instance.
	 */
	function getParentInstance(inst) {
	  !('_hostNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;

	  return inst._hostParent;
	}

	/**
	 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	 */
	function traverseTwoPhase(inst, fn, arg) {
	  var path = [];
	  while (inst) {
	    path.push(inst);
	    inst = inst._hostParent;
	  }
	  var i;
	  for (i = path.length; i-- > 0;) {
	    fn(path[i], 'captured', arg);
	  }
	  for (i = 0; i < path.length; i++) {
	    fn(path[i], 'bubbled', arg);
	  }
	}

	/**
	 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	 * should would receive a `mouseEnter` or `mouseLeave` event.
	 *
	 * Does not invoke the callback on the nearest common ancestor because nothing
	 * "entered" or "left" that element.
	 */
	function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;
	  var pathFrom = [];
	  while (from && from !== common) {
	    pathFrom.push(from);
	    from = from._hostParent;
	  }
	  var pathTo = [];
	  while (to && to !== common) {
	    pathTo.push(to);
	    to = to._hostParent;
	  }
	  var i;
	  for (i = 0; i < pathFrom.length; i++) {
	    fn(pathFrom[i], 'bubbled', argFrom);
	  }
	  for (i = pathTo.length; i-- > 0;) {
	    fn(pathTo[i], 'captured', argTo);
	  }
	}

	module.exports = {
	  isAncestor: isAncestor,
	  getLowestCommonAncestor: getLowestCommonAncestor,
	  getParentInstance: getParentInstance,
	  traverseTwoPhase: traverseTwoPhase,
	  traverseEnterLeave: traverseEnterLeave
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var DOMChildrenOperations = __webpack_require__(80);
	var DOMLazyTree = __webpack_require__(81);
	var ReactDOMComponentTree = __webpack_require__(34);

	var escapeTextContentForBrowser = __webpack_require__(86);
	var invariant = __webpack_require__(8);
	var validateDOMNesting = __webpack_require__(136);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings between comment nodes so that they
	 * can undergo the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (text) {
	  // TODO: This is really a ReactText (ReactNode), not a ReactElement
	  this._currentElement = text;
	  this._stringText = '' + text;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;

	  // Properties
	  this._domID = 0;
	  this._mountIndex = 0;
	  this._closingComment = null;
	  this._commentNodes = null;
	};

	_assign(ReactDOMTextComponent.prototype, {

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo != null) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(null, this._stringText, this, parentInfo);
	      }
	    }

	    var domID = hostContainerInfo._idCounter++;
	    var openingValue = ' react-text: ' + domID + ' ';
	    var closingValue = ' /react-text ';
	    this._domID = domID;
	    this._hostParent = hostParent;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var openingComment = ownerDocument.createComment(openingValue);
	      var closingComment = ownerDocument.createComment(closingValue);
	      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
	      if (this._stringText) {
	        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
	      }
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
	      ReactDOMComponentTree.precacheNode(this, openingComment);
	      this._closingComment = closingComment;
	      return lazyTree;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);

	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this between comment nodes for the reasons stated
	        // above, but since this is a situation where React won't take over
	        // (static pages), we can simply return the text as it is.
	        return escapedText;
	      }

	      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
	    }
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var commentNodes = this.getHostNode();
	        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
	      }
	    }
	  },

	  getHostNode: function () {
	    var hostNode = this._commentNodes;
	    if (hostNode) {
	      return hostNode;
	    }
	    if (!this._closingComment) {
	      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
	      var node = openingComment.nextSibling;
	      while (true) {
	        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
	        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
	          this._closingComment = node;
	          break;
	        }
	        node = node.nextSibling;
	      }
	    }
	    hostNode = [this._hostNode, this._closingComment];
	    this._commentNodes = hostNode;
	    return hostNode;
	  },

	  unmountComponent: function () {
	    this._closingComment = null;
	    this._commentNodes = null;
	    ReactDOMComponentTree.uncacheNode(this);
	  }

	});

	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var ReactUpdates = __webpack_require__(56);
	var Transaction = __webpack_require__(68);

	var emptyFunction = __webpack_require__(12);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      return callback(a, b, c, d, e);
	    } else {
	      return transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var EventListener = __webpack_require__(142);
	var ExecutionEnvironment = __webpack_require__(48);
	var PooledClass = __webpack_require__(50);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(56);

	var getEventTarget = __webpack_require__(69);
	var getUnboundedScrollPosition = __webpack_require__(143);

	/**
	 * Find the deepest React component completely containing the root of the
	 * passed-in instance (for use when entire React trees are nested within each
	 * other). If React trees are not nested, returns null.
	 */
	function findParent(inst) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  while (inst._hostParent) {
	    inst = inst._hostParent;
	  }
	  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
	  var container = rootNode.parentNode;
	  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	_assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

	function handleTopLevelImpl(bookKeeping) {
	  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
	  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = targetInst;
	  do {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = ancestor && findParent(ancestor);
	  } while (ancestor);

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    targetInst = bookKeeping.ancestors[i];
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },

	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @typechecks
	 */

	var emptyFunction = __webpack_require__(12);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function listen(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function remove() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function capture(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },

	  registerDefault: function registerDefault() {}
	};

	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 143 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */

	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(36);
	var EventPluginHub = __webpack_require__(42);
	var EventPluginUtils = __webpack_require__(44);
	var ReactComponentEnvironment = __webpack_require__(115);
	var ReactEmptyComponent = __webpack_require__(125);
	var ReactBrowserEventEmitter = __webpack_require__(105);
	var ReactHostComponent = __webpack_require__(126);
	var ReactUpdates = __webpack_require__(56);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventPluginUtils: EventPluginUtils.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  HostComponent: ReactHostComponent.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var CallbackQueue = __webpack_require__(57);
	var PooledClass = __webpack_require__(50);
	var ReactBrowserEventEmitter = __webpack_require__(105);
	var ReactInputSelection = __webpack_require__(146);
	var ReactInstrumentation = __webpack_require__(62);
	var Transaction = __webpack_require__(68);
	var ReactUpdateQueue = __webpack_require__(135);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

	if (process.env.NODE_ENV !== 'production') {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(useCreateElement) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactDOMTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = useCreateElement;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return ReactUpdateQueue;
	  },

	  /**
	   * Save current transaction state -- if the return value from this method is
	   * passed to `rollback`, the transaction will be reset to that state.
	   */
	  checkpoint: function () {
	    // reactMountReady is the our only stateful wrapper
	    return this.reactMountReady.checkpoint();
	  },

	  rollback: function (checkpoint) {
	    this.reactMountReady.rollback(checkpoint);
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(147);

	var containsNode = __webpack_require__(149);
	var focusNode = __webpack_require__(94);
	var getActiveElement = __webpack_require__(152);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },

	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || { start: 0, end: 0 };
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (end === undefined) {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(48);

	var getNodeForCharacterOffset = __webpack_require__(148);
	var getTextContentAccessor = __webpack_require__(51);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (offsets.end === undefined) {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;

/***/ },
/* 148 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */

	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	var isTextNode = __webpack_require__(150);

	/*eslint-disable no-bitwise */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	module.exports = containsNode;

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var isNode = __webpack_require__(151);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;

/***/ },
/* 151 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	module.exports = isNode;

/***/ },
/* 152 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/* eslint-disable fb-www/typeof-undefined */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 */
	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;

/***/ },
/* 153 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};

	// We use attributes for everything SVG so let's avoid some duplication and run
	// code instead.
	// The following are all specified in the HTML config already so we exclude here.
	// - class (as className)
	// - color
	// - height
	// - id
	// - lang
	// - max
	// - media
	// - method
	// - min
	// - name
	// - style
	// - target
	// - type
	// - width
	var ATTRS = {
	  accentHeight: 'accent-height',
	  accumulate: 0,
	  additive: 0,
	  alignmentBaseline: 'alignment-baseline',
	  allowReorder: 'allowReorder',
	  alphabetic: 0,
	  amplitude: 0,
	  arabicForm: 'arabic-form',
	  ascent: 0,
	  attributeName: 'attributeName',
	  attributeType: 'attributeType',
	  autoReverse: 'autoReverse',
	  azimuth: 0,
	  baseFrequency: 'baseFrequency',
	  baseProfile: 'baseProfile',
	  baselineShift: 'baseline-shift',
	  bbox: 0,
	  begin: 0,
	  bias: 0,
	  by: 0,
	  calcMode: 'calcMode',
	  capHeight: 'cap-height',
	  clip: 0,
	  clipPath: 'clip-path',
	  clipRule: 'clip-rule',
	  clipPathUnits: 'clipPathUnits',
	  colorInterpolation: 'color-interpolation',
	  colorInterpolationFilters: 'color-interpolation-filters',
	  colorProfile: 'color-profile',
	  colorRendering: 'color-rendering',
	  contentScriptType: 'contentScriptType',
	  contentStyleType: 'contentStyleType',
	  cursor: 0,
	  cx: 0,
	  cy: 0,
	  d: 0,
	  decelerate: 0,
	  descent: 0,
	  diffuseConstant: 'diffuseConstant',
	  direction: 0,
	  display: 0,
	  divisor: 0,
	  dominantBaseline: 'dominant-baseline',
	  dur: 0,
	  dx: 0,
	  dy: 0,
	  edgeMode: 'edgeMode',
	  elevation: 0,
	  enableBackground: 'enable-background',
	  end: 0,
	  exponent: 0,
	  externalResourcesRequired: 'externalResourcesRequired',
	  fill: 0,
	  fillOpacity: 'fill-opacity',
	  fillRule: 'fill-rule',
	  filter: 0,
	  filterRes: 'filterRes',
	  filterUnits: 'filterUnits',
	  floodColor: 'flood-color',
	  floodOpacity: 'flood-opacity',
	  focusable: 0,
	  fontFamily: 'font-family',
	  fontSize: 'font-size',
	  fontSizeAdjust: 'font-size-adjust',
	  fontStretch: 'font-stretch',
	  fontStyle: 'font-style',
	  fontVariant: 'font-variant',
	  fontWeight: 'font-weight',
	  format: 0,
	  from: 0,
	  fx: 0,
	  fy: 0,
	  g1: 0,
	  g2: 0,
	  glyphName: 'glyph-name',
	  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
	  glyphOrientationVertical: 'glyph-orientation-vertical',
	  glyphRef: 'glyphRef',
	  gradientTransform: 'gradientTransform',
	  gradientUnits: 'gradientUnits',
	  hanging: 0,
	  horizAdvX: 'horiz-adv-x',
	  horizOriginX: 'horiz-origin-x',
	  ideographic: 0,
	  imageRendering: 'image-rendering',
	  'in': 0,
	  in2: 0,
	  intercept: 0,
	  k: 0,
	  k1: 0,
	  k2: 0,
	  k3: 0,
	  k4: 0,
	  kernelMatrix: 'kernelMatrix',
	  kernelUnitLength: 'kernelUnitLength',
	  kerning: 0,
	  keyPoints: 'keyPoints',
	  keySplines: 'keySplines',
	  keyTimes: 'keyTimes',
	  lengthAdjust: 'lengthAdjust',
	  letterSpacing: 'letter-spacing',
	  lightingColor: 'lighting-color',
	  limitingConeAngle: 'limitingConeAngle',
	  local: 0,
	  markerEnd: 'marker-end',
	  markerMid: 'marker-mid',
	  markerStart: 'marker-start',
	  markerHeight: 'markerHeight',
	  markerUnits: 'markerUnits',
	  markerWidth: 'markerWidth',
	  mask: 0,
	  maskContentUnits: 'maskContentUnits',
	  maskUnits: 'maskUnits',
	  mathematical: 0,
	  mode: 0,
	  numOctaves: 'numOctaves',
	  offset: 0,
	  opacity: 0,
	  operator: 0,
	  order: 0,
	  orient: 0,
	  orientation: 0,
	  origin: 0,
	  overflow: 0,
	  overlinePosition: 'overline-position',
	  overlineThickness: 'overline-thickness',
	  paintOrder: 'paint-order',
	  panose1: 'panose-1',
	  pathLength: 'pathLength',
	  patternContentUnits: 'patternContentUnits',
	  patternTransform: 'patternTransform',
	  patternUnits: 'patternUnits',
	  pointerEvents: 'pointer-events',
	  points: 0,
	  pointsAtX: 'pointsAtX',
	  pointsAtY: 'pointsAtY',
	  pointsAtZ: 'pointsAtZ',
	  preserveAlpha: 'preserveAlpha',
	  preserveAspectRatio: 'preserveAspectRatio',
	  primitiveUnits: 'primitiveUnits',
	  r: 0,
	  radius: 0,
	  refX: 'refX',
	  refY: 'refY',
	  renderingIntent: 'rendering-intent',
	  repeatCount: 'repeatCount',
	  repeatDur: 'repeatDur',
	  requiredExtensions: 'requiredExtensions',
	  requiredFeatures: 'requiredFeatures',
	  restart: 0,
	  result: 0,
	  rotate: 0,
	  rx: 0,
	  ry: 0,
	  scale: 0,
	  seed: 0,
	  shapeRendering: 'shape-rendering',
	  slope: 0,
	  spacing: 0,
	  specularConstant: 'specularConstant',
	  specularExponent: 'specularExponent',
	  speed: 0,
	  spreadMethod: 'spreadMethod',
	  startOffset: 'startOffset',
	  stdDeviation: 'stdDeviation',
	  stemh: 0,
	  stemv: 0,
	  stitchTiles: 'stitchTiles',
	  stopColor: 'stop-color',
	  stopOpacity: 'stop-opacity',
	  strikethroughPosition: 'strikethrough-position',
	  strikethroughThickness: 'strikethrough-thickness',
	  string: 0,
	  stroke: 0,
	  strokeDasharray: 'stroke-dasharray',
	  strokeDashoffset: 'stroke-dashoffset',
	  strokeLinecap: 'stroke-linecap',
	  strokeLinejoin: 'stroke-linejoin',
	  strokeMiterlimit: 'stroke-miterlimit',
	  strokeOpacity: 'stroke-opacity',
	  strokeWidth: 'stroke-width',
	  surfaceScale: 'surfaceScale',
	  systemLanguage: 'systemLanguage',
	  tableValues: 'tableValues',
	  targetX: 'targetX',
	  targetY: 'targetY',
	  textAnchor: 'text-anchor',
	  textDecoration: 'text-decoration',
	  textRendering: 'text-rendering',
	  textLength: 'textLength',
	  to: 0,
	  transform: 0,
	  u1: 0,
	  u2: 0,
	  underlinePosition: 'underline-position',
	  underlineThickness: 'underline-thickness',
	  unicode: 0,
	  unicodeBidi: 'unicode-bidi',
	  unicodeRange: 'unicode-range',
	  unitsPerEm: 'units-per-em',
	  vAlphabetic: 'v-alphabetic',
	  vHanging: 'v-hanging',
	  vIdeographic: 'v-ideographic',
	  vMathematical: 'v-mathematical',
	  values: 0,
	  vectorEffect: 'vector-effect',
	  version: 0,
	  vertAdvY: 'vert-adv-y',
	  vertOriginX: 'vert-origin-x',
	  vertOriginY: 'vert-origin-y',
	  viewBox: 'viewBox',
	  viewTarget: 'viewTarget',
	  visibility: 0,
	  widths: 0,
	  wordSpacing: 'word-spacing',
	  writingMode: 'writing-mode',
	  x: 0,
	  xHeight: 'x-height',
	  x1: 0,
	  x2: 0,
	  xChannelSelector: 'xChannelSelector',
	  xlinkActuate: 'xlink:actuate',
	  xlinkArcrole: 'xlink:arcrole',
	  xlinkHref: 'xlink:href',
	  xlinkRole: 'xlink:role',
	  xlinkShow: 'xlink:show',
	  xlinkTitle: 'xlink:title',
	  xlinkType: 'xlink:type',
	  xmlBase: 'xml:base',
	  xmlns: 0,
	  xmlnsXlink: 'xmlns:xlink',
	  xmlLang: 'xml:lang',
	  xmlSpace: 'xml:space',
	  y: 0,
	  y1: 0,
	  y2: 0,
	  yChannelSelector: 'yChannelSelector',
	  z: 0,
	  zoomAndPan: 'zoomAndPan'
	};

	var SVGDOMPropertyConfig = {
	  Properties: {},
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {}
	};

	Object.keys(ATTRS).forEach(function (key) {
	  SVGDOMPropertyConfig.Properties[key] = 0;
	  if (ATTRS[key]) {
	    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
	  }
	});

	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPropagators = __webpack_require__(41);
	var ExecutionEnvironment = __webpack_require__(48);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactInputSelection = __webpack_require__(146);
	var SyntheticEvent = __webpack_require__(53);

	var getActiveElement = __webpack_require__(152);
	var isTextInputElement = __webpack_require__(71);
	var shallowEqual = __webpack_require__(123);

	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: 'onSelect',
	      captured: 'onSelectCapture'
	    },
	    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
	  }
	};

	var activeElement = null;
	var activeElementInst = null;
	var lastSelection = null;
	var mouseDown = false;

	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events. See #3639.
	var hasListener = false;

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }

	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case 'topFocus':
	        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	          activeElement = targetNode;
	          activeElementInst = targetInst;
	          lastSelection = null;
	        }
	        break;
	      case 'topBlur':
	        activeElement = null;
	        activeElementInst = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case 'topMouseDown':
	        mouseDown = true;
	        break;
	      case 'topContextMenu':
	      case 'topMouseUp':
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case 'topSelectionChange':
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case 'topKeyDown':
	      case 'topKeyUp':
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  },

	  didPutListener: function (inst, registrationName, listener) {
	    if (registrationName === 'onSelect') {
	      hasListener = true;
	    }
	  }
	};

	module.exports = SelectEventPlugin;

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var EventListener = __webpack_require__(142);
	var EventPropagators = __webpack_require__(41);
	var ReactDOMComponentTree = __webpack_require__(34);
	var SyntheticAnimationEvent = __webpack_require__(156);
	var SyntheticClipboardEvent = __webpack_require__(157);
	var SyntheticEvent = __webpack_require__(53);
	var SyntheticFocusEvent = __webpack_require__(158);
	var SyntheticKeyboardEvent = __webpack_require__(159);
	var SyntheticMouseEvent = __webpack_require__(74);
	var SyntheticDragEvent = __webpack_require__(162);
	var SyntheticTouchEvent = __webpack_require__(163);
	var SyntheticTransitionEvent = __webpack_require__(164);
	var SyntheticUIEvent = __webpack_require__(75);
	var SyntheticWheelEvent = __webpack_require__(165);

	var emptyFunction = __webpack_require__(12);
	var getEventCharCode = __webpack_require__(160);
	var invariant = __webpack_require__(8);

	/**
	 * Turns
	 * ['abort', ...]
	 * into
	 * eventTypes = {
	 *   'abort': {
	 *     phasedRegistrationNames: {
	 *       bubbled: 'onAbort',
	 *       captured: 'onAbortCapture',
	 *     },
	 *     dependencies: ['topAbort'],
	 *   },
	 *   ...
	 * };
	 * topLevelEventsToDispatchConfig = {
	 *   'topAbort': { sameConfig }
	 * };
	 */
	var eventTypes = {};
	var topLevelEventsToDispatchConfig = {};
	['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
	  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
	  var onEvent = 'on' + capitalizedEvent;
	  var topEvent = 'top' + capitalizedEvent;

	  var type = {
	    phasedRegistrationNames: {
	      bubbled: onEvent,
	      captured: onEvent + 'Capture'
	    },
	    dependencies: [topEvent]
	  };
	  eventTypes[event] = type;
	  topLevelEventsToDispatchConfig[topEvent] = type;
	});

	var onClickListeners = {};

	function getDictionaryKey(inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	}

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case 'topAbort':
	      case 'topCanPlay':
	      case 'topCanPlayThrough':
	      case 'topDurationChange':
	      case 'topEmptied':
	      case 'topEncrypted':
	      case 'topEnded':
	      case 'topError':
	      case 'topInput':
	      case 'topInvalid':
	      case 'topLoad':
	      case 'topLoadedData':
	      case 'topLoadedMetadata':
	      case 'topLoadStart':
	      case 'topPause':
	      case 'topPlay':
	      case 'topPlaying':
	      case 'topProgress':
	      case 'topRateChange':
	      case 'topReset':
	      case 'topSeeked':
	      case 'topSeeking':
	      case 'topStalled':
	      case 'topSubmit':
	      case 'topSuspend':
	      case 'topTimeUpdate':
	      case 'topVolumeChange':
	      case 'topWaiting':
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case 'topKeyPress':
	        // Firefox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case 'topKeyDown':
	      case 'topKeyUp':
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case 'topBlur':
	      case 'topFocus':
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case 'topClick':
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case 'topDoubleClick':
	      case 'topMouseDown':
	      case 'topMouseMove':
	      case 'topMouseUp':
	      // TODO: Disabled elements should not respond to mouse events
	      /* falls through */
	      case 'topMouseOut':
	      case 'topMouseOver':
	      case 'topContextMenu':
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case 'topDrag':
	      case 'topDragEnd':
	      case 'topDragEnter':
	      case 'topDragExit':
	      case 'topDragLeave':
	      case 'topDragOver':
	      case 'topDragStart':
	      case 'topDrop':
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case 'topTouchCancel':
	      case 'topTouchEnd':
	      case 'topTouchMove':
	      case 'topTouchStart':
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case 'topAnimationEnd':
	      case 'topAnimationIteration':
	      case 'topAnimationStart':
	        EventConstructor = SyntheticAnimationEvent;
	        break;
	      case 'topTransitionEnd':
	        EventConstructor = SyntheticTransitionEvent;
	        break;
	      case 'topScroll':
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case 'topWheel':
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case 'topCopy':
	      case 'topCut':
	      case 'topPaste':
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
	    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },

	  didPutListener: function (inst, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      if (!onClickListeners[key]) {
	        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },

	  willDeleteListener: function (inst, registrationName) {
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      onClickListeners[key].remove();
	      delete onClickListeners[key];
	    }
	  }

	};

	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(53);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */
	var AnimationEventInterface = {
	  animationName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

	module.exports = SyntheticAnimationEvent;

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(53);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(75);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(75);

	var getEventCharCode = __webpack_require__(160);
	var getEventKey = __webpack_require__(161);
	var getEventModifierState = __webpack_require__(77);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 160 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */

	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(160);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(74);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(75);

	var getEventModifierState = __webpack_require__(77);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(53);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */
	var TransitionEventInterface = {
	  propertyName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

	module.exports = SyntheticTransitionEvent;

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(74);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var DOMLazyTree = __webpack_require__(81);
	var DOMProperty = __webpack_require__(36);
	var React = __webpack_require__(2);
	var ReactBrowserEventEmitter = __webpack_require__(105);
	var ReactCurrentOwner = __webpack_require__(10);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDOMContainerInfo = __webpack_require__(167);
	var ReactDOMFeatureFlags = __webpack_require__(168);
	var ReactFeatureFlags = __webpack_require__(58);
	var ReactInstanceMap = __webpack_require__(116);
	var ReactInstrumentation = __webpack_require__(62);
	var ReactMarkupChecksum = __webpack_require__(169);
	var ReactReconciler = __webpack_require__(59);
	var ReactUpdateQueue = __webpack_require__(135);
	var ReactUpdates = __webpack_require__(56);

	var emptyObject = __webpack_require__(20);
	var instantiateReactComponent = __webpack_require__(118);
	var invariant = __webpack_require__(8);
	var setInnerHTML = __webpack_require__(83);
	var shouldUpdateReactComponent = __webpack_require__(124);
	var warning = __webpack_require__(11);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	var instancesByReactRootID = {};

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
	  var markerName;
	  if (ReactFeatureFlags.logTopLevelRenders) {
	    var wrappedElement = wrapperInstance._currentElement.props.child;
	    var type = wrappedElement.type;
	    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
	    console.time(markerName);
	  }

	  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
	  );

	  if (markerName) {
	    console.timeEnd(markerName);
	  }

	  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
	  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */
	  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container, safely) {
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onBeginFlush();
	  }
	  ReactReconciler.unmountComponent(instance, safely);
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onEndFlush();
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }

	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}

	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  if (rootEl) {
	    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
	    return !!(inst && inst._hostParent);
	  }
	}

	/**
	 * True if the supplied DOM node is a React DOM element and
	 * it has been rendered by another copy of React.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM has been rendered by another copy of React
	 * @internal
	 */
	function nodeIsRenderedByOtherInstance(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
	}

	/**
	 * True if the supplied DOM node is a valid node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid DOM node.
	 * @internal
	 */
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
	}

	/**
	 * True if the supplied DOM node is a valid React node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid React DOM node.
	 * @internal
	 */
	function isReactNode(node) {
	  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
	}

	function getHostRootInstanceInContainer(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
	  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
	}

	function getTopLevelWrapperInContainer(container) {
	  var root = getHostRootInstanceInContainer(container);
	  return root ? root._hostContainerInfo._topLevelWrapper : null;
	}

	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var topLevelRootCounter = 1;
	var TopLevelWrapper = function () {
	  this.rootID = topLevelRootCounter++;
	};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  return this.props.child;
	};
	TopLevelWrapper.isReactTopLevelWrapper = true;

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {

	  TopLevelWrapper: TopLevelWrapper,

	  /**
	   * Used by devtools. The keys are not important.
	   */
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    return prevComponent;
	  },

	  /**
	   * Render a new component into the DOM. Hooked by hooks!
	   *
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
	    var componentInstance = instantiateReactComponent(nextElement, false);

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);

	    var wrapperID = componentInstance._instance.rootID;
	    instancesByReactRootID[wrapperID] = componentInstance;

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },

	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
	    !React.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;

	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;

	    var nextWrappedElement = React.createElement(TopLevelWrapper, { child: nextElement });

	    var nextContext;
	    if (parentComponent) {
	      var parentInst = ReactInstanceMap.get(parentComponent);
	      nextContext = parentInst._processChildContext(parentInst._context);
	    } else {
	      nextContext = emptyObject;
	    }

	    var prevComponent = getTopLevelWrapperInContainer(container);

	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props.child;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by another copy of React.') : void 0;
	    }

	    var prevComponent = getTopLevelWrapperInContainer(container);
	    if (!prevComponent) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);

	      // Check if the container itself is a React root node.
	      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
	      }

	      return false;
	    }
	    delete instancesByReactRootID[prevComponent._instance.rootID];
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
	    return true;
	  },

	  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        ReactDOMComponentTree.precacheNode(instance, rootElement);
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }

	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;

	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
	        }
	      }
	    }

	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;

	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      DOMLazyTree.insertTreeBefore(container, markup, null);
	    } else {
	      setInnerHTML(container, markup);
	      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
	      if (hostNode._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: hostNode._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  }
	};

	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var validateDOMNesting = __webpack_require__(136);

	var DOC_NODE_TYPE = 9;

	function ReactDOMContainerInfo(topLevelWrapper, node) {
	  var info = {
	    _topLevelWrapper: topLevelWrapper,
	    _idCounter: 1,
	    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
	    _node: node,
	    _tag: node ? node.nodeName.toLowerCase() : null,
	    _namespaceURI: node ? node.namespaceURI : null
	  };
	  if (process.env.NODE_ENV !== 'production') {
	    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
	  }
	  return info;
	}

	module.exports = ReactDOMContainerInfo;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 168 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMFeatureFlags = {
	  useCreateElement: true,
	  useFiber: false
	};

	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var adler32 = __webpack_require__(170);

	var TAG_END = /\/?>/;
	var COMMENT_START = /^<\!\-\-/;

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);

	    // Add checksum (handle both parent tags, comments and self-closing tags)
	    if (COMMENT_START.test(markup)) {
	      return markup;
	    } else {
	      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	    }
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;

/***/ },
/* 170 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var MOD = 65521;

	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    var n = Math.min(i + 4096, m);
	    for (; i < n; i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}

	module.exports = adler32;

/***/ },
/* 171 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	module.exports = '15.4.2';

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var ReactCurrentOwner = __webpack_require__(10);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactInstanceMap = __webpack_require__(116);

	var getHostComponentFromComposite = __webpack_require__(173);
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }

	  var inst = ReactInstanceMap.get(componentOrElement);
	  if (inst) {
	    inst = getHostComponentFromComposite(inst);
	    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
	  }

	  if (typeof componentOrElement.render === 'function') {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
	  }
	}

	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactNodeTypes = __webpack_require__(120);

	function getHostComponentFromComposite(inst) {
	  var type;

	  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
	    inst = inst._renderedComponent;
	  }

	  if (type === ReactNodeTypes.HOST) {
	    return inst._renderedComponent;
	  } else if (type === ReactNodeTypes.EMPTY) {
	    return null;
	  }
	}

	module.exports = getHostComponentFromComposite;

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactMount = __webpack_require__(166);

	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(36);
	var EventPluginRegistry = __webpack_require__(43);
	var ReactComponentTreeHook = __webpack_require__(26);

	var warning = __webpack_require__(11);

	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true,

	    autoFocus: true,
	    defaultValue: true,
	    valueLink: true,
	    defaultChecked: true,
	    checkedLink: true,
	    innerHTML: true,
	    suppressContentEditableWarning: true,
	    onFocusIn: true,
	    onFocusOut: true
	  };
	  var warnedProperties = {};

	  var validateProperty = function (tagName, name, debugID) {
	    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
	      return true;
	    }
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return true;
	    }
	    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
	      return true;
	    }
	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;

	    if (standardName != null) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else if (registrationName != null) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else {
	      // We were unable to guess which prop the user intended.
	      // It is likely that the user was just blindly spreading/forwarding props
	      // Components should be careful to only render valid props/attributes.
	      // Warning will be invoked in warnUnknownProperties to allow grouping.
	      return false;
	    }
	  };
	}

	var warnUnknownProperties = function (debugID, element) {
	  var unknownProps = [];
	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      unknownProps.push(key);
	    }
	  }

	  var unknownPropString = unknownProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');

	  if (unknownProps.length === 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  } else if (unknownProps.length > 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	};

	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }
	  warnUnknownProperties(debugID, element);
	}

	var ReactDOMUnknownPropertyHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  }
	};

	module.exports = ReactDOMUnknownPropertyHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactComponentTreeHook = __webpack_require__(26);

	var warning = __webpack_require__(11);

	var didWarnValueNull = false;

	function handleElement(debugID, element) {
	  if (element == null) {
	    return;
	  }
	  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
	    return;
	  }
	  if (element.props != null && element.props.value === null && !didWarnValueNull) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;

	    didWarnValueNull = true;
	  }
	}

	var ReactDOMNullInputValuePropHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  }
	};

	module.exports = ReactDOMNullInputValuePropHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(36);
	var ReactComponentTreeHook = __webpack_require__(26);

	var warning = __webpack_require__(11);

	var warnedProperties = {};
	var rARIA = new RegExp('^(aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');

	function validateProperty(tagName, name, debugID) {
	  if (warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	    return true;
	  }

	  if (rARIA.test(name)) {
	    var lowerCasedName = name.toLowerCase();
	    var standardName = DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    // If this is an aria-* attribute, but is not listed in the known DOM
	    // DOM properties, then it is an invalid aria-* attribute.
	    if (standardName == null) {
	      warnedProperties[name] = true;
	      return false;
	    }
	    // aria-* attributes should be lowercase; suggest the lowercase version.
	    if (name !== standardName) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown ARIA attribute %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      warnedProperties[name] = true;
	      return true;
	    }
	  }

	  return true;
	}

	function warnInvalidARIAProps(debugID, element) {
	  var invalidProps = [];

	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      invalidProps.push(key);
	    }
	  }

	  var unknownPropString = invalidProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');

	  if (invalidProps.length === 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  } else if (invalidProps.length > 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	}

	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }

	  warnInvalidARIAProps(debugID, element);
	}

	var ReactDOMInvalidARIAHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    if (process.env.NODE_ENV !== 'production') {
	      handleElement(debugID, element);
	    }
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    if (process.env.NODE_ENV !== 'production') {
	      handleElement(debugID, element);
	    }
	  }
	};

	module.exports = ReactDOMInvalidARIAHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(32);

	var _jquery = __webpack_require__(179);

	var _jquery2 = _interopRequireDefault(_jquery);

	var _banner = __webpack_require__(180);

	var _banner2 = _interopRequireDefault(_banner);

	var _nav = __webpack_require__(244);

	var _nav2 = _interopRequireDefault(_nav);

	var _breadcrumbs = __webpack_require__(245);

	var _breadcrumbs2 = _interopRequireDefault(_breadcrumbs);

	var _content = __webpack_require__(246);

	var _content2 = _interopRequireDefault(_content);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var App = function (_Component) {
	  _inherits(App, _Component);

	  function App(props) {
	    _classCallCheck(this, App);

	    var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));

	    _this.getVideoData = _this.getVideoData.bind(_this);
	    _this.toggle = _this.toggle.bind(_this);
	    _this.state = {};
	    return _this;
	  }

	  _createClass(App, [{
	    key: 'getVideoData',
	    value: function getVideoData() {
	      var _this2 = this;

	      // AXIOS NOT WORKING, USE JQUERY FOR NOW
	      var URL = 'https://www.veritasprep.com/api/desktop-app/get_playlist.php';
	      var body = { type: 'desktop', account: 'GRE' };

	      _jquery2.default.post(URL, body).then(function (res) {
	        _this2.setState({ videoData: JSON.parse(res) });
	      }).catch(function (err) {
	        return console.log(err);
	      });
	    }
	  }, {
	    key: 'toggle',
	    value: function toggle(e) {
	      var that = e.target.style;
	      console.log(that);
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.getVideoData();
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        { style: app },
	        _react2.default.createElement(_banner2.default, null),
	        _react2.default.createElement(_nav2.default, null),
	        _react2.default.createElement(_breadcrumbs2.default, null),
	        _react2.default.createElement(_content2.default, { toggle: this.toggle, videoData: this.state.videoData })
	      );
	    }
	  }]);

	  return App;
	}(_react.Component);

	exports.default = App;


	var app = {
	  display: 'flex',
	  flexDirection: 'column',
	  height: '100vh'
	};

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v3.1.1
	 * https://jquery.com/
	 *
	 * Includes Sizzle.js
	 * https://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * https://jquery.org/license
	 *
	 * Date: 2016-09-22T22:30Z
	 */
	( function( global, factory ) {

		"use strict";

		if ( typeof module === "object" && typeof module.exports === "object" ) {

			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}

	// Pass this if window is not defined yet
	} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

	// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
	// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
	// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
	// enough that all such attempts are guarded in a try block.
	"use strict";

	var arr = [];

	var document = window.document;

	var getProto = Object.getPrototypeOf;

	var slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var fnToString = hasOwn.toString;

	var ObjectFunctionString = fnToString.call( Object );

	var support = {};



		function DOMEval( code, doc ) {
			doc = doc || document;

			var script = doc.createElement( "script" );

			script.text = code;
			doc.head.appendChild( script ).parentNode.removeChild( script );
		}
	/* global Symbol */
	// Defining this global in .eslintrc.json would create a danger of using the global
	// unguarded in another place, it seems safer to define global only for this module



	var
		version = "3.1.1",

		// Define a local copy of jQuery
		jQuery = function( selector, context ) {

			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},

		// Support: Android <=4.0 only
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([a-z])/g,

		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function() {
			return slice.call( this );
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {

			// Return all the elements in a clean array
			if ( num == null ) {
				return slice.call( this );
			}

			// Return just the one element from the set
			return num < 0 ? this[ num + this.length ] : this[ num ];
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},

		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},

		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},

		first: function() {
			return this.eq( 0 );
		},

		last: function() {
			return this.eq( -1 );
		},

		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},

		end: function() {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;

			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}

		for ( ; i < length; i++ ) {

			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {

				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];

					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = jQuery.isArray( copy ) ) ) ) {

						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray( src ) ? src : [];

						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}

						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );

					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend( {

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function( msg ) {
			throw new Error( msg );
		},

		noop: function() {},

		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},

		isArray: Array.isArray,

		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},

		isNumeric: function( obj ) {

			// As of jQuery 3.0, isNumeric is limited to
			// strings and numbers (primitives or objects)
			// that can be coerced to finite numbers (gh-2662)
			var type = jQuery.type( obj );
			return ( type === "number" || type === "string" ) &&

				// parseFloat NaNs numeric-cast false positives ("")
				// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
				// subtraction forces infinities to NaN
				!isNaN( obj - parseFloat( obj ) );
		},

		isPlainObject: function( obj ) {
			var proto, Ctor;

			// Detect obvious negatives
			// Use toString instead of jQuery.type to catch host objects
			if ( !obj || toString.call( obj ) !== "[object Object]" ) {
				return false;
			}

			proto = getProto( obj );

			// Objects with no prototype (e.g., `Object.create( null )`) are plain
			if ( !proto ) {
				return true;
			}

			// Objects with prototype are plain iff they were constructed by a global Object function
			Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
			return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
		},

		isEmptyObject: function( obj ) {

			/* eslint-disable no-unused-vars */
			// See https://github.com/eslint/eslint/issues/6125
			var name;

			for ( name in obj ) {
				return false;
			}
			return true;
		},

		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}

			// Support: Android <=2.3 only (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},

		// Evaluates a script in a global context
		globalEval: function( code ) {
			DOMEval( code );
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE <=9 - 11, Edge 12 - 13
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},

		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},

		each: function( obj, callback ) {
			var length, i = 0;

			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}

			return obj;
		},

		// Support: Android <=4.0 only
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];

			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}

			return ret;
		},

		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},

		// Support: Android <=4.0 only, PhantomJS 1 only
		// push.apply(_, arraylike) throws on ancient WebKit
		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;

			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}

			first.length = i;

			return first;
		},

		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];

			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}

			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply( [], ret );
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;

			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}

			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: Date.now,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );

	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}

	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

	function isArrayLike( obj ) {

		// Support: real iOS 8.2 only (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );

		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}

		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.3.3
	 * https://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-08-08
	 */
	(function( window ) {

	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,

		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,

		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},

		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// https://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},

		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

		// Regular expressions

		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",

		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",

		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",

		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),

		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},

		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,

		rnative = /^[^{]+\{\s*\[native \w/,

		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

		rsibling = /[+~]/,

		// CSS escapes
		// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},

		// CSS string/identifier serialization
		// https://drafts.csswg.org/cssom/#common-serializing-idioms
		rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
		fcssescape = function( ch, asCodePoint ) {
			if ( asCodePoint ) {

				// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
				if ( ch === "\0" ) {
					return "\uFFFD";
				}

				// Control characters and (dependent upon position) numbers get escaped as code points
				return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
			}

			// Other potentially-special ASCII characters get backslash-escaped
			return "\\" + ch;
		},

		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		},

		disabledAncestor = addCombinator(
			function( elem ) {
				return elem.disabled === true && ("form" in elem || "label" in elem);
			},
			{ dir: "parentNode", next: "legend" }
		);

	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?

			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :

			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}

	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, match, groups, newSelector,
			newContext = context && context.ownerDocument,

			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;

		results = results || [];

		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

			return results;
		}

		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {

			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;

			if ( documentIsHTML ) {

				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

					// ID selector
					if ( (m = match[1]) ) {

						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}

						// Element context
						} else {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {

								results.push( elem );
								return results;
							}
						}

					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;

					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {

						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}

				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;

					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {

						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}

						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						while ( i-- ) {
							groups[i] = "#" + nid + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );

						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}

					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}

		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}

	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];

		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}

	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}

	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created element and returns a boolean result
	 */
	function assert( fn ) {
		var el = document.createElement("fieldset");

		try {
			return !!fn( el );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( el.parentNode ) {
				el.parentNode.removeChild( el );
			}
			// release memory in IE
			el = null;
		}
	}

	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;

		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}

	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				a.sourceIndex - b.sourceIndex;

		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}

		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}

		return a ? 1 : -1;
	}

	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for :enabled/:disabled
	 * @param {Boolean} disabled true for :disabled; false for :enabled
	 */
	function createDisabledPseudo( disabled ) {

		// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
		return function( elem ) {

			// Only certain elements can match :enabled or :disabled
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
			if ( "form" in elem ) {

				// Check for inherited disabledness on relevant non-disabled elements:
				// * listed form-associated elements in a disabled fieldset
				//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
				// * option elements in a disabled optgroup
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
				// All such elements have a "form" property.
				if ( elem.parentNode && elem.disabled === false ) {

					// Option elements defer to a parent optgroup if present
					if ( "label" in elem ) {
						if ( "label" in elem.parentNode ) {
							return elem.parentNode.disabled === disabled;
						} else {
							return elem.disabled === disabled;
						}
					}

					// Support: IE 6 - 11
					// Use the isDisabled shortcut property to check for disabled fieldset ancestors
					return elem.isDisabled === disabled ||

						// Where there is no isDisabled, check manually
						/* jshint -W018 */
						elem.isDisabled !== !disabled &&
							disabledAncestor( elem ) === disabled;
				}

				return elem.disabled === disabled;

			// Try to winnow out elements that can't be disabled before trusting the disabled property.
			// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
			// even exist on them, let alone have a boolean value.
			} else if ( "label" in elem ) {
				return elem.disabled === disabled;
			}

			// Remaining elements are neither :enabled nor :disabled
			return false;
		};
	}

	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;

				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}

	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}

	// Expose support vars for convenience
	support = Sizzle.support = {};

	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};

	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, subWindow,
			doc = node ? node.ownerDocument || node : preferredDoc;

		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}

		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );

		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( preferredDoc !== document &&
			(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

			// Support: IE 11, Edge
			if ( subWindow.addEventListener ) {
				subWindow.addEventListener( "unload", unloadHandler, false );

			// Support: IE 9 - 10 only
			} else if ( subWindow.attachEvent ) {
				subWindow.attachEvent( "onunload", unloadHandler );
			}
		}

		/* Attributes
		---------------------------------------------------------------------- */

		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( el ) {
			el.className = "i";
			return !el.getAttribute("className");
		});

		/* getElement(s)By*
		---------------------------------------------------------------------- */

		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( el ) {
			el.appendChild( document.createComment("") );
			return !el.getElementsByTagName("*").length;
		});

		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );

		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programmatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( el ) {
			docElem.appendChild( el ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});

		// ID filter and find
		if ( support.getById ) {
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var elem = context.getElementById( id );
					return elem ? [ elem ] : [];
				}
			};
		} else {
			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};

			// Support: IE 6 - 7 only
			// getElementById is not reliable as a find shortcut
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var node, i, elems,
						elem = context.getElementById( id );

					if ( elem ) {

						// Verify the id attribute
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}

						// Fall back on getElementsByName
						elems = context.getElementsByName( id );
						i = 0;
						while ( (elem = elems[i++]) ) {
							node = elem.getAttributeNode("id");
							if ( node && node.value === id ) {
								return [ elem ];
							}
						}
					}

					return [];
				}
			};
		}

		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );

				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :

			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			};

		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};

		/* QSA/matchesSelector
		---------------------------------------------------------------------- */

		// QSA and matchesSelector support

		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];

		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See https://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];

		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( el ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// https://bugs.jquery.com/ticket/12359
				docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";

				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( el.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}

				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !el.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}

				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}

				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !el.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}

				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibling-combinator selector` fails
				if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});

			assert(function( el ) {
				el.innerHTML = "<a href='' disabled='disabled'></a>" +
					"<select disabled='disabled'><option/></select>";

				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				el.appendChild( input ).setAttribute( "name", "D" );

				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( el.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}

				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( el.querySelectorAll(":enabled").length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Support: IE9-11+
				// IE's :disabled selector does not pick up the children of disabled fieldsets
				docElem.appendChild( el ).disabled = true;
				if ( el.querySelectorAll(":disabled").length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Opera 10-11 does not throw on post-comma invalid pseudos
				el.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}

		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {

			assert(function( el ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( el, "*" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( el, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}

		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );

		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};

		/* Sorting
		---------------------------------------------------------------------- */

		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {

			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}

			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :

				// Otherwise we know they are disconnected
				1;

			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];

			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;

			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}

			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}

			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}

			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};

		return document;
	};

	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};

	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );

		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

			try {
				var ret = matches.call( elem, expr );

				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}

		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};

	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};

	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;

		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};

	Sizzle.escape = function( sel ) {
		return (sel + "").replace( rcssescape, fcssescape );
	};

	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};

	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;

		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}

		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;

		return results;
	};

	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes

		return ret;
	};

	Expr = Sizzle.selectors = {

		// Can be adjusted by the user
		cacheLength: 50,

		createPseudo: markFunction,

		match: matchExpr,

		attrHandle: {},

		find: {},

		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},

		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );

				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}

				return match.slice( 0, 4 );
			},

			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();

				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}

					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}

				return match;
			},

			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];

				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}

				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";

				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}

				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},

		filter: {

			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},

			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];

				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},

			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );

					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}

					result += "";

					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},

			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";

				return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :

					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;

						if ( parent ) {

							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {

											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [ forward ? parent.firstChild : parent.lastChild ];

							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {

								// Seek `elem` from a previously-cached index

								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];

								while ( (node = ++nodeIndex && node && node[ dir ] ||

									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {

									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}

							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});

									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}

								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {

										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {

											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});

												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});

												uniqueCache[ type ] = [ dirruns, diff ];
											}

											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},

			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );

				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}

				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}

				return fn;
			}
		},

		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );

				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;

						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),

			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),

			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),

			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),

			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},

			"root": function( elem ) {
				return elem === docElem;
			},

			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},

			// Boolean properties
			"enabled": createDisabledPseudo( false ),
			"disabled": createDisabledPseudo( true ),

			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},

			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}

				return elem.selected === true;
			},

			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},

			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},

			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},

			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},

			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},

			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},

			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),

			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),

			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),

			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};

	Expr.pseudos["nth"] = Expr.pseudos["eq"];

	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}

	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();

	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];

		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}

		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;

		while ( soFar ) {

			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}

			matched = false;

			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}

			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}

			if ( !matched ) {
				break;
			}
		}

		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};

	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}

	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			skip = combinator.next,
			key = skip || dir,
			checkNonElements = base && key === "parentNode",
			doneName = done++;

		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
				return false;
			} :

			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];

				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

							if ( skip && skip === elem.nodeName.toLowerCase() ) {
								elem = elem[ dir ] || elem;
							} else if ( (oldCache = uniqueCache[ key ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ key ] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
				return false;
			};
	}

	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}

	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}

	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;

		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}

		return newUnmatched;
	}

	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,

				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,

				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

						// ...intermediate processing is necessary
						[] :

						// ...otherwise use results directly
						results :
					matcherIn;

			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}

			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );

				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}

			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}

					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

							seed[temp] = !(results[temp] = elem);
						}
					}
				}

			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}

	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,

			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];

		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}

		return elementMatcher( matchers );
	}

	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;

				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}

				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}

				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;

				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}

					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}

					// Add matches to results
					push.apply( results, setMatched );

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {

						Sizzle.uniqueSort( results );
					}
				}

				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}

	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];

		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}

			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};

	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );

		results = results || [];

		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {

			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;

				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}

		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};

	// One-time assignments

	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;

	// Initialize against the default document
	setDocument();

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( el ) {
		// Should return 1, but returns 4 (following)
		return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
	});

	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( el ) {
		el.innerHTML = "<a href='#'></a>";
		return el.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}

	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( el ) {
		el.innerHTML = "<input/>";
		el.firstChild.setAttribute( "value", "" );
		return el.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}

	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( el ) {
		return el.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}

	return Sizzle;

	})( window );



	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;

	// Deprecated
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	jQuery.escapeSelector = Sizzle.escape;




	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};


	var siblings = function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	};


	var rneedsContext = jQuery.expr.match.needsContext;

	var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				return !!qualifier.call( elem, i, elem ) !== not;
			} );
		}

		// Single element
		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );
		}

		// Arraylike of elements (jQuery, arguments, Array)
		if ( typeof qualifier !== "string" ) {
			return jQuery.grep( elements, function( elem ) {
				return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
			} );
		}

		// Simple selector that can be filtered directly, removing non-Elements
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		// Complex selector, compare the two sets, removing non-Elements
		qualifier = jQuery.filter( qualifier, elements );
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;
		} );
	}

	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		if ( elems.length === 1 && elem.nodeType === 1 ) {
			return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
		}

		return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
	};

	jQuery.fn.extend( {
		find: function( selector ) {
			var i, ret,
				len = this.length,
				self = this;

			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}

			ret = this.pushStack( [] );

			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}

			return len > 1 ? jQuery.uniqueSort( ret ) : ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );


	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		// Shortcut simple #id case for speed
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}

			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;

			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {

					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];

				} else {
					match = rquickExpr.exec( selector );
				}

				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {

					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;

						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );

						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {

								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );

								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}

						return this;

					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );

						if ( elem ) {

							// Inject the element directly into the jQuery object
							this[ 0 ] = elem;
							this.length = 1;
						}
						return this;
					}

				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}

			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this[ 0 ] = selector;
				this.length = 1;
				return this;

			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :

					// Execute immediately if ready is not present
					selector( jQuery );
			}

			return jQuery.makeArray( selector, this );
		};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery( document );


	var rparentsprev = /^(?:parents|prev(?:Until|All))/,

		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;

			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},

		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				targets = typeof selectors !== "string" && jQuery( selectors );

			// Positional selectors never match, since there's no _selection_ context
			if ( !rneedsContext.test( selectors ) ) {
				for ( ; i < l; i++ ) {
					for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

						// Always skip document fragments
						if ( cur.nodeType < 11 && ( targets ?
							targets.index( cur ) > -1 :

							// Don't pass non-elements to Sizzle
							cur.nodeType === 1 &&
								jQuery.find.matchesSelector( cur, selectors ) ) ) {

							matched.push( cur );
							break;
						}
					}
				}
			}

			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},

		// Determine the position of an element within the set
		index: function( elem ) {

			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}

			// Locate the position of the desired element
			return indexOf.call( this,

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},

		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},

		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );

	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}

	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			return elem.contentDocument || jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );

			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}

			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}

			if ( this.length > 1 ) {

				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}

				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}

			return this.pushStack( matched );
		};
	} );
	var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}

	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );

		var // Flag to know if list is currently firing
			firing,

			// Last fire value for non-forgettable lists
			memory,

			// Flag to know if list was already fired
			fired,

			// Flag to prevent firing
			locked,

			// Actual callback list
			list = [],

			// Queue of execution data for repeatable lists
			queue = [],

			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,

			// Fire callbacks
			fire = function() {

				// Enforce single-firing
				locked = options.once;

				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {

						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {

							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}

				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}

				firing = false;

				// Clean up if we're done firing for good
				if ( locked ) {

					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];

					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},

			// Actual Callbacks object
			self = {

				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {

						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}

						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );

						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},

				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );

							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},

				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},

				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},

				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},

				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory && !firing ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},

				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},

				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},

				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};

		return self;
	};


	function Identity( v ) {
		return v;
	}
	function Thrower( ex ) {
		throw ex;
	}

	function adoptValue( value, resolve, reject ) {
		var method;

		try {

			// Check for promise aspect first to privilege synchronous behavior
			if ( value && jQuery.isFunction( ( method = value.promise ) ) ) {
				method.call( value ).done( resolve ).fail( reject );

			// Other thenables
			} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {
				method.call( value, resolve, reject );

			// Other non-thenables
			} else {

				// Support: Android 4.0 only
				// Strict mode functions invoked without .call/.apply get global-object context
				resolve.call( undefined, value );
			}

		// For Promises/A+, convert exceptions into rejections
		// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
		// Deferred#then to conditionally suppress rejection.
		} catch ( value ) {

			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			reject.call( undefined, value );
		}
	}

	jQuery.extend( {

		Deferred: function( func ) {
			var tuples = [

					// action, add listener, callbacks,
					// ... .then handlers, argument index, [final state]
					[ "notify", "progress", jQuery.Callbacks( "memory" ),
						jQuery.Callbacks( "memory" ), 2 ],
					[ "resolve", "done", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 0, "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 1, "rejected" ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					"catch": function( fn ) {
						return promise.then( null, fn );
					},

					// Keep pipe for back-compat
					pipe: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;

						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {

								// Map tuples (progress, done, fail) to arguments (done, fail, progress)
								var fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

								// deferred.progress(function() { bind to newDefer or newDefer.notify })
								// deferred.done(function() { bind to newDefer or newDefer.resolve })
								// deferred.fail(function() { bind to newDefer or newDefer.reject })
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},
					then: function( onFulfilled, onRejected, onProgress ) {
						var maxDepth = 0;
						function resolve( depth, deferred, handler, special ) {
							return function() {
								var that = this,
									args = arguments,
									mightThrow = function() {
										var returned, then;

										// Support: Promises/A+ section 2.3.3.3.3
										// https://promisesaplus.com/#point-59
										// Ignore double-resolution attempts
										if ( depth < maxDepth ) {
											return;
										}

										returned = handler.apply( that, args );

										// Support: Promises/A+ section 2.3.1
										// https://promisesaplus.com/#point-48
										if ( returned === deferred.promise() ) {
											throw new TypeError( "Thenable self-resolution" );
										}

										// Support: Promises/A+ sections 2.3.3.1, 3.5
										// https://promisesaplus.com/#point-54
										// https://promisesaplus.com/#point-75
										// Retrieve `then` only once
										then = returned &&

											// Support: Promises/A+ section 2.3.4
											// https://promisesaplus.com/#point-64
											// Only check objects and functions for thenability
											( typeof returned === "object" ||
												typeof returned === "function" ) &&
											returned.then;

										// Handle a returned thenable
										if ( jQuery.isFunction( then ) ) {

											// Special processors (notify) just wait for resolution
											if ( special ) {
												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special )
												);

											// Normal processors (resolve) also hook into progress
											} else {

												// ...and disregard older resolution values
												maxDepth++;

												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special ),
													resolve( maxDepth, deferred, Identity,
														deferred.notifyWith )
												);
											}

										// Handle all other returned values
										} else {

											// Only substitute handlers pass on context
											// and multiple values (non-spec behavior)
											if ( handler !== Identity ) {
												that = undefined;
												args = [ returned ];
											}

											// Process the value(s)
											// Default process is resolve
											( special || deferred.resolveWith )( that, args );
										}
									},

									// Only normal processors (resolve) catch and reject exceptions
									process = special ?
										mightThrow :
										function() {
											try {
												mightThrow();
											} catch ( e ) {

												if ( jQuery.Deferred.exceptionHook ) {
													jQuery.Deferred.exceptionHook( e,
														process.stackTrace );
												}

												// Support: Promises/A+ section 2.3.3.3.4.1
												// https://promisesaplus.com/#point-61
												// Ignore post-resolution exceptions
												if ( depth + 1 >= maxDepth ) {

													// Only substitute handlers pass on context
													// and multiple values (non-spec behavior)
													if ( handler !== Thrower ) {
														that = undefined;
														args = [ e ];
													}

													deferred.rejectWith( that, args );
												}
											}
										};

								// Support: Promises/A+ section 2.3.3.3.1
								// https://promisesaplus.com/#point-57
								// Re-resolve promises immediately to dodge false rejection from
								// subsequent errors
								if ( depth ) {
									process();
								} else {

									// Call an optional hook to record the stack, in case of exception
									// since it's otherwise lost when execution goes async
									if ( jQuery.Deferred.getStackHook ) {
										process.stackTrace = jQuery.Deferred.getStackHook();
									}
									window.setTimeout( process );
								}
							};
						}

						return jQuery.Deferred( function( newDefer ) {

							// progress_handlers.add( ... )
							tuples[ 0 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onProgress ) ?
										onProgress :
										Identity,
									newDefer.notifyWith
								)
							);

							// fulfilled_handlers.add( ... )
							tuples[ 1 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onFulfilled ) ?
										onFulfilled :
										Identity
								)
							);

							// rejected_handlers.add( ... )
							tuples[ 2 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onRejected ) ?
										onRejected :
										Thrower
								)
							);
						} ).promise();
					},

					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};

			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 5 ];

				// promise.progress = list.add
				// promise.done = list.add
				// promise.fail = list.add
				promise[ tuple[ 1 ] ] = list.add;

				// Handle state
				if ( stateString ) {
					list.add(
						function() {

							// state = "resolved" (i.e., fulfilled)
							// state = "rejected"
							state = stateString;
						},

						// rejected_callbacks.disable
						// fulfilled_callbacks.disable
						tuples[ 3 - i ][ 2 ].disable,

						// progress_callbacks.lock
						tuples[ 0 ][ 2 ].lock
					);
				}

				// progress_handlers.fire
				// fulfilled_handlers.fire
				// rejected_handlers.fire
				list.add( tuple[ 3 ].fire );

				// deferred.notify = function() { deferred.notifyWith(...) }
				// deferred.resolve = function() { deferred.resolveWith(...) }
				// deferred.reject = function() { deferred.rejectWith(...) }
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
					return this;
				};

				// deferred.notifyWith = list.fireWith
				// deferred.resolveWith = list.fireWith
				// deferred.rejectWith = list.fireWith
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );

			// Make the deferred a promise
			promise.promise( deferred );

			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function( singleValue ) {
			var

				// count of uncompleted subordinates
				remaining = arguments.length,

				// count of unprocessed arguments
				i = remaining,

				// subordinate fulfillment data
				resolveContexts = Array( i ),
				resolveValues = slice.call( arguments ),

				// the master Deferred
				master = jQuery.Deferred(),

				// subordinate callback factory
				updateFunc = function( i ) {
					return function( value ) {
						resolveContexts[ i ] = this;
						resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( !( --remaining ) ) {
							master.resolveWith( resolveContexts, resolveValues );
						}
					};
				};

			// Single- and empty arguments are adopted like Promise.resolve
			if ( remaining <= 1 ) {
				adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject );

				// Use .then() to unwrap secondary thenables (cf. gh-3000)
				if ( master.state() === "pending" ||
					jQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

					return master.then();
				}
			}

			// Multiple arguments are aggregated like Promise.all array elements
			while ( i-- ) {
				adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
			}

			return master.promise();
		}
	} );


	// These usually indicate a programmer mistake during development,
	// warn about them ASAP rather than swallowing them by default.
	var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

	jQuery.Deferred.exceptionHook = function( error, stack ) {

		// Support: IE 8 - 9 only
		// Console exists when dev tools are open, which can happen at any time
		if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
			window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
		}
	};




	jQuery.readyException = function( error ) {
		window.setTimeout( function() {
			throw error;
		} );
	};




	// The deferred used on DOM ready
	var readyList = jQuery.Deferred();

	jQuery.fn.ready = function( fn ) {

		readyList
			.then( fn )

			// Wrap jQuery.readyException in a function so that the lookup
			// happens at the time of error handling instead of callback
			// registration.
			.catch( function( error ) {
				jQuery.readyException( error );
			} );

		return this;
	};

	jQuery.extend( {

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},

		// Handle when the DOM is ready
		ready: function( wait ) {

			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );
		}
	} );

	jQuery.ready.then = readyList.then;

	// The ready event handler and self cleanup method
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}

	// Catch cases where $(document).ready() is called
	// after the browser event has already occurred.
	// Support: IE <=9 - 10 only
	// Older IE sometimes signals "interactive" too soon
	if ( document.readyState === "complete" ||
		( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

		// Handle it asynchronously to allow scripts the opportunity to delay ready
		window.setTimeout( jQuery.ready );

	} else {

		// Use the handy event callback
		document.addEventListener( "DOMContentLoaded", completed );

		// A fallback to window.onload, that will always work
		window.addEventListener( "load", completed );
	}




	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {

				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}

		if ( chainable ) {
			return elems;
		}

		// Gets
		if ( bulk ) {
			return fn.call( elems );
		}

		return len ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var acceptData = function( owner ) {

		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};




	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;

	Data.prototype = {

		cache: function( owner ) {

			// Check if the owner object already has a cache
			var value = owner[ this.expando ];

			// If not, create one
			if ( !value ) {
				value = {};

				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {

					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;

					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}

			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );

			// Handle: [ owner, key, value ] args
			// Always use camelCase key (gh-2257)
			if ( typeof data === "string" ) {
				cache[ jQuery.camelCase( data ) ] = value;

			// Handle: [ owner, { properties } ] args
			} else {

				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ jQuery.camelCase( prop ) ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :

				// Always use camelCase key (gh-2257)
				owner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];
		},
		access: function( owner, key, value ) {

			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {

				return this.get( owner, key );
			}

			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i,
				cache = owner[ this.expando ];

			if ( cache === undefined ) {
				return;
			}

			if ( key !== undefined ) {

				// Support array or space separated string of keys
				if ( jQuery.isArray( key ) ) {

					// If key is an array of keys...
					// We always set camelCase keys, so remove that.
					key = key.map( jQuery.camelCase );
				} else {
					key = jQuery.camelCase( key );

					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					key = key in cache ?
						[ key ] :
						( key.match( rnothtmlwhite ) || [] );
				}

				i = key.length;

				while ( i-- ) {
					delete cache[ key[ i ] ];
				}
			}

			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

				// Support: Chrome <=35 - 45
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();

	var dataUser = new Data();



	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;

	function getData( data ) {
		if ( data === "true" ) {
			return true;
		}

		if ( data === "false" ) {
			return false;
		}

		if ( data === "null" ) {
			return null;
		}

		// Only convert to a number if it doesn't change the string
		if ( data === +data + "" ) {
			return +data;
		}

		if ( rbrace.test( data ) ) {
			return JSON.parse( data );
		}

		return data;
	}

	function dataAttr( elem, key, data ) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );

			if ( typeof data === "string" ) {
				try {
					data = getData( data );
				} catch ( e ) {}

				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},

		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},

		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},

		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );

	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;

			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );

					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {

							// Support: IE 11 only
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}

				return data;
			}

			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}

			return access( this, function( value ) {
				var data;

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {

					// Attempt to get data from the cache
					// The key will always be camelCased in Data
					data = dataUser.get( elem, key );
					if ( data !== undefined ) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, key );
					if ( data !== undefined ) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				this.each( function() {

					// We always store the camelCased key
					dataUser.set( this, key, value );
				} );
			}, null, value, arguments.length > 1, null, true );
		},

		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );


	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;

			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );

				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},

		dequeue: function( elem, type ) {
			type = type || "fx";

			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};

			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}

			if ( fn ) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}

			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );

	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;

			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}

			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}

			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );

					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );

					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};

			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

	var isHiddenWithinTree = function( elem, el ) {

			// isHiddenWithinTree might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;

			// Inline style trumps all
			return elem.style.display === "none" ||
				elem.style.display === "" &&

				// Otherwise, check computed style
				// Support: Firefox <=43 - 45
				// Disconnected elements can have computed display: none, so first confirm that elem is
				// in the document.
				jQuery.contains( elem.ownerDocument, elem ) &&

				jQuery.css( elem, "display" ) === "none";
		};

	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	};




	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() {
					return tween.cur();
				} :
				function() {
					return jQuery.css( elem, prop, "" );
				},
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );

		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			do {

				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";

				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );

			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}

		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}


	var defaultDisplayMap = {};

	function getDefaultDisplay( elem ) {
		var temp,
			doc = elem.ownerDocument,
			nodeName = elem.nodeName,
			display = defaultDisplayMap[ nodeName ];

		if ( display ) {
			return display;
		}

		temp = doc.body.appendChild( doc.createElement( nodeName ) );
		display = jQuery.css( temp, "display" );

		temp.parentNode.removeChild( temp );

		if ( display === "none" ) {
			display = "block";
		}
		defaultDisplayMap[ nodeName ] = display;

		return display;
	}

	function showHide( elements, show ) {
		var display, elem,
			values = [],
			index = 0,
			length = elements.length;

		// Determine new display value for elements that need to change
		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}

			display = elem.style.display;
			if ( show ) {

				// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
				// check is required in this first loop unless we have a nonempty display value (either
				// inline or about-to-be-restored)
				if ( display === "none" ) {
					values[ index ] = dataPriv.get( elem, "display" ) || null;
					if ( !values[ index ] ) {
						elem.style.display = "";
					}
				}
				if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
					values[ index ] = getDefaultDisplay( elem );
				}
			} else {
				if ( display !== "none" ) {
					values[ index ] = "none";

					// Remember what we're overwriting
					dataPriv.set( elem, "display", display );
				}
			}
		}

		// Set the display of the elements in a second loop to avoid constant reflow
		for ( index = 0; index < length; index++ ) {
			if ( values[ index ] != null ) {
				elements[ index ].style.display = values[ index ];
			}
		}

		return elements;
	}

	jQuery.fn.extend( {
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}

			return this.each( function() {
				if ( isHiddenWithinTree( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );
	var rcheckableType = ( /^(?:checkbox|radio)$/i );

	var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

	var rscriptType = ( /^$|\/(?:java|ecma)script/i );



	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {

		// Support: IE <=9 only
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

	// Support: IE <=9 only
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;


	function getAll( context, tag ) {

		// Support: IE <=9 - 11 only
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret;

		if ( typeof context.getElementsByTagName !== "undefined" ) {
			ret = context.getElementsByTagName( tag || "*" );

		} else if ( typeof context.querySelectorAll !== "undefined" ) {
			ret = context.querySelectorAll( tag || "*" );

		} else {
			ret = [];
		}

		if ( tag === undefined || tag && jQuery.nodeName( context, tag ) ) {
			return jQuery.merge( [ context ], ret );
		}

		return ret;
	}


	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}


	var rhtml = /<|&#?\w+;/;

	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {

			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	}


	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );

		// Support: Android 4.0 - 4.3 only
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );

		div.appendChild( input );

		// Support: Android <=4.1 only
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

		// Support: IE <=11 only
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();
	var documentElement = document.documentElement;



	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	// Support: IE <=9 only
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}

	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {

			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}

		if ( data == null && fn == null ) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {

				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}

	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {

		global: {},

		add: function( elem, types, handler, data, selector ) {

			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Ensure that invalid selectors throw exceptions at attach time
			// Evaluate against documentElement in case elem is a non-element node (e.g., document)
			if ( selector ) {
				jQuery.find.matchesSelector( documentElement, selector );
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );

				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}

				if ( special.add ) {
					special.add.call( elem, handleObj );

					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}

		},

		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {

			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}

				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];

					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );

						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

						jQuery.removeEvent( elem, type, elemData.handle );
					}

					delete events[ type ];
				}
			}

			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},

		dispatch: function( nativeEvent ) {

			// Make a writable jQuery.Event from the native event object
			var event = jQuery.event.fix( nativeEvent );

			var i, j, ret, matched, handleObj, handlerQueue,
				args = new Array( arguments.length ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;

			for ( i = 1; i < arguments.length; i++ ) {
				args[ i ] = arguments[ i ];
			}

			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;

				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {

					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );

						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}

			return event.result;
		},

		handlers: function( event, handlers ) {
			var i, handleObj, sel, matchedHandlers, matchedSelectors,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;

			// Find delegate handlers
			if ( delegateCount &&

				// Support: IE <=9
				// Black-hole SVG <use> instance trees (trac-13180)
				cur.nodeType &&

				// Support: Firefox <=42
				// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
				// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
				// Support: IE 11 only
				// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
				!( event.type === "click" && event.button >= 1 ) ) {

				for ( ; cur !== this; cur = cur.parentNode || this ) {

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
						matchedHandlers = [];
						matchedSelectors = {};
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if ( matchedSelectors[ sel ] === undefined ) {
								matchedSelectors[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matchedSelectors[ sel ] ) {
								matchedHandlers.push( handleObj );
							}
						}
						if ( matchedHandlers.length ) {
							handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			cur = this;
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
			}

			return handlerQueue;
		},

		addProp: function( name, hook ) {
			Object.defineProperty( jQuery.Event.prototype, name, {
				enumerable: true,
				configurable: true,

				get: jQuery.isFunction( hook ) ?
					function() {
						if ( this.originalEvent ) {
								return hook( this.originalEvent );
						}
					} :
					function() {
						if ( this.originalEvent ) {
								return this.originalEvent[ name ];
						}
					},

				set: function( value ) {
					Object.defineProperty( this, name, {
						enumerable: true,
						configurable: true,
						writable: true,
						value: value
					} );
				}
			} );
		},

		fix: function( originalEvent ) {
			return originalEvent[ jQuery.expando ] ?
				originalEvent :
				new jQuery.Event( originalEvent );
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {

				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {

				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},

			beforeunload: {
				postDispatch: function( event ) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};

	jQuery.removeEvent = function( elem, type, handle ) {

		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};

	jQuery.Event = function( src, props ) {

		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}

		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&

					// Support: Android <=2.3 only
					src.returnValue === false ?
				returnTrue :
				returnFalse;

			// Create target properties
			// Support: Safari <=6 - 7 only
			// Target should not be a text node (#504, #13143)
			this.target = ( src.target && src.target.nodeType === 3 ) ?
				src.target.parentNode :
				src.target;

			this.currentTarget = src.currentTarget;
			this.relatedTarget = src.relatedTarget;

		// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,

		preventDefault: function() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if ( e && !this.isSimulated ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if ( e && !this.isSimulated ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if ( e && !this.isSimulated ) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Includes all common event props including KeyEvent and MouseEvent specific props
	jQuery.each( {
		altKey: true,
		bubbles: true,
		cancelable: true,
		changedTouches: true,
		ctrlKey: true,
		detail: true,
		eventPhase: true,
		metaKey: true,
		pageX: true,
		pageY: true,
		shiftKey: true,
		view: true,
		"char": true,
		charCode: true,
		key: true,
		keyCode: true,
		button: true,
		buttons: true,
		clientX: true,
		clientY: true,
		offsetX: true,
		offsetY: true,
		pointerId: true,
		pointerType: true,
		screenX: true,
		screenY: true,
		targetTouches: true,
		toElement: true,
		touches: true,

		which: function( event ) {
			var button = event.button;

			// Add which for key events
			if ( event.which == null && rkeyEvent.test( event.type ) ) {
				return event.charCode != null ? event.charCode : event.keyCode;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
				if ( button & 1 ) {
					return 1;
				}

				if ( button & 2 ) {
					return 3;
				}

				if ( button & 4 ) {
					return 2;
				}

				return 0;
			}

			return event.which;
		}
	}, jQuery.event.addProp );

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,

			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );

	jQuery.fn.extend( {

		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {

				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );


	var

		/* eslint-disable max-len */

		// See https://github.com/eslint/eslint/issues/3229
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

		/* eslint-enable */

		// Support: IE <=10 - 11, Edge 12 - 13
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,

		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

	function manipulationTarget( elem, content ) {
		if ( jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

			return elem.getElementsByTagName( "tbody" )[ 0 ] || elem;
		}

		return elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );

		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}

		return elem;
	}

	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if ( dest.nodeType !== 1 ) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;

			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}

		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );

			dataUser.set( dest, udataCur );
		}
	}

	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;

		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip( collection, args, callback, ignored ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}

		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {

							// Support: Android <=4.0 only, PhantomJS 1 only
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( collection[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {

							if ( node.src ) {

								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								DOMEval( node.textContent.replace( rcleanScript, "" ), doc );
							}
						}
					}
				}
			}
		}

		return collection;
	}

	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;

		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}

			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}

		return elem;
	}

	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},

		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );

			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {

				// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}

			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );

					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}

			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}

			// Return the cloned set
			return clone;
		},

		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;

			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );

								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );

	jQuery.fn.extend( {
		detach: function( selector ) {
			return remove( this, selector, true );
		},

		remove: function( selector ) {
			return remove( this, selector );
		},

		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},

		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},

		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},

		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},

		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},

		empty: function() {
			var elem,
				i = 0;

			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {

					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},

		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;

				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

					value = jQuery.htmlPrefilter( value );

					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};

							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}

						elem = 0;

					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}

				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},

		replaceWith: function() {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;

				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}

			// Force callback invocation
			}, ignored );
		}
	} );

	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;

			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );

				// Support: Android <=4.0 only, PhantomJS 1 only
				// .get() because push.apply(_, arraylike) throws on ancient WebKit
				push.apply( ret, elems.get() );
			}

			return this.pushStack( ret );
		};
	} );
	var rmargin = ( /^margin/ );

	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

	var getStyles = function( elem ) {

			// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;

			if ( !view || !view.opener ) {
				view = window;
			}

			return view.getComputedStyle( elem );
		};



	( function() {

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {

			// This is a singleton, we need to execute it only once
			if ( !div ) {
				return;
			}

			div.style.cssText =
				"box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild( container );

			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";

			// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";

			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";

			documentElement.removeChild( container );

			// Nullify the div so it wouldn't be stored in the memory and
			// it will also be a sign that checks already performed
			div = null;
		}

		var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );

		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}

		// Support: IE <=9 - 11 only
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		container.appendChild( div );

		jQuery.extend( support, {
			pixelPosition: function() {
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				computeStyleTests();
				return boxSizingReliableVal;
			},
			pixelMarginRight: function() {
				computeStyleTests();
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function() {
				computeStyleTests();
				return reliableMarginLeftVal;
			}
		} );
	} )();


	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );

		// Support: IE <=9 only
		// getPropertyValue is only needed for .css('filter') (#12537)
		if ( computed ) {
			ret = computed.getPropertyValue( name ) || computed[ name ];

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// https://drafts.csswg.org/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?

			// Support: IE <=9 - 11 only
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}


	function addGetHookIf( conditionFn, hookFn ) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}


	var

		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},

		cssPrefixes = [ "Webkit", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;

	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {

		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}

		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;

		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}

	function setPositiveNumber( elem, value, subtract ) {

		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?

			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}

	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i,
			val = 0;

		// If we already have the right measurement, avoid augmentation
		if ( extra === ( isBorderBox ? "border" : "content" ) ) {
			i = 4;

		// Otherwise initialize for horizontal or vertical properties
		} else {
			i = name === "width" ? 1 : 0;
		}

		for ( ; i < 4; i += 2 ) {

			// Both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}

			if ( isBorderBox ) {

				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}

				// At this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {

				// At this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

				// At this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}

		return val;
	}

	function getWidthOrHeight( elem, name, extra ) {

		// Start with offset property, which is equivalent to the border-box value
		var val,
			valueIsBorderBox = true,
			styles = getStyles( elem ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Support: IE <=11 only
		// Running getBoundingClientRect on a disconnected node
		// in IE throws an error.
		if ( elem.getClientRects().length ) {
			val = elem.getBoundingClientRect()[ name ];
		}

		// Some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {

			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}

			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test( val ) ) {
				return val;
			}

			// Check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );

			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}

		// Use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}

	jQuery.extend( {

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {

						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},

		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {

			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}

			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;

			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;

				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}

				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {

					style[ name ] = value;
				}

			} else {

				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},

		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name );

			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}

			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}

			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}
			return val;
		}
	} );

	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

						// Support: Safari 8+
						// Table columns in Safari have non-zero offsetWidth & zero
						// getBoundingClientRect().width unless display is changed.
						// Support: IE <=11 only
						// Running getBoundingClientRect on a disconnected node
						// in IE throws an error.
						( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},

			set: function( elem, value, extra ) {
				var matches,
					styles = extra && getStyles( elem ),
					subtract = extra && augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					);

				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {

					elem.style[ name ] = value;
					value = jQuery.css( elem, name );
				}

				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );

	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);

	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},

					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];

				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}

				return expanded;
			}
		};

		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );

	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;

				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;

					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}

					return map;
				}

				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		}
	} );


	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];

			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];

			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;

			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}

			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {

				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};

	// Support: IE <=9 only
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back compat <1.8 extension point
	jQuery.fx.step = {};




	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;

	function raf() {
		if ( timerId ) {
			window.requestAnimationFrame( raf );
			jQuery.fx.tick();
		}
	}

	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}

	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}

		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter( elem, props, opts ) {
		var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
			isBox = "width" in props || "height" in props,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHiddenWithinTree( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );

		// Queue-skipping animations hijack the fx hooks
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always( function() {

				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}

		// Detect show/hide animations
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.test( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {

					// Pretend to be hidden if this is a "show" and
					// there is still data from a stopped show/hide
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;

					// Ignore all other no-op show/hide data
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
			}
		}

		// Bail out if this is a no-op like .hide().hide()
		propTween = !jQuery.isEmptyObject( props );
		if ( !propTween && jQuery.isEmptyObject( orig ) ) {
			return;
		}

		// Restrict "overflow" and "display" styles during box animations
		if ( isBox && elem.nodeType === 1 ) {

			// Support: IE <=9 - 11, Edge 12 - 13
			// Record all 3 overflow attributes because IE does not infer the shorthand
			// from identically-valued overflowX and overflowY
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

			// Identify a display type, preferring old show/hide data over the CSS cascade
			restoreDisplay = dataShow && dataShow.display;
			if ( restoreDisplay == null ) {
				restoreDisplay = dataPriv.get( elem, "display" );
			}
			display = jQuery.css( elem, "display" );
			if ( display === "none" ) {
				if ( restoreDisplay ) {
					display = restoreDisplay;
				} else {

					// Get nonempty value(s) by temporarily forcing visibility
					showHide( [ elem ], true );
					restoreDisplay = elem.style.display || restoreDisplay;
					display = jQuery.css( elem, "display" );
					showHide( [ elem ] );
				}
			}

			// Animate inline elements as inline-block
			if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
				if ( jQuery.css( elem, "float" ) === "none" ) {

					// Restore the original display value at the end of pure show/hide animations
					if ( !propTween ) {
						anim.done( function() {
							style.display = restoreDisplay;
						} );
						if ( restoreDisplay == null ) {
							display = style.display;
							restoreDisplay = display === "none" ? "" : display;
						}
					}
					style.display = "inline-block";
				}
			}
		}

		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}

		// Implement show/hide animations
		propTween = false;
		for ( prop in orig ) {

			// General show/hide setup for this element animation
			if ( !propTween ) {
				if ( dataShow ) {
					if ( "hidden" in dataShow ) {
						hidden = dataShow.hidden;
					}
				} else {
					dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
				}

				// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
				if ( toggle ) {
					dataShow.hidden = !hidden;
				}

				// Show elements before animating them
				if ( hidden ) {
					showHide( [ elem ], true );
				}

				/* eslint-disable no-loop-func */

				anim.done( function() {

				/* eslint-enable no-loop-func */

					// The final step of a "hide" animation is actually hiding the element
					if ( !hidden ) {
						showHide( [ elem ] );
					}
					dataPriv.remove( elem, "fxshow" );
					for ( prop in orig ) {
						jQuery.style( elem, prop, orig[ prop ] );
					}
				} );
			}

			// Per-property setup
			propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = propTween.start;
				if ( hidden ) {
					propTween.end = propTween.start;
					propTween.start = 0;
				}
			}
		}
	}

	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}

			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}

			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}

	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {

				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

					// Support: Android 2.3 only
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;

				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( percent );
				}

				deferred.notifyWith( elem, [ animation, percent, remaining ] );

				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,

						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length; index++ ) {
						animation.tweens[ index ].run( 1 );
					}

					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;

		propFilter( props, animation.opts.specialEasing );

		for ( ; index < length; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}

		jQuery.map( props, createTween, animation );

		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}

		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);

		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}

	jQuery.Animation = jQuery.extend( Animation, {

		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},

		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnothtmlwhite );
			}

			var prop,
				index = 0,
				length = props.length;

			for ( ; index < length; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},

		prefilters: [ defaultPrefilter ],

		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );

	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};

		// Go to the end state if fx are off or if document is hidden
		if ( jQuery.fx.off || document.hidden ) {
			opt.duration = 0;

		} else {
			if ( typeof opt.duration !== "number" ) {
				if ( opt.duration in jQuery.fx.speeds ) {
					opt.duration = jQuery.fx.speeds[ opt.duration ];

				} else {
					opt.duration = jQuery.fx.speeds._default;
				}
			}
		}

		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};

		return opt;
	};

	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {

			// Show any hidden elements after setting opacity to 0
			return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {

					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );

					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;

			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};

			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}

			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );

				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}

				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {

						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue( this, type, [] );

				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}

				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}

				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}

				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );

	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );

	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );

	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;

		fxNow = jQuery.now();

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];

			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};

	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = window.requestAnimationFrame ?
				window.requestAnimationFrame( raf ) :
				window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};

	jQuery.fx.stop = function() {
		if ( window.cancelAnimationFrame ) {
			window.cancelAnimationFrame( timerId );
		} else {
			window.clearInterval( timerId );
		}

		timerId = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};


	// Based off of the plugin by Clint Helfers, with permission.
	// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};


	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );

		input.type = "checkbox";

		// Support: Android <=4.3 only
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE <=11 only
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: IE <=11 only
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();


	var boolHook,
		attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},

		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );

	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}

			// Attribute hooks are determined by the lowercase version
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}

			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}

				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				elem.setAttribute( name, value + "" );
				return value;
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function( elem, value ) {
			var name,
				i = 0,

				// Attribute names can contain non-HTML whitespace characters
				// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
				attrNames = value && value.match( rnothtmlwhite );

			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					elem.removeAttribute( name );
				}
			}
		}
	} );

	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};

	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;

		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle,
				lowercaseName = name.toLowerCase();

			if ( !isXML ) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ lowercaseName ];
				attrHandle[ lowercaseName ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					lowercaseName :
					null;
				attrHandle[ lowercaseName ] = handle;
			}
			return ret;
		};
	} );




	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},

		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );

	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}

			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				return ( elem[ name ] = value );
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			return elem[ name ];
		},

		propHooks: {
			tabIndex: {
				get: function( elem ) {

					// Support: IE <=9 - 11 only
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );

					if ( tabindex ) {
						return parseInt( tabindex, 10 );
					}

					if (
						rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) &&
						elem.href
					) {
						return 0;
					}

					return -1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );

	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	// eslint rule "no-unused-expressions" is disabled for this code
	// since it considers such accessions noop
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function( elem ) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if ( parent ) {
					parent.selectedIndex;

					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}

	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );




		// Strip and collapse whitespace according to HTML spec
		// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
		function stripAndCollapse( value ) {
			var tokens = value.match( rnothtmlwhite ) || [];
			return tokens.join( " " );
		}


	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}

	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnothtmlwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnothtmlwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {

							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		toggleClass: function( value, stateVal ) {
			var type = typeof value;

			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}

			return this.each( function() {
				var className, i, self, classNames;

				if ( type === "string" ) {

					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnothtmlwhite ) || [];

					while ( ( className = classNames[ i++ ] ) ) {

						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}

				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {

						// Store className if set
						dataPriv.set( this, "__className__", className );
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},

		hasClass: function( selector ) {
			var className, elem,
				i = 0;

			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
						return true;
				}
			}

			return false;
		}
	} );




	var rreturn = /\r/g;

	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];

			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];

					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}

					ret = elem.value;

					// Handle most common string cases
					if ( typeof ret === "string" ) {
						return ret.replace( rreturn, "" );
					}

					// Handle cases where value is null/undef or number
					return ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction( value );

			return this.each( function( i ) {
				var val;

				if ( this.nodeType !== 1 ) {
					return;
				}

				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";

				} else if ( typeof val === "number" ) {
					val += "";

				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}

				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );

	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {

					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :

						// Support: IE <=10 - 11 only
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						stripAndCollapse( jQuery.text( elem ) );
				}
			},
			select: {
				get: function( elem ) {
					var value, option, i,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one",
						values = one ? null : [],
						max = one ? index + 1 : options.length;

					if ( index < 0 ) {
						i = max;

					} else {
						i = one ? index : 0;
					}

					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];

						// Support: IE <=9 only
						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&

								// Don't return options that are disabled or in a disabled optgroup
								!option.disabled &&
								( !option.parentNode.disabled ||
									!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

							// Get the specific value for the option
							value = jQuery( option ).val();

							// We don't need an array for one selects
							if ( one ) {
								return value;
							}

							// Multi-Selects return an array
							values.push( value );
						}
					}

					return values;
				},

				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;

					while ( i-- ) {
						option = options[ i ];

						/* eslint-disable no-cond-assign */

						if ( option.selected =
							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}

						/* eslint-enable no-cond-assign */
					}

					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );

	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );




	// Return jQuery for attributes-only inclusion


	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

	jQuery.extend( jQuery.event, {

		trigger: function( event, data, elem, onlyHandlers ) {

			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}

			if ( type.indexOf( "." ) > -1 ) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );

			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;

				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}

				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {

				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {

					// Call a native DOM method on the target with the same name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];

						if ( tmp ) {
							elem[ ontype ] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;

						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true
				}
			);

			jQuery.event.trigger( e, null, elem );
		}

	} );

	jQuery.fn.extend( {

		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );


	jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup contextmenu" ).split( " " ),
		function( i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );

	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );




	support.focusin = "onfocusin" in window;


	// Support: Firefox <=44
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};

			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );

					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;

					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );

					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;

	var nonce = jQuery.now();

	var rquery = ( /\?/ );



	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}

		// Support: IE 9 - 11 only
		// IE throws on parseFromString with invalid input.
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}

		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};


	var
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams( prefix, obj, traditional, add ) {
		var name;

		if ( jQuery.isArray( obj ) ) {

			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {

					// Treat each array item as a scalar.
					add( prefix, v );

				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );

		} else if ( !traditional && jQuery.type( obj ) === "object" ) {

			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}

		} else {

			// Serialize scalar item.
			add( prefix, obj );
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, valueOrFunction ) {

				// If value is a function, invoke it and use its return value
				var value = jQuery.isFunction( valueOrFunction ) ?
					valueOrFunction() :
					valueOrFunction;

				s[ s.length ] = encodeURIComponent( key ) + "=" +
					encodeURIComponent( value == null ? "" : value );
			};

		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );

		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" );
	};

	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();

				if ( val == null ) {
					return null;
				}

				if ( jQuery.isArray( val ) ) {
					return jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} );
				}

				return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );


	var
		r20 = /%20/g,
		rhash = /#.*$/,
		rantiCache = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,

		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},

		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),

		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {

		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {

			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

			if ( jQuery.isFunction( func ) ) {

				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {

					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

		var inspected = {},
			seekingTransport = ( structure === transports );

		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}

		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}

		return target;
	}

	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {

		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}

		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {

			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}

	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},

			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while ( current ) {

			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}

			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}

			prev = current;
			current = dataTypes.shift();

			if ( current ) {

				// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {

					current = prev;

				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {

					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];

					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {

							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {

								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {

									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];

									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if ( conv !== true ) {

						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend( {

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",

			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": JSON.parse,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?

				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},

		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),

		// Main method
		ajax: function( url, options ) {

			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,

				// URL without anti-cache param
				cacheURL,

				// Response headers
				responseHeadersString,
				responseHeaders,

				// timeout handle
				timeoutTimer,

				// Url cleanup var
				urlAnchor,

				// Request state (becomes false upon send and true upon completion)
				completed,

				// To know if global events are to be dispatched
				fireGlobals,

				// Loop variable
				i,

				// uncached part of the url
				uncached,

				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),

				// Callbacks context
				callbackContext = s.context || s,

				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,

				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),

				// Status-dependent callbacks
				statusCode = s.statusCode || {},

				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},

				// Default abort message
				strAbort = "canceled",

				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( completed ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function() {
						return completed ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function( name, value ) {
						if ( completed == null ) {
							name = requestHeadersNames[ name.toLowerCase() ] =
								requestHeadersNames[ name.toLowerCase() ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( completed == null ) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( completed ) {

								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							} else {

								// Lazy-add the new callbacks in a way that preserves old ones
								for ( code in map ) {
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							}
						}
						return this;
					},

					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};

			// Attach deferreds
			deferred.promise( jqXHR );

			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" )
				.replace( rprotocol, location.protocol + "//" );

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );

				// Support: IE <=8 - 11, Edge 12 - 13
				// IE throws exception on accessing the href property if url is malformed,
				// e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;

					// Support: IE <=8 - 11 only
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {

					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}

			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}

			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

			// If request was aborted inside a prefilter, stop there
			if ( completed ) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			// Remove hash to simplify url manipulation
			cacheURL = s.url.replace( rhash, "" );

			// More options handling for requests with no content
			if ( !s.hasContent ) {

				// Remember the hash so we can put it back
				uncached = s.url.slice( cacheURL.length );

				// If data is available, append data to url
				if ( s.data ) {
					cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add or update anti-cache param if needed
				if ( s.cache === false ) {
					cacheURL = cacheURL.replace( rantiCache, "$1" );
					uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
				}

				// Put hash and anti-cache on the URL that will be requested (gh-1732)
				s.url = cacheURL + uncached;

			// Change '%20' to '+' if this is encoded form body content (gh-2658)
			} else if ( s.data && s.processData &&
				( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
				s.data = s.data.replace( r20, "+" );
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}

			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);

			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}

			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			completeDeferred.add( s.complete );
			jqXHR.done( s.success );
			jqXHR.fail( s.error );

			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}

				// If request was aborted inside ajaxSend, stop there
				if ( completed ) {
					return jqXHR;
				}

				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}

				try {
					completed = false;
					transport.send( requestHeaders, done );
				} catch ( e ) {

					// Rethrow post-completion exceptions
					if ( completed ) {
						throw e;
					}

					// Propagate others as results
					done( -1, e );
				}
			}

			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;

				// Ignore repeat invocations
				if ( completed ) {
					return;
				}

				completed = true;

				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );

				// If successful, handle type chaining
				if ( isSuccess ) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}

					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";

					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";

					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";

				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}

				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;

				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}

				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}

			return jqXHR;
		},

		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},

		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );

	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {

			// Shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );


	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			cache: true,
			async: false,
			global: false,
			"throws": true
		} );
	};


	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;

			if ( this[ 0 ] ) {
				if ( jQuery.isFunction( html ) ) {
					html = html.call( this[ 0 ] );
				}

				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}

				wrap.map( function() {
					var elem = this;

					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}

					return elem;
				} ).append( this );
			}

			return this;
		},

		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}

			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();

				if ( contents.length ) {
					contents.wrapAll( html );

				} else {
					self.append( html );
				}
			} );
		},

		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );

			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},

		unwrap: function( selector ) {
			this.parent( selector ).not( "body" ).each( function() {
				jQuery( this ).replaceWith( this.childNodes );
			} );
			return this;
		}
	} );


	jQuery.expr.pseudos.hidden = function( elem ) {
		return !jQuery.expr.pseudos.visible( elem );
	};
	jQuery.expr.pseudos.visible = function( elem ) {
		return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
	};




	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};

	var xhrSuccessStatus = {

			// File protocol always yields status code 0, assume 200
			0: 200,

			// Support: IE <=9 only
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();

	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();

					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}

					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {

									// Support: IE <=9 only
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(

											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,

										// Support: IE <=9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};

					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = callback( "error" );

					// Support: IE 9 only
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {

							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {

								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}

					// Create the abort callback
					callback = callback( "abort" );

					try {

						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {

						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},

				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
	jQuery.ajaxPrefilter( function( s ) {
		if ( s.crossDomain ) {
			s.contents.script = false;
		}
	} );

	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );

	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {

		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);

					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;

			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};

			// Force json dataType
			s.dataTypes[ 0 ] = "json";

			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always( function() {

				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );

				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}

				// Save back as free
				if ( s[ callbackName ] ) {

					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}

				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}

				responseContainer = overwritten = undefined;
			} );

			// Delegate to script
			return "script";
		}
	} );




	// Support: Safari 8 only
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = ( function() {
		var body = document.implementation.createHTMLDocument( "" ).body;
		body.innerHTML = "<form></form><form></form>";
		return body.childNodes.length === 2;
	} )();


	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( typeof data !== "string" ) {
			return [];
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}

		var base, parsed, scripts;

		if ( !context ) {

			// Stop scripts or inline event handlers from being executed immediately
			// by using document.implementation
			if ( support.createHTMLDocument ) {
				context = document.implementation.createHTMLDocument( "" );

				// Set the base href for the created document
				// so any parsed elements with URLs
				// are based on the document's URL (gh-2965)
				base = context.createElement( "base" );
				base.href = document.location.href;
				context.head.appendChild( base );
			} else {
				context = document;
			}
		}

		parsed = rsingleTag.exec( data );
		scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}

		parsed = buildFragment( [ data ], context, scripts );

		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	};


	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		var selector, type, response,
			self = this,
			off = url.indexOf( " " );

		if ( off > -1 ) {
			selector = stripAndCollapse( url.slice( off ) );
			url = url.slice( 0, off );
		}

		// If it's a function
		if ( jQuery.isFunction( params ) ) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {

				// Save response for use in complete callback
				response = arguments;

				self.html( selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

					// Otherwise use the full result
					responseText );

			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}

		return this;
	};




	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );




	jQuery.expr.pseudos.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};




	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
	}

	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};

			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;

			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}

			if ( jQuery.isFunction( options ) ) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}

			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}

			if ( "using" in options ) {
				options.using.call( elem, props );

			} else {
				curElem.css( props );
			}
		}
	};

	jQuery.fn.extend( {
		offset: function( options ) {

			// Preserve chaining for setter
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}

			var docElem, win, rect, doc,
				elem = this[ 0 ];

			if ( !elem ) {
				return;
			}

			// Support: IE <=11 only
			// Running getBoundingClientRect on a
			// disconnected node in IE throws an error
			if ( !elem.getClientRects().length ) {
				return { top: 0, left: 0 };
			}

			rect = elem.getBoundingClientRect();

			// Make sure element is not hidden (display: none)
			if ( rect.width || rect.height ) {
				doc = elem.ownerDocument;
				win = getWindow( doc );
				docElem = doc.documentElement;

				return {
					top: rect.top + win.pageYOffset - docElem.clientTop,
					left: rect.left + win.pageXOffset - docElem.clientLeft
				};
			}

			// Return zeros for disconnected and hidden elements (gh-2310)
			return rect;
		},

		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}

			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };

			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {

				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();

			} else {

				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				parentOffset = {
					top: parentOffset.top + jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ),
					left: parentOffset.left + jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true )
				};
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},

		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;

				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || documentElement;
			} );
		}
	} );

	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;

		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );

				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}

				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);

				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );

	// Support: Safari <=7 - 9.1, Chrome <=37 - 49
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );

					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );


	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {

			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

				return access( this, function( elem, type, value ) {
					var doc;

					if ( jQuery.isWindow( elem ) ) {

						// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
						return funcName.indexOf( "outer" ) === 0 ?
							elem[ "inner" + name ] :
							elem.document.documentElement[ "client" + name ];
					}

					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}

					return value === undefined ?

						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :

						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable );
			};
		} );
	} );


	jQuery.fn.extend( {

		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},

		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		}
	} );

	jQuery.parseJSON = JSON.parse;




	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}




	var

		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,

		// Map over the $ in case of overwrite
		_$ = window.$;

	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}





	return jQuery;
	} );


/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _radium = __webpack_require__(181);

	var _radium2 = _interopRequireDefault(_radium);

	var _veritasLogoWhite = __webpack_require__(243);

	var _veritasLogoWhite2 = _interopRequireDefault(_veritasLogoWhite);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Banner = function Banner() {
	  return _react2.default.createElement(
	    'div',
	    { style: banner },
	    _react2.default.createElement('div', { style: logo })
	  );
	};

	var banner = {
	  display: 'flex',
	  backgroundColor: '#131544',
	  height: '56px'
	};

	var logo = {
	  width: '300px',
	  backgroundImage: 'url(' + _veritasLogoWhite2.default + ')',
	  backgroundSize: 'contain',
	  backgroundRepeat: 'no-repeat'
	};

	exports.default = (0, _radium2.default)(Banner);

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _enhancer = __webpack_require__(182);

	var _enhancer2 = _interopRequireDefault(_enhancer);

	var _plugins = __webpack_require__(228);

	var _plugins2 = _interopRequireDefault(_plugins);

	var _style = __webpack_require__(239);

	var _style2 = _interopRequireDefault(_style);

	var _styleRoot = __webpack_require__(240);

	var _styleRoot2 = _interopRequireDefault(_styleRoot);

	var _getState = __webpack_require__(224);

	var _getState2 = _interopRequireDefault(_getState);

	var _keyframes = __webpack_require__(242);

	var _keyframes2 = _interopRequireDefault(_keyframes);

	var _resolveStyles = __webpack_require__(184);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function Radium(ComposedComponent) {
	  return (0, _enhancer2.default)(ComposedComponent);
	}

	Radium.Plugins = _plugins2.default;
	Radium.Style = _style2.default;
	Radium.StyleRoot = _styleRoot2.default;
	Radium.getState = _getState2.default;
	Radium.keyframes = _keyframes2.default;

	if (process.env.NODE_ENV !== 'production') {
	  Radium.TestMode = {
	    clearState: _resolveStyles.__clearStateForTests,
	    disable: _resolveStyles.__setTestMode.bind(null, false),
	    enable: _resolveStyles.__setTestMode.bind(null, true)
	  };
	}

	exports.default = Radium;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.default = enhanceWithRadium;

	var _react = __webpack_require__(1);

	var _styleKeeper = __webpack_require__(183);

	var _styleKeeper2 = _interopRequireDefault(_styleKeeper);

	var _resolveStyles = __webpack_require__(184);

	var _resolveStyles2 = _interopRequireDefault(_resolveStyles);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var KEYS_TO_IGNORE_WHEN_COPYING_PROPERTIES = ['arguments', 'callee', 'caller', 'length', 'name', 'prototype', 'type'];

	function copyProperties(source, target) {
	  Object.getOwnPropertyNames(source).forEach(function (key) {
	    if (KEYS_TO_IGNORE_WHEN_COPYING_PROPERTIES.indexOf(key) < 0 && !target.hasOwnProperty(key)) {
	      var descriptor = Object.getOwnPropertyDescriptor(source, key);
	      Object.defineProperty(target, key, descriptor);
	    }
	  });
	}

	function isStateless(component) {
	  return !component.render && !(component.prototype && component.prototype.render);
	}

	function enhanceWithRadium(configOrComposedComponent) {
	  var _class, _temp;

	  var config = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  if (typeof configOrComposedComponent !== 'function') {
	    var _ret = function () {
	      var newConfig = _extends({}, config, configOrComposedComponent);
	      return {
	        v: function v(configOrComponent) {
	          return enhanceWithRadium(configOrComponent, newConfig);
	        }
	      };
	    }();

	    if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
	  }

	  var component = configOrComposedComponent;
	  var ComposedComponent = component;

	  // Handle stateless components
	  if (isStateless(ComposedComponent)) {
	    ComposedComponent = function (_Component) {
	      _inherits(ComposedComponent, _Component);

	      function ComposedComponent() {
	        _classCallCheck(this, ComposedComponent);

	        return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	      }

	      ComposedComponent.prototype.render = function render() {
	        return component(this.props, this.context);
	      };

	      return ComposedComponent;
	    }(_react.Component);
	    ComposedComponent.displayName = component.displayName || component.name;
	  }

	  var RadiumEnhancer = (_temp = _class = function (_ComposedComponent) {
	    _inherits(RadiumEnhancer, _ComposedComponent);

	    function RadiumEnhancer() {
	      _classCallCheck(this, RadiumEnhancer);

	      var _this2 = _possibleConstructorReturn(this, _ComposedComponent.apply(this, arguments));

	      _this2.state = _this2.state || {};
	      _this2.state._radiumStyleState = {};
	      _this2._radiumIsMounted = true;
	      return _this2;
	    }

	    RadiumEnhancer.prototype.componentWillUnmount = function componentWillUnmount() {
	      if (_ComposedComponent.prototype.componentWillUnmount) {
	        _ComposedComponent.prototype.componentWillUnmount.call(this);
	      }

	      this._radiumIsMounted = false;

	      if (this._radiumMouseUpListener) {
	        this._radiumMouseUpListener.remove();
	      }

	      if (this._radiumMediaQueryListenersByQuery) {
	        Object.keys(this._radiumMediaQueryListenersByQuery).forEach(function (query) {
	          this._radiumMediaQueryListenersByQuery[query].remove();
	        }, this);
	      }
	    };

	    RadiumEnhancer.prototype.getChildContext = function getChildContext() {
	      var superChildContext = _ComposedComponent.prototype.getChildContext ? _ComposedComponent.prototype.getChildContext.call(this) : {};

	      if (!this.props.radiumConfig) {
	        return superChildContext;
	      }

	      var newContext = _extends({}, superChildContext);

	      if (this.props.radiumConfig) {
	        newContext._radiumConfig = this.props.radiumConfig;
	      }

	      return newContext;
	    };

	    RadiumEnhancer.prototype.render = function render() {
	      var renderedElement = _ComposedComponent.prototype.render.call(this);
	      var currentConfig = this.props.radiumConfig || this.context._radiumConfig || config;

	      if (config && currentConfig !== config) {
	        currentConfig = _extends({}, config, currentConfig);
	      }

	      return (0, _resolveStyles2.default)(this, renderedElement, currentConfig);
	    };

	    return RadiumEnhancer;
	  }(ComposedComponent), _class._isRadiumEnhanced = true, _temp);

	  // Class inheritance uses Object.create and because of __proto__ issues
	  // with IE <10 any static properties of the superclass aren't inherited and
	  // so need to be manually populated.
	  // See http://babeljs.io/docs/advanced/caveats/#classes-10-and-below-

	  copyProperties(component, RadiumEnhancer);

	  if (process.env.NODE_ENV !== 'production') {
	    // This also fixes React Hot Loader by exposing the original components top
	    // level prototype methods on the Radium enhanced prototype as discussed in
	    // https://github.com/FormidableLabs/radium/issues/219.
	    copyProperties(ComposedComponent.prototype, RadiumEnhancer.prototype);
	  }

	  if (RadiumEnhancer.propTypes && RadiumEnhancer.propTypes.style) {
	    RadiumEnhancer.propTypes = _extends({}, RadiumEnhancer.propTypes, {
	      style: _react.PropTypes.oneOfType([_react.PropTypes.array, _react.PropTypes.object])
	    });
	  }

	  RadiumEnhancer.displayName = component.displayName || component.name || 'Component';

	  RadiumEnhancer.contextTypes = _extends({}, RadiumEnhancer.contextTypes, {
	    _radiumConfig: _react.PropTypes.object,
	    _radiumStyleKeeper: _react.PropTypes.instanceOf(_styleKeeper2.default)
	  });

	  RadiumEnhancer.childContextTypes = _extends({}, RadiumEnhancer.childContextTypes, {
	    _radiumConfig: _react.PropTypes.object,
	    _radiumStyleKeeper: _react.PropTypes.instanceOf(_styleKeeper2.default)
	  });

	  return RadiumEnhancer;
	}
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 183 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var StyleKeeper = function () {
	  function StyleKeeper(userAgent) {
	    _classCallCheck(this, StyleKeeper);

	    this._userAgent = userAgent;
	    this._listeners = [];
	    this._cssSet = {};
	  }

	  StyleKeeper.prototype.subscribe = function subscribe(listener) {
	    var _this = this;

	    if (this._listeners.indexOf(listener) === -1) {
	      this._listeners.push(listener);
	    }

	    return {
	      // Must be fat arrow to capture `this`
	      remove: function remove() {
	        var listenerIndex = _this._listeners.indexOf(listener);
	        if (listenerIndex > -1) {
	          _this._listeners.splice(listenerIndex, 1);
	        }
	      }
	    };
	  };

	  StyleKeeper.prototype.addCSS = function addCSS(css) {
	    var _this2 = this;

	    if (!this._cssSet[css]) {
	      this._cssSet[css] = true;
	      this._emitChange();
	    }

	    return {
	      // Must be fat arrow to capture `this`
	      remove: function remove() {
	        delete _this2._cssSet[css];
	        _this2._emitChange();
	      }
	    };
	  };

	  StyleKeeper.prototype.getCSS = function getCSS() {
	    return Object.keys(this._cssSet).join('\n');
	  };

	  StyleKeeper.prototype._emitChange = function _emitChange() {
	    this._listeners.forEach(function (listener) {
	      return listener();
	    });
	  };

	  return StyleKeeper;
	}();

	exports.default = StyleKeeper;
	module.exports = exports['default'];

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _appendImportantToEachValue = __webpack_require__(185);

	var _appendImportantToEachValue2 = _interopRequireDefault(_appendImportantToEachValue);

	var _cssRuleSetToString = __webpack_require__(188);

	var _cssRuleSetToString2 = _interopRequireDefault(_cssRuleSetToString);

	var _getState = __webpack_require__(224);

	var _getState2 = _interopRequireDefault(_getState);

	var _getStateKey = __webpack_require__(225);

	var _getStateKey2 = _interopRequireDefault(_getStateKey);

	var _hash = __webpack_require__(226);

	var _hash2 = _interopRequireDefault(_hash);

	var _mergeStyles = __webpack_require__(227);

	var _plugins = __webpack_require__(228);

	var _plugins2 = _interopRequireDefault(_plugins);

	var _exenv = __webpack_require__(238);

	var _exenv2 = _interopRequireDefault(_exenv);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var DEFAULT_CONFIG = {
	  plugins: [_plugins2.default.mergeStyleArray, _plugins2.default.checkProps, _plugins2.default.resolveMediaQueries, _plugins2.default.resolveInteractionStyles, _plugins2.default.keyframes, _plugins2.default.visited, _plugins2.default.removeNestedStyles, _plugins2.default.prefix, _plugins2.default.checkProps]
	};

	// Gross
	var globalState = {};

	// Declare early for recursive helpers.
	var resolveStyles = null;

	var _shouldResolveStyles = function _shouldResolveStyles(component) {
	  return component.type && !component.type._isRadiumEnhanced;
	};

	var _resolveChildren = function _resolveChildren(_ref) {
	  var children = _ref.children;
	  var component = _ref.component;
	  var config = _ref.config;
	  var existingKeyMap = _ref.existingKeyMap;

	  if (!children) {
	    return children;
	  }

	  var childrenType = typeof children === 'undefined' ? 'undefined' : _typeof(children);

	  if (childrenType === 'string' || childrenType === 'number') {
	    // Don't do anything with a single primitive child
	    return children;
	  }

	  if (childrenType === 'function') {
	    // Wrap the function, resolving styles on the result
	    return function () {
	      var result = children.apply(this, arguments);
	      if (_react2.default.isValidElement(result)) {
	        return resolveStyles(component, result, config, existingKeyMap, true);
	      }
	      return result;
	    };
	  }

	  if (_react2.default.Children.count(children) === 1 && children.type) {
	    // If a React Element is an only child, don't wrap it in an array for
	    // React.Children.map() for React.Children.only() compatibility.
	    var onlyChild = _react2.default.Children.only(children);
	    return resolveStyles(component, onlyChild, config, existingKeyMap, true);
	  }

	  return _react2.default.Children.map(children, function (child) {
	    if (_react2.default.isValidElement(child)) {
	      return resolveStyles(component, child, config, existingKeyMap, true);
	    }

	    return child;
	  });
	};

	// Recurse over props, just like children
	var _resolveProps = function _resolveProps(_ref2) {
	  var component = _ref2.component;
	  var config = _ref2.config;
	  var existingKeyMap = _ref2.existingKeyMap;
	  var props = _ref2.props;

	  var newProps = props;

	  Object.keys(props).forEach(function (prop) {
	    // We already recurse over children above
	    if (prop === 'children') {
	      return;
	    }

	    var propValue = props[prop];
	    if (_react2.default.isValidElement(propValue)) {
	      newProps = _extends({}, newProps);
	      newProps[prop] = resolveStyles(component, propValue, config, existingKeyMap, true);
	    }
	  });

	  return newProps;
	};

	var _buildGetKey = function _buildGetKey(_ref3) {
	  var componentName = _ref3.componentName;
	  var existingKeyMap = _ref3.existingKeyMap;
	  var renderedElement = _ref3.renderedElement;

	  // We need a unique key to correlate state changes due to user interaction
	  // with the rendered element, so we know to apply the proper interactive
	  // styles.
	  var originalKey = typeof renderedElement.ref === 'string' ? renderedElement.ref : renderedElement.key;
	  var key = (0, _getStateKey2.default)(originalKey);

	  var alreadyGotKey = false;
	  var getKey = function getKey() {
	    if (alreadyGotKey) {
	      return key;
	    }

	    alreadyGotKey = true;

	    if (existingKeyMap[key]) {
	      var elementName = void 0;
	      if (typeof renderedElement.type === 'string') {
	        elementName = renderedElement.type;
	      } else if (renderedElement.type.constructor) {
	        elementName = renderedElement.type.constructor.displayName || renderedElement.type.constructor.name;
	      }

	      throw new Error('Radium requires each element with interactive styles to have a unique ' + 'key, set using either the ref or key prop. ' + (originalKey ? 'Key "' + originalKey + '" is a duplicate.' : 'Multiple elements have no key specified.') + ' ' + 'Component: "' + componentName + '". ' + (elementName ? 'Element: "' + elementName + '".' : ''));
	    }

	    existingKeyMap[key] = true;

	    return key;
	  };

	  return getKey;
	};

	var _setStyleState = function _setStyleState(component, key, stateKey, value) {
	  if (!component._radiumIsMounted) {
	    return;
	  }

	  var existing = component._lastRadiumState || component.state && component.state._radiumStyleState || {};

	  var state = { _radiumStyleState: _extends({}, existing) };
	  state._radiumStyleState[key] = _extends({}, state._radiumStyleState[key]);
	  state._radiumStyleState[key][stateKey] = value;

	  component._lastRadiumState = state._radiumStyleState;
	  component.setState(state);
	};

	var _runPlugins = function _runPlugins(_ref4) {
	  var component = _ref4.component;
	  var config = _ref4.config;
	  var existingKeyMap = _ref4.existingKeyMap;
	  var props = _ref4.props;
	  var renderedElement = _ref4.renderedElement;

	  // Don't run plugins if renderedElement is not a simple ReactDOMElement or has
	  // no style.
	  if (!_react2.default.isValidElement(renderedElement) || typeof renderedElement.type !== 'string' || !props.style) {
	    return props;
	  }

	  var newProps = props;

	  var plugins = config.plugins || DEFAULT_CONFIG.plugins;

	  var componentName = component.constructor.displayName || component.constructor.name;
	  var getKey = _buildGetKey({ renderedElement: renderedElement, existingKeyMap: existingKeyMap, componentName: componentName });
	  var getComponentField = function getComponentField(key) {
	    return component[key];
	  };
	  var getGlobalState = function getGlobalState(key) {
	    return globalState[key];
	  };
	  var componentGetState = function componentGetState(stateKey, elementKey) {
	    return (0, _getState2.default)(component.state, elementKey || getKey(), stateKey);
	  };
	  var setState = function setState(stateKey, value, elementKey) {
	    return _setStyleState(component, elementKey || getKey(), stateKey, value);
	  };

	  var addCSS = function addCSS(css) {
	    var styleKeeper = component._radiumStyleKeeper || component.context._radiumStyleKeeper;
	    if (!styleKeeper) {
	      if (__isTestModeEnabled) {
	        return {
	          remove: function remove() {}
	        };
	      }

	      throw new Error('To use plugins requiring `addCSS` (e.g. keyframes, media queries), ' + 'please wrap your application in the StyleRoot component. Component ' + 'name: `' + componentName + '`.');
	    }

	    return styleKeeper.addCSS(css);
	  };

	  var newStyle = props.style;

	  plugins.forEach(function (plugin) {
	    var result = plugin({
	      ExecutionEnvironment: _exenv2.default,
	      addCSS: addCSS,
	      appendImportantToEachValue: _appendImportantToEachValue2.default,
	      componentName: componentName,
	      config: config,
	      cssRuleSetToString: _cssRuleSetToString2.default,
	      getComponentField: getComponentField,
	      getGlobalState: getGlobalState,
	      getState: componentGetState,
	      hash: _hash2.default,
	      mergeStyles: _mergeStyles.mergeStyles,
	      props: newProps,
	      setState: setState,
	      isNestedStyle: _mergeStyles.isNestedStyle,
	      style: newStyle
	    }) || {};

	    newStyle = result.style || newStyle;

	    newProps = result.props && Object.keys(result.props).length ? _extends({}, newProps, result.props) : newProps;

	    var newComponentFields = result.componentFields || {};
	    Object.keys(newComponentFields).forEach(function (fieldName) {
	      component[fieldName] = newComponentFields[fieldName];
	    });

	    var newGlobalState = result.globalState || {};
	    Object.keys(newGlobalState).forEach(function (key) {
	      globalState[key] = newGlobalState[key];
	    });
	  });

	  if (newStyle !== props.style) {
	    newProps = _extends({}, newProps, { style: newStyle });
	  }

	  return newProps;
	};

	// Wrapper around React.cloneElement. To avoid processing the same element
	// twice, whenever we clone an element add a special prop to make sure we don't
	// process this element again.
	var _cloneElement = function _cloneElement(renderedElement, newProps, newChildren) {
	  // Only add flag if this is a normal DOM element
	  if (typeof renderedElement.type === 'string') {
	    newProps = _extends({}, newProps, { 'data-radium': true });
	  }

	  return _react2.default.cloneElement(renderedElement, newProps, newChildren);
	};

	//
	// The nucleus of Radium. resolveStyles is called on the rendered elements
	// before they are returned in render. It iterates over the elements and
	// children, rewriting props to add event handlers required to capture user
	// interactions (e.g. mouse over). It also replaces the style prop because it
	// adds in the various interaction styles (e.g. :hover).
	//
	resolveStyles = function resolveStyles(component, // ReactComponent, flow+eslint complaining
	renderedElement) {
	  var config = arguments.length <= 2 || arguments[2] === undefined ? DEFAULT_CONFIG : arguments[2];
	  var existingKeyMap = arguments[3];
	  var shouldCheckBeforeResolve = arguments.length <= 4 || arguments[4] === undefined ? false : arguments[4];
	  // ReactElement
	  existingKeyMap = existingKeyMap || {};
	  if (!renderedElement ||
	  // Bail if we've already processed this element. This ensures that only the
	  // owner of an element processes that element, since the owner's render
	  // function will be called first (which will always be the case, since you
	  // can't know what else to render until you render the parent component).
	  renderedElement.props && renderedElement.props['data-radium'] ||

	  // Bail if this element is a radium enhanced element, because if it is,
	  // then it will take care of resolving its own styles.
	  shouldCheckBeforeResolve && !_shouldResolveStyles(renderedElement)) {
	    return renderedElement;
	  }

	  var newChildren = _resolveChildren({
	    children: renderedElement.props.children,
	    component: component,
	    config: config,
	    existingKeyMap: existingKeyMap
	  });

	  var newProps = _resolveProps({
	    component: component,
	    config: config,
	    existingKeyMap: existingKeyMap,
	    props: renderedElement.props
	  });

	  newProps = _runPlugins({
	    component: component,
	    config: config,
	    existingKeyMap: existingKeyMap,
	    props: newProps,
	    renderedElement: renderedElement
	  });

	  // If nothing changed, don't bother cloning the element. Might be a bit
	  // wasteful, as we add the sentinal to stop double-processing when we clone.
	  // Assume benign double-processing is better than unneeded cloning.
	  if (newChildren === renderedElement.props.children && newProps === renderedElement.props) {
	    return renderedElement;
	  }

	  return _cloneElement(renderedElement, newProps !== renderedElement.props ? newProps : {}, newChildren);
	};

	// Only for use by tests
	var __isTestModeEnabled = false;
	if (process.env.NODE_ENV !== 'production') {
	  resolveStyles.__clearStateForTests = function () {
	    globalState = {};
	  };
	  resolveStyles.__setTestMode = function (isEnabled) {
	    __isTestModeEnabled = isEnabled;
	  };
	}

	exports.default = resolveStyles;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = appendImportantToEachValue;

	var _appendPxIfNeeded = __webpack_require__(186);

	var _appendPxIfNeeded2 = _interopRequireDefault(_appendPxIfNeeded);

	var _mapObject = __webpack_require__(187);

	var _mapObject2 = _interopRequireDefault(_mapObject);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function appendImportantToEachValue(style) {
	  return (0, _mapObject2.default)(style, function (result, key) {
	    return (0, _appendPxIfNeeded2.default)(key, style[key]) + ' !important';
	  });
	}
	module.exports = exports['default'];

/***/ },
/* 186 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = appendPxIfNeeded;


	// Copied from https://github.com/facebook/react/blob/
	// 102cd291899f9942a76c40a0e78920a6fe544dc1/
	// src/renderers/dom/shared/CSSProperty.js
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridRow: true,
	  gridColumn: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  stopOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	function appendPxIfNeeded(propertyName, value) {
	  var needsPxSuffix = !isUnitlessNumber[propertyName] && typeof value === 'number' && value !== 0;
	  return needsPxSuffix ? value + 'px' : value;
	}
	module.exports = exports['default'];

/***/ },
/* 187 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = mapObject;
	function mapObject(object, mapper) {
	  return Object.keys(object).reduce(function (result, key) {
	    result[key] = mapper(object[key], key);
	    return result;
	  }, {});
	}
	module.exports = exports["default"];

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = cssRuleSetToString;

	var _appendPxIfNeeded = __webpack_require__(186);

	var _appendPxIfNeeded2 = _interopRequireDefault(_appendPxIfNeeded);

	var _camelCasePropsToDashCase = __webpack_require__(189);

	var _camelCasePropsToDashCase2 = _interopRequireDefault(_camelCasePropsToDashCase);

	var _mapObject = __webpack_require__(187);

	var _mapObject2 = _interopRequireDefault(_mapObject);

	var _prefixer = __webpack_require__(190);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function createMarkupForStyles(style) {
	  return Object.keys(style).map(function (property) {
	    return property + ': ' + style[property] + ';';
	  }).join('\n');
	}

	function cssRuleSetToString(selector, rules, userAgent) {
	  if (!rules) {
	    return '';
	  }

	  var rulesWithPx = (0, _mapObject2.default)(rules, function (value, key) {
	    return (0, _appendPxIfNeeded2.default)(key, value);
	  });
	  var prefixedRules = (0, _prefixer.getPrefixedStyle)(rulesWithPx, userAgent);
	  var cssPrefixedRules = (0, _camelCasePropsToDashCase2.default)(prefixedRules);
	  var serializedRules = createMarkupForStyles(cssPrefixedRules);

	  return selector + '{' + serializedRules + '}';
	}
	module.exports = exports['default'];

/***/ },
/* 189 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});


	var _camelCaseRegex = /([a-z])?([A-Z])/g;

	var _camelCaseReplacer = function _camelCaseReplacer(match, p1, p2) {
	  return (p1 || '') + '-' + p2.toLowerCase();
	};

	var _camelCaseToDashCase = function _camelCaseToDashCase(s) {
	  return s.replace(_camelCaseRegex, _camelCaseReplacer);
	};

	var camelCasePropsToDashCase = function camelCasePropsToDashCase(prefixedStyle) {
	  // Since prefix is expected to work on inline style objects, we must
	  // translate the keys to dash case for rendering to CSS.
	  return Object.keys(prefixedStyle).reduce(function (result, key) {
	    var dashCaseKey = _camelCaseToDashCase(key);

	    // Fix IE vendor prefix
	    if (/^ms-/.test(dashCaseKey)) {
	      dashCaseKey = '-' + dashCaseKey;
	    }

	    result[dashCaseKey] = prefixedStyle[key];
	    return result;
	  }, {});
	};

	exports.default = camelCasePropsToDashCase;
	module.exports = exports['default'];

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; }; /**
	                                                                                                                                                                                                                                                   * Based on https://github.com/jsstyles/css-vendor, but without having to
	                                                                                                                                                                                                                                                   * convert between different cases all the time.
	                                                                                                                                                                                                                                                   *
	                                                                                                                                                                                                                                                   * 
	                                                                                                                                                                                                                                                   */

	exports.getPrefixedKeyframes = getPrefixedKeyframes;
	exports.getPrefixedStyle = getPrefixedStyle;

	var _inlineStylePrefixer = __webpack_require__(191);

	var _inlineStylePrefixer2 = _interopRequireDefault(_inlineStylePrefixer);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function transformValues(style) {
	  return Object.keys(style).reduce(function (newStyle, key) {
	    var value = style[key];
	    if (Array.isArray(value)) {
	      value = value.join(';' + key + ':');
	    } else if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && typeof value.toString === 'function') {
	      value = value.toString();
	    }

	    newStyle[key] = value;
	    return newStyle;
	  }, {});
	}

	var _hasWarnedAboutUserAgent = false;
	var _lastUserAgent = void 0;
	var _cachedPrefixer = void 0;

	function getPrefixer(userAgent) {
	  var actualUserAgent = userAgent || global && global.navigator && global.navigator.userAgent;

	  if (process.env.NODE_ENV !== 'production') {
	    if (!actualUserAgent && !_hasWarnedAboutUserAgent) {
	      /* eslint-disable no-console */
	      console.warn('Radium: userAgent should be supplied for server-side rendering. See ' + 'https://github.com/FormidableLabs/radium/tree/master/docs/api#radium ' + 'for more information.');
	      /* eslint-enable no-console */
	      _hasWarnedAboutUserAgent = true;
	    }
	  }

	  if (!_cachedPrefixer || actualUserAgent !== _lastUserAgent) {
	    if (actualUserAgent === 'all') {
	      _cachedPrefixer = {
	        prefix: _inlineStylePrefixer2.default.prefixAll,
	        prefixedKeyframes: 'keyframes'
	      };
	    } else {
	      _cachedPrefixer = new _inlineStylePrefixer2.default({ userAgent: actualUserAgent });
	    }
	    _lastUserAgent = actualUserAgent;
	  }
	  return _cachedPrefixer;
	}

	function getPrefixedKeyframes(userAgent) {
	  return getPrefixer(userAgent).prefixedKeyframes;
	}

	// Returns a new style object with vendor prefixes added to property names
	// and values.
	function getPrefixedStyle(style, userAgent) {
	  var styleWithFallbacks = transformValues(style);
	  var prefixer = getPrefixer(userAgent);
	  var prefixedStyle = prefixer.prefix(styleWithFallbacks);
	  return prefixedStyle;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(3)))

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _inlineStylePrefixAll = __webpack_require__(192);

	var _inlineStylePrefixAll2 = _interopRequireDefault(_inlineStylePrefixAll);

	var _utilsGetBrowserInformation = __webpack_require__(207);

	var _utilsGetBrowserInformation2 = _interopRequireDefault(_utilsGetBrowserInformation);

	var _utilsGetPrefixedKeyframes = __webpack_require__(210);

	var _utilsGetPrefixedKeyframes2 = _interopRequireDefault(_utilsGetPrefixedKeyframes);

	var _utilsCapitalizeString = __webpack_require__(211);

	var _utilsCapitalizeString2 = _interopRequireDefault(_utilsCapitalizeString);

	var _utilsAssign = __webpack_require__(212);

	var _utilsAssign2 = _interopRequireDefault(_utilsAssign);

	var _prefixProps = __webpack_require__(213);

	var _prefixProps2 = _interopRequireDefault(_prefixProps);

	var _pluginsCalc = __webpack_require__(214);

	var _pluginsCalc2 = _interopRequireDefault(_pluginsCalc);

	var _pluginsCursor = __webpack_require__(216);

	var _pluginsCursor2 = _interopRequireDefault(_pluginsCursor);

	var _pluginsFlex = __webpack_require__(217);

	var _pluginsFlex2 = _interopRequireDefault(_pluginsFlex);

	var _pluginsSizing = __webpack_require__(218);

	var _pluginsSizing2 = _interopRequireDefault(_pluginsSizing);

	var _pluginsGradient = __webpack_require__(219);

	var _pluginsGradient2 = _interopRequireDefault(_pluginsGradient);

	var _pluginsTransition = __webpack_require__(220);

	var _pluginsTransition2 = _interopRequireDefault(_pluginsTransition);

	// special flexbox specifications

	var _pluginsFlexboxIE = __webpack_require__(222);

	var _pluginsFlexboxIE2 = _interopRequireDefault(_pluginsFlexboxIE);

	var _pluginsFlexboxOld = __webpack_require__(223);

	var _pluginsFlexboxOld2 = _interopRequireDefault(_pluginsFlexboxOld);

	var plugins = [_pluginsCalc2['default'], _pluginsCursor2['default'], _pluginsSizing2['default'], _pluginsGradient2['default'], _pluginsTransition2['default'], _pluginsFlexboxIE2['default'], _pluginsFlexboxOld2['default'],
	// this must be run AFTER the flexbox specs
	_pluginsFlex2['default']];

	var Prefixer = (function () {
	  /**
	   * Instantiante a new prefixer
	   * @param {string} userAgent - userAgent to gather prefix information according to caniuse.com
	   * @param {string} keepUnprefixed - keeps unprefixed properties and values
	   */

	  function Prefixer() {
	    var _this = this;

	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    _classCallCheck(this, Prefixer);

	    var defaultUserAgent = typeof navigator !== 'undefined' ? navigator.userAgent : undefined;

	    this._userAgent = options.userAgent || defaultUserAgent;
	    this._keepUnprefixed = options.keepUnprefixed || false;

	    this._browserInfo = (0, _utilsGetBrowserInformation2['default'])(this._userAgent);

	    // Checks if the userAgent was resolved correctly
	    if (this._browserInfo && this._browserInfo.prefix) {
	      // set additional prefix information
	      this.cssPrefix = this._browserInfo.prefix.css;
	      this.jsPrefix = this._browserInfo.prefix.inline;
	      this.prefixedKeyframes = (0, _utilsGetPrefixedKeyframes2['default'])(this._browserInfo);
	    } else {
	      this._usePrefixAllFallback = true;
	      return false;
	    }

	    var data = this._browserInfo.browser && _prefixProps2['default'][this._browserInfo.browser];
	    if (data) {
	      this._requiresPrefix = Object.keys(data).filter(function (key) {
	        return data[key] >= _this._browserInfo.version;
	      }).reduce(function (result, name) {
	        result[name] = true;
	        return result;
	      }, {});
	      this._hasPropsRequiringPrefix = Object.keys(this._requiresPrefix).length > 0;
	    } else {
	      this._usePrefixAllFallback = true;
	    }
	  }

	  /**
	   * Returns a prefixed version of the style object
	   * @param {Object} styles - Style object that gets prefixed properties added
	   * @returns {Object} - Style object with prefixed properties and values
	   */

	  _createClass(Prefixer, [{
	    key: 'prefix',
	    value: function prefix(styles) {
	      var _this2 = this;

	      // use prefixAll as fallback if userAgent can not be resolved
	      if (this._usePrefixAllFallback) {
	        return (0, _inlineStylePrefixAll2['default'])(styles);
	      }

	      // only add prefixes if needed
	      if (!this._hasPropsRequiringPrefix) {
	        return styles;
	      }

	      styles = (0, _utilsAssign2['default'])({}, styles);

	      Object.keys(styles).forEach(function (property) {
	        var value = styles[property];
	        if (value instanceof Object) {
	          // recurse through nested style objects
	          styles[property] = _this2.prefix(value);
	        } else {
	          // add prefixes if needed
	          if (_this2._requiresPrefix[property]) {
	            styles[_this2.jsPrefix + (0, _utilsCapitalizeString2['default'])(property)] = value;
	            if (!_this2._keepUnprefixed) {
	              delete styles[property];
	            }
	          }

	          // resolve plugins
	          plugins.forEach(function (plugin) {
	            // generates a new plugin interface with current data
	            var resolvedStyles = plugin({
	              property: property,
	              value: value,
	              styles: styles,
	              browserInfo: _this2._browserInfo,
	              prefix: {
	                js: _this2.jsPrefix,
	                css: _this2.cssPrefix,
	                keyframes: _this2.prefixedKeyframes
	              },
	              keepUnprefixed: _this2._keepUnprefixed,
	              requiresPrefix: _this2._requiresPrefix
	            });
	            (0, _utilsAssign2['default'])(styles, resolvedStyles);
	          });
	        }
	      });

	      return styles;
	    }

	    /**
	     * Returns a prefixed version of the style object using all vendor prefixes
	     * @param {Object} styles - Style object that gets prefixed properties added
	     * @returns {Object} - Style object with prefixed properties and values
	     */
	  }], [{
	    key: 'prefixAll',
	    value: function prefixAll(styles) {
	      return (0, _inlineStylePrefixAll2['default'])(styles);
	    }
	  }]);

	  return Prefixer;
	})();

	exports['default'] = Prefixer;
	module.exports = exports['default'];

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = prefixAll;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _prefixProps = __webpack_require__(193);

	var _prefixProps2 = _interopRequireDefault(_prefixProps);

	var _utilsCapitalizeString = __webpack_require__(194);

	var _utilsCapitalizeString2 = _interopRequireDefault(_utilsCapitalizeString);

	var _utilsAssign = __webpack_require__(195);

	var _utilsAssign2 = _interopRequireDefault(_utilsAssign);

	var _pluginsCalc = __webpack_require__(196);

	var _pluginsCalc2 = _interopRequireDefault(_pluginsCalc);

	var _pluginsCursor = __webpack_require__(200);

	var _pluginsCursor2 = _interopRequireDefault(_pluginsCursor);

	var _pluginsFlex = __webpack_require__(201);

	var _pluginsFlex2 = _interopRequireDefault(_pluginsFlex);

	var _pluginsSizing = __webpack_require__(202);

	var _pluginsSizing2 = _interopRequireDefault(_pluginsSizing);

	var _pluginsGradient = __webpack_require__(203);

	var _pluginsGradient2 = _interopRequireDefault(_pluginsGradient);

	var _pluginsTransition = __webpack_require__(204);

	var _pluginsTransition2 = _interopRequireDefault(_pluginsTransition);

	// special flexbox specifications

	var _pluginsFlexboxIE = __webpack_require__(205);

	var _pluginsFlexboxIE2 = _interopRequireDefault(_pluginsFlexboxIE);

	var _pluginsFlexboxOld = __webpack_require__(206);

	var _pluginsFlexboxOld2 = _interopRequireDefault(_pluginsFlexboxOld);

	var plugins = [_pluginsCalc2['default'], _pluginsCursor2['default'], _pluginsSizing2['default'], _pluginsGradient2['default'], _pluginsTransition2['default'], _pluginsFlexboxIE2['default'], _pluginsFlexboxOld2['default'], _pluginsFlex2['default']];

	/**
	 * Returns a prefixed version of the style object using all vendor prefixes
	 * @param {Object} styles - Style object that gets prefixed properties added
	 * @returns {Object} - Style object with prefixed properties and values
	 */

	function prefixAll(styles) {
	  return Object.keys(styles).reduce(function (prefixedStyles, property) {
	    var value = styles[property];
	    if (value instanceof Object && !Array.isArray(value)) {
	      // recurse through nested style objects
	      prefixedStyles[property] = prefixAll(value);
	    } else {
	      Object.keys(_prefixProps2['default']).forEach(function (prefix) {
	        var properties = _prefixProps2['default'][prefix];
	        // add prefixes if needed
	        if (properties[property]) {
	          prefixedStyles[prefix + (0, _utilsCapitalizeString2['default'])(property)] = value;
	        }
	      });

	      // resolve every special plugins
	      plugins.forEach(function (plugin) {
	        return (0, _utilsAssign2['default'])(prefixedStyles, plugin(property, value));
	      });
	    }

	    return prefixedStyles;
	  }, styles);
	}

	module.exports = exports['default'];

/***/ },
/* 193 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = { "Webkit": { "transform": true, "transformOrigin": true, "transformOriginX": true, "transformOriginY": true, "backfaceVisibility": true, "perspective": true, "perspectiveOrigin": true, "transformStyle": true, "transformOriginZ": true, "animation": true, "animationDelay": true, "animationDirection": true, "animationFillMode": true, "animationDuration": true, "animationIterationCount": true, "animationName": true, "animationPlayState": true, "animationTimingFunction": true, "appearance": true, "userSelect": true, "fontKerning": true, "textEmphasisPosition": true, "textEmphasis": true, "textEmphasisStyle": true, "textEmphasisColor": true, "boxDecorationBreak": true, "clipPath": true, "maskImage": true, "maskMode": true, "maskRepeat": true, "maskPosition": true, "maskClip": true, "maskOrigin": true, "maskSize": true, "maskComposite": true, "mask": true, "maskBorderSource": true, "maskBorderMode": true, "maskBorderSlice": true, "maskBorderWidth": true, "maskBorderOutset": true, "maskBorderRepeat": true, "maskBorder": true, "maskType": true, "textDecorationStyle": true, "textDecorationSkip": true, "textDecorationLine": true, "textDecorationColor": true, "filter": true, "fontFeatureSettings": true, "breakAfter": true, "breakBefore": true, "breakInside": true, "columnCount": true, "columnFill": true, "columnGap": true, "columnRule": true, "columnRuleColor": true, "columnRuleStyle": true, "columnRuleWidth": true, "columns": true, "columnSpan": true, "columnWidth": true, "flex": true, "flexBasis": true, "flexDirection": true, "flexGrow": true, "flexFlow": true, "flexShrink": true, "flexWrap": true, "alignContent": true, "alignItems": true, "alignSelf": true, "justifyContent": true, "order": true, "transition": true, "transitionDelay": true, "transitionDuration": true, "transitionProperty": true, "transitionTimingFunction": true, "backdropFilter": true, "scrollSnapType": true, "scrollSnapPointsX": true, "scrollSnapPointsY": true, "scrollSnapDestination": true, "scrollSnapCoordinate": true, "shapeImageThreshold": true, "shapeImageMargin": true, "shapeImageOutside": true, "hyphens": true, "flowInto": true, "flowFrom": true, "regionFragment": true, "textSizeAdjust": true, "borderImage": true, "borderImageOutset": true, "borderImageRepeat": true, "borderImageSlice": true, "borderImageSource": true, "borderImageWidth": true, "tabSize": true, "objectFit": true, "objectPosition": true }, "Moz": { "appearance": true, "userSelect": true, "boxSizing": true, "textAlignLast": true, "textDecorationStyle": true, "textDecorationSkip": true, "textDecorationLine": true, "textDecorationColor": true, "tabSize": true, "hyphens": true, "fontFeatureSettings": true, "breakAfter": true, "breakBefore": true, "breakInside": true, "columnCount": true, "columnFill": true, "columnGap": true, "columnRule": true, "columnRuleColor": true, "columnRuleStyle": true, "columnRuleWidth": true, "columns": true, "columnSpan": true, "columnWidth": true }, "ms": { "flex": true, "flexBasis": false, "flexDirection": true, "flexGrow": false, "flexFlow": true, "flexShrink": false, "flexWrap": true, "alignContent": false, "alignItems": false, "alignSelf": false, "justifyContent": false, "order": false, "transform": true, "transformOrigin": true, "transformOriginX": true, "transformOriginY": true, "userSelect": true, "wrapFlow": true, "wrapThrough": true, "wrapMargin": true, "scrollSnapType": true, "scrollSnapPointsX": true, "scrollSnapPointsY": true, "scrollSnapDestination": true, "scrollSnapCoordinate": true, "touchAction": true, "hyphens": true, "flowInto": true, "flowFrom": true, "breakBefore": true, "breakAfter": true, "breakInside": true, "regionFragment": true, "gridTemplateColumns": true, "gridTemplateRows": true, "gridTemplateAreas": true, "gridTemplate": true, "gridAutoColumns": true, "gridAutoRows": true, "gridAutoFlow": true, "grid": true, "gridRowStart": true, "gridColumnStart": true, "gridRowEnd": true, "gridRow": true, "gridColumn": true, "gridColumnEnd": true, "gridColumnGap": true, "gridRowGap": true, "gridArea": true, "gridGap": true, "textSizeAdjust": true } };
	module.exports = exports["default"];

/***/ },
/* 194 */
/***/ function(module, exports) {

	// helper to capitalize strings
	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports["default"] = function (str) {
	  return str.charAt(0).toUpperCase() + str.slice(1);
	};

	module.exports = exports["default"];

/***/ },
/* 195 */
/***/ function(module, exports) {

	// leight polyfill for Object.assign
	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports["default"] = function (base) {
	  var extend = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	  return Object.keys(extend).reduce(function (out, key) {
	    base[key] = extend[key];
	    return out;
	  }, {});
	};

	module.exports = exports["default"];

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = calc;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _utilsJoinPrefixedRules = __webpack_require__(197);

	var _utilsJoinPrefixedRules2 = _interopRequireDefault(_utilsJoinPrefixedRules);

	var _utilsIsPrefixedValue = __webpack_require__(199);

	var _utilsIsPrefixedValue2 = _interopRequireDefault(_utilsIsPrefixedValue);

	function calc(property, value) {
	  if (typeof value === 'string' && value.indexOf('calc(') > -1) {
	    if ((0, _utilsIsPrefixedValue2['default'])(value)) return;

	    return (0, _utilsJoinPrefixedRules2['default'])(property, value, function (prefix, value) {
	      return value.replace(/calc\(/g, prefix + 'calc(');
	    });
	  }
	}

	module.exports = exports['default'];

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var _camelToDashCase = __webpack_require__(198);

	var _camelToDashCase2 = _interopRequireDefault(_camelToDashCase);

	// returns a style object with a single concated prefixed value string

	exports['default'] = function (property, value) {
	  var replacer = arguments.length <= 2 || arguments[2] === undefined ? function (prefix, value) {
	    return prefix + value;
	  } : arguments[2];
	  return (function () {
	    return _defineProperty({}, property, ['-webkit-', '-moz-', ''].map(function (prefix) {
	      return replacer(prefix, value);
	    }));
	  })();
	};

	module.exports = exports['default'];

/***/ },
/* 198 */
/***/ function(module, exports) {

	/**
	 * Converts a camel-case string to a dash-case string
	 * @param {string} str - str that gets converted to dash-case
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function (str) {
	  return str.replace(/([a-z]|^)([A-Z])/g, function (match, p1, p2) {
	    return p1 + '-' + p2.toLowerCase();
	  }).replace('ms-', '-ms-');
	};

	module.exports = exports['default'];

/***/ },
/* 199 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function (value) {
	  if (Array.isArray(value)) value = value.join(',');

	  return value.match(/-webkit-|-moz-|-ms-/) !== null;
	};

	module.exports = exports['default'];

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = cursor;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _utilsJoinPrefixedRules = __webpack_require__(197);

	var _utilsJoinPrefixedRules2 = _interopRequireDefault(_utilsJoinPrefixedRules);

	var values = {
	  'zoom-in': true,
	  'zoom-out': true,
	  'grab': true,
	  'grabbing': true
	};

	function cursor(property, value) {
	  if (property === 'cursor' && values[value]) {
	    return (0, _utilsJoinPrefixedRules2['default'])(property, value);
	  }
	}

	module.exports = exports['default'];

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = flex;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _utilsCamelToDashCase = __webpack_require__(198);

	var _utilsCamelToDashCase2 = _interopRequireDefault(_utilsCamelToDashCase);

	var values = { flex: true, 'inline-flex': true };

	function flex(property, value) {
	  if (property === 'display' && values[value]) {
	    return {
	      display: ['-webkit-box', '-moz-box', '-ms-' + value + 'box', '-webkit-' + value, value]
	    };
	  }
	}

	module.exports = exports['default'];

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = sizing;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _utilsJoinPrefixedRules = __webpack_require__(197);

	var _utilsJoinPrefixedRules2 = _interopRequireDefault(_utilsJoinPrefixedRules);

	var properties = {
	  maxHeight: true,
	  maxWidth: true,
	  width: true,
	  height: true,
	  columnWidth: true,
	  minWidth: true,
	  minHeight: true
	};
	var values = {
	  'min-content': true,
	  'max-content': true,
	  'fill-available': true,
	  'fit-content': true,
	  'contain-floats': true
	};

	function sizing(property, value) {
	  if (properties[property] && values[value]) {
	    return (0, _utilsJoinPrefixedRules2['default'])(property, value);
	  }
	}

	module.exports = exports['default'];

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = gradient;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _utilsJoinPrefixedRules = __webpack_require__(197);

	var _utilsJoinPrefixedRules2 = _interopRequireDefault(_utilsJoinPrefixedRules);

	var _utilsIsPrefixedValue = __webpack_require__(199);

	var _utilsIsPrefixedValue2 = _interopRequireDefault(_utilsIsPrefixedValue);

	var values = /linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/;

	function gradient(property, value) {
	  if (typeof value === 'string' && value.match(values) !== null) {
	    if ((0, _utilsIsPrefixedValue2['default'])(value)) return;

	    return (0, _utilsJoinPrefixedRules2['default'])(property, value);
	  }
	}

	module.exports = exports['default'];

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = transition;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var _utilsCamelToDashCase = __webpack_require__(198);

	var _utilsCamelToDashCase2 = _interopRequireDefault(_utilsCamelToDashCase);

	var _utilsCapitalizeString = __webpack_require__(194);

	var _utilsCapitalizeString2 = _interopRequireDefault(_utilsCapitalizeString);

	var _utilsIsPrefixedValue = __webpack_require__(199);

	var _utilsIsPrefixedValue2 = _interopRequireDefault(_utilsIsPrefixedValue);

	var _prefixProps = __webpack_require__(193);

	var _prefixProps2 = _interopRequireDefault(_prefixProps);

	var properties = {
	  transition: true,
	  transitionProperty: true,
	  WebkitTransition: true,
	  WebkitTransitionProperty: true
	};

	function transition(property, value) {
	  // also check for already prefixed transitions
	  if (typeof value === 'string' && properties[property]) {
	    var _ref2;

	    var outputValue = prefixValue(value);
	    var webkitOutput = outputValue.split(',').filter(function (value) {
	      return value.match(/-moz-|-ms-/) === null;
	    }).join(',');

	    // if the property is already prefixed
	    if (property.indexOf('Webkit') > -1) {
	      return _defineProperty({}, property, webkitOutput);
	    }

	    return _ref2 = {}, _defineProperty(_ref2, 'Webkit' + (0, _utilsCapitalizeString2['default'])(property), webkitOutput), _defineProperty(_ref2, property, outputValue), _ref2;
	  }
	}

	function prefixValue(value) {
	  if ((0, _utilsIsPrefixedValue2['default'])(value)) {
	    return value;
	  }

	  // only split multi values, not cubic beziers
	  var multipleValues = value.split(/,(?![^()]*(?:\([^()]*\))?\))/g);

	  // iterate each single value and check for transitioned properties
	  // that need to be prefixed as well
	  multipleValues.forEach(function (val, index) {
	    multipleValues[index] = Object.keys(_prefixProps2['default']).reduce(function (out, prefix) {
	      var dashCasePrefix = '-' + prefix.toLowerCase() + '-';

	      Object.keys(_prefixProps2['default'][prefix]).forEach(function (prop) {
	        var dashCaseProperty = (0, _utilsCamelToDashCase2['default'])(prop);

	        if (val.indexOf(dashCaseProperty) > -1) {
	          // join all prefixes and create a new value
	          out = val.replace(dashCaseProperty, dashCasePrefix + dashCaseProperty) + ',' + out;
	        }
	      });
	      return out;
	    }, val);
	  });

	  return multipleValues.join(',');
	}
	module.exports = exports['default'];

/***/ },
/* 205 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = flexboxIE;

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var alternativeValues = {
	  'space-around': 'distribute',
	  'space-between': 'justify',
	  'flex-start': 'start',
	  'flex-end': 'end'
	};
	var alternativeProps = {
	  alignContent: 'msFlexLinePack',
	  alignSelf: 'msFlexItemAlign',
	  alignItems: 'msFlexAlign',
	  justifyContent: 'msFlexPack',
	  order: 'msFlexOrder',
	  flexGrow: 'msFlexPositive',
	  flexShrink: 'msFlexNegative',
	  flexBasis: 'msPreferredSize'
	};

	function flexboxIE(property, value) {
	  if (alternativeProps[property]) {
	    return _defineProperty({}, alternativeProps[property], alternativeValues[value] || value);
	  }
	}

	module.exports = exports['default'];

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = flexboxOld;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var _utilsCamelToDashCase = __webpack_require__(198);

	var _utilsCamelToDashCase2 = _interopRequireDefault(_utilsCamelToDashCase);

	var alternativeValues = {
	  'space-around': 'justify',
	  'space-between': 'justify',
	  'flex-start': 'start',
	  'flex-end': 'end',
	  'wrap-reverse': 'multiple',
	  wrap: 'multiple'
	};

	var alternativeProps = {
	  alignItems: 'WebkitBoxAlign',
	  justifyContent: 'WebkitBoxPack',
	  flexWrap: 'WebkitBoxLines'
	};

	function flexboxOld(property, value) {
	  if (property === 'flexDirection') {
	    return {
	      WebkitBoxOrient: value.indexOf('column') > -1 ? 'vertical' : 'horizontal',
	      WebkitBoxDirection: value.indexOf('reverse') > -1 ? 'reverse' : 'normal'
	    };
	  }
	  if (alternativeProps[property]) {
	    return _defineProperty({}, alternativeProps[property], alternativeValues[value] || value);
	  }
	}

	module.exports = exports['default'];

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _bowser = __webpack_require__(208);

	var _bowser2 = _interopRequireDefault(_bowser);

	var vendorPrefixes = {
	  Webkit: ['chrome', 'safari', 'ios', 'android', 'phantom', 'opera', 'webos', 'blackberry', 'bada', 'tizen'],
	  Moz: ['firefox', 'seamonkey', 'sailfish'],
	  ms: ['msie', 'msedge']
	};

	var browsers = {
	  chrome: [['chrome']],
	  safari: [['safari']],
	  firefox: [['firefox']],
	  ie: [['msie']],
	  edge: [['msedge']],
	  opera: [['opera']],
	  ios_saf: [['ios', 'mobile'], ['ios', 'tablet']],
	  ie_mob: [['windowsphone', 'mobile', 'msie'], ['windowsphone', 'tablet', 'msie'], ['windowsphone', 'mobile', 'msedge'], ['windowsphone', 'tablet', 'msedge']],
	  op_mini: [['opera', 'mobile'], ['opera', 'tablet']],
	  and_uc: [['android', 'mobile'], ['android', 'tablet']],
	  android: [['android', 'mobile'], ['android', 'tablet']]
	};

	/**
	 * Uses bowser to get default browser information such as version and name
	 * Evaluates bowser info and adds vendorPrefix information
	 * @param {string} userAgent - userAgent that gets evaluated
	 */

	exports['default'] = function (userAgent) {
	  if (!userAgent) {
	    return false;
	  }

	  var info = _bowser2['default']._detect(userAgent);

	  Object.keys(vendorPrefixes).forEach(function (prefix) {
	    vendorPrefixes[prefix].forEach(function (browser) {
	      if (info[browser]) {
	        info.prefix = {
	          inline: prefix,
	          css: '-' + prefix.toLowerCase() + '-'
	        };
	      }
	    });
	  });

	  var name = '';
	  Object.keys(browsers).forEach(function (browser) {
	    browsers[browser].forEach(function (condition) {
	      var match = 0;
	      condition.forEach(function (single) {
	        if (info[single]) {
	          match += 1;
	        }
	      });
	      if (condition.length === match) {
	        name = browser;
	      }
	    });
	  });

	  info.browser = name;
	  // For cordova IOS 8 the version is missing, set truncated osversion to prevent NaN
	  info.version = info.version ? parseFloat(info.version) : parseInt(parseFloat(info.osversion), 10);

	  // seperate native android chrome
	  // https://github.com/rofrischmann/inline-style-prefixer/issues/45
	  if (info.browser === 'android' && info.chrome && info.version > 37) {
	    info.browser = 'and_chr';
	  }
	  info.version = parseFloat(info.version);
	  info.osversion = parseFloat(info.osversion);
	  // For android < 4.4 we want to check the osversion
	  // not the chrome version, see issue #26
	  // https://github.com/rofrischmann/inline-style-prefixer/issues/26
	  if (info.browser === 'android' && info.osversion < 5) {
	    info.version = info.osversion;
	  }

	  return info;
	};

	module.exports = exports['default'];

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Bowser - a browser detector
	 * https://github.com/ded/bowser
	 * MIT License | (c) Dustin Diaz 2015
	 */

	!function (root, name, definition) {
	  if (typeof module != 'undefined' && module.exports) module.exports = definition()
	  else if (true) __webpack_require__(209)(name, definition)
	  else root[name] = definition()
	}(this, 'bowser', function () {
	  /**
	    * See useragents.js for examples of navigator.userAgent
	    */

	  var t = true

	  function detect(ua) {

	    function getFirstMatch(regex) {
	      var match = ua.match(regex);
	      return (match && match.length > 1 && match[1]) || '';
	    }

	    function getSecondMatch(regex) {
	      var match = ua.match(regex);
	      return (match && match.length > 1 && match[2]) || '';
	    }

	    var iosdevice = getFirstMatch(/(ipod|iphone|ipad)/i).toLowerCase()
	      , likeAndroid = /like android/i.test(ua)
	      , android = !likeAndroid && /android/i.test(ua)
	      , nexusMobile = /nexus\s*[0-6]\s*/i.test(ua)
	      , nexusTablet = !nexusMobile && /nexus\s*[0-9]+/i.test(ua)
	      , chromeos = /CrOS/.test(ua)
	      , silk = /silk/i.test(ua)
	      , sailfish = /sailfish/i.test(ua)
	      , tizen = /tizen/i.test(ua)
	      , webos = /(web|hpw)os/i.test(ua)
	      , windowsphone = /windows phone/i.test(ua)
	      , samsungBrowser = /SamsungBrowser/i.test(ua)
	      , windows = !windowsphone && /windows/i.test(ua)
	      , mac = !iosdevice && !silk && /macintosh/i.test(ua)
	      , linux = !android && !sailfish && !tizen && !webos && /linux/i.test(ua)
	      , edgeVersion = getFirstMatch(/edge\/(\d+(\.\d+)?)/i)
	      , versionIdentifier = getFirstMatch(/version\/(\d+(\.\d+)?)/i)
	      , tablet = /tablet/i.test(ua)
	      , mobile = !tablet && /[^-]mobi/i.test(ua)
	      , xbox = /xbox/i.test(ua)
	      , result

	    if (/opera/i.test(ua)) {
	      //  an old Opera
	      result = {
	        name: 'Opera'
	      , opera: t
	      , version: versionIdentifier || getFirstMatch(/(?:opera|opr|opios)[\s\/](\d+(\.\d+)?)/i)
	      }
	    } else if (/opr|opios/i.test(ua)) {
	      // a new Opera
	      result = {
	        name: 'Opera'
	        , opera: t
	        , version: getFirstMatch(/(?:opr|opios)[\s\/](\d+(\.\d+)?)/i) || versionIdentifier
	      }
	    }
	    else if (/SamsungBrowser/i.test(ua)) {
	      result = {
	        name: 'Samsung Internet for Android'
	        , samsungBrowser: t
	        , version: versionIdentifier || getFirstMatch(/(?:SamsungBrowser)[\s\/](\d+(\.\d+)?)/i)
	      }
	    }
	    else if (/coast/i.test(ua)) {
	      result = {
	        name: 'Opera Coast'
	        , coast: t
	        , version: versionIdentifier || getFirstMatch(/(?:coast)[\s\/](\d+(\.\d+)?)/i)
	      }
	    }
	    else if (/yabrowser/i.test(ua)) {
	      result = {
	        name: 'Yandex Browser'
	      , yandexbrowser: t
	      , version: versionIdentifier || getFirstMatch(/(?:yabrowser)[\s\/](\d+(\.\d+)?)/i)
	      }
	    }
	    else if (/ucbrowser/i.test(ua)) {
	      result = {
	          name: 'UC Browser'
	        , ucbrowser: t
	        , version: getFirstMatch(/(?:ucbrowser)[\s\/](\d+(?:\.\d+)+)/i)
	      }
	    }
	    else if (/mxios/i.test(ua)) {
	      result = {
	        name: 'Maxthon'
	        , maxthon: t
	        , version: getFirstMatch(/(?:mxios)[\s\/](\d+(?:\.\d+)+)/i)
	      }
	    }
	    else if (/epiphany/i.test(ua)) {
	      result = {
	        name: 'Epiphany'
	        , epiphany: t
	        , version: getFirstMatch(/(?:epiphany)[\s\/](\d+(?:\.\d+)+)/i)
	      }
	    }
	    else if (/puffin/i.test(ua)) {
	      result = {
	        name: 'Puffin'
	        , puffin: t
	        , version: getFirstMatch(/(?:puffin)[\s\/](\d+(?:\.\d+)?)/i)
	      }
	    }
	    else if (/sleipnir/i.test(ua)) {
	      result = {
	        name: 'Sleipnir'
	        , sleipnir: t
	        , version: getFirstMatch(/(?:sleipnir)[\s\/](\d+(?:\.\d+)+)/i)
	      }
	    }
	    else if (/k-meleon/i.test(ua)) {
	      result = {
	        name: 'K-Meleon'
	        , kMeleon: t
	        , version: getFirstMatch(/(?:k-meleon)[\s\/](\d+(?:\.\d+)+)/i)
	      }
	    }
	    else if (windowsphone) {
	      result = {
	        name: 'Windows Phone'
	      , windowsphone: t
	      }
	      if (edgeVersion) {
	        result.msedge = t
	        result.version = edgeVersion
	      }
	      else {
	        result.msie = t
	        result.version = getFirstMatch(/iemobile\/(\d+(\.\d+)?)/i)
	      }
	    }
	    else if (/msie|trident/i.test(ua)) {
	      result = {
	        name: 'Internet Explorer'
	      , msie: t
	      , version: getFirstMatch(/(?:msie |rv:)(\d+(\.\d+)?)/i)
	      }
	    } else if (chromeos) {
	      result = {
	        name: 'Chrome'
	      , chromeos: t
	      , chromeBook: t
	      , chrome: t
	      , version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
	      }
	    } else if (/chrome.+? edge/i.test(ua)) {
	      result = {
	        name: 'Microsoft Edge'
	      , msedge: t
	      , version: edgeVersion
	      }
	    }
	    else if (/vivaldi/i.test(ua)) {
	      result = {
	        name: 'Vivaldi'
	        , vivaldi: t
	        , version: getFirstMatch(/vivaldi\/(\d+(\.\d+)?)/i) || versionIdentifier
	      }
	    }
	    else if (sailfish) {
	      result = {
	        name: 'Sailfish'
	      , sailfish: t
	      , version: getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i)
	      }
	    }
	    else if (/seamonkey\//i.test(ua)) {
	      result = {
	        name: 'SeaMonkey'
	      , seamonkey: t
	      , version: getFirstMatch(/seamonkey\/(\d+(\.\d+)?)/i)
	      }
	    }
	    else if (/firefox|iceweasel|fxios/i.test(ua)) {
	      result = {
	        name: 'Firefox'
	      , firefox: t
	      , version: getFirstMatch(/(?:firefox|iceweasel|fxios)[ \/](\d+(\.\d+)?)/i)
	      }
	      if (/\((mobile|tablet);[^\)]*rv:[\d\.]+\)/i.test(ua)) {
	        result.firefoxos = t
	      }
	    }
	    else if (silk) {
	      result =  {
	        name: 'Amazon Silk'
	      , silk: t
	      , version : getFirstMatch(/silk\/(\d+(\.\d+)?)/i)
	      }
	    }
	    else if (/phantom/i.test(ua)) {
	      result = {
	        name: 'PhantomJS'
	      , phantom: t
	      , version: getFirstMatch(/phantomjs\/(\d+(\.\d+)?)/i)
	      }
	    }
	    else if (/slimerjs/i.test(ua)) {
	      result = {
	        name: 'SlimerJS'
	        , slimer: t
	        , version: getFirstMatch(/slimerjs\/(\d+(\.\d+)?)/i)
	      }
	    }
	    else if (/blackberry|\bbb\d+/i.test(ua) || /rim\stablet/i.test(ua)) {
	      result = {
	        name: 'BlackBerry'
	      , blackberry: t
	      , version: versionIdentifier || getFirstMatch(/blackberry[\d]+\/(\d+(\.\d+)?)/i)
	      }
	    }
	    else if (webos) {
	      result = {
	        name: 'WebOS'
	      , webos: t
	      , version: versionIdentifier || getFirstMatch(/w(?:eb)?osbrowser\/(\d+(\.\d+)?)/i)
	      };
	      /touchpad\//i.test(ua) && (result.touchpad = t)
	    }
	    else if (/bada/i.test(ua)) {
	      result = {
	        name: 'Bada'
	      , bada: t
	      , version: getFirstMatch(/dolfin\/(\d+(\.\d+)?)/i)
	      };
	    }
	    else if (tizen) {
	      result = {
	        name: 'Tizen'
	      , tizen: t
	      , version: getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.\d+)?)/i) || versionIdentifier
	      };
	    }
	    else if (/qupzilla/i.test(ua)) {
	      result = {
	        name: 'QupZilla'
	        , qupzilla: t
	        , version: getFirstMatch(/(?:qupzilla)[\s\/](\d+(?:\.\d+)+)/i) || versionIdentifier
	      }
	    }
	    else if (/chromium/i.test(ua)) {
	      result = {
	        name: 'Chromium'
	        , chromium: t
	        , version: getFirstMatch(/(?:chromium)[\s\/](\d+(?:\.\d+)?)/i) || versionIdentifier
	      }
	    }
	    else if (/chrome|crios|crmo/i.test(ua)) {
	      result = {
	        name: 'Chrome'
	        , chrome: t
	        , version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
	      }
	    }
	    else if (android) {
	      result = {
	        name: 'Android'
	        , version: versionIdentifier
	      }
	    }
	    else if (/safari|applewebkit/i.test(ua)) {
	      result = {
	        name: 'Safari'
	      , safari: t
	      }
	      if (versionIdentifier) {
	        result.version = versionIdentifier
	      }
	    }
	    else if (iosdevice) {
	      result = {
	        name : iosdevice == 'iphone' ? 'iPhone' : iosdevice == 'ipad' ? 'iPad' : 'iPod'
	      }
	      // WTF: version is not part of user agent in web apps
	      if (versionIdentifier) {
	        result.version = versionIdentifier
	      }
	    }
	    else if(/googlebot/i.test(ua)) {
	      result = {
	        name: 'Googlebot'
	      , googlebot: t
	      , version: getFirstMatch(/googlebot\/(\d+(\.\d+))/i) || versionIdentifier
	      }
	    }
	    else {
	      result = {
	        name: getFirstMatch(/^(.*)\/(.*) /),
	        version: getSecondMatch(/^(.*)\/(.*) /)
	     };
	   }

	    // set webkit or gecko flag for browsers based on these engines
	    if (!result.msedge && /(apple)?webkit/i.test(ua)) {
	      if (/(apple)?webkit\/537\.36/i.test(ua)) {
	        result.name = result.name || "Blink"
	        result.blink = t
	      } else {
	        result.name = result.name || "Webkit"
	        result.webkit = t
	      }
	      if (!result.version && versionIdentifier) {
	        result.version = versionIdentifier
	      }
	    } else if (!result.opera && /gecko\//i.test(ua)) {
	      result.name = result.name || "Gecko"
	      result.gecko = t
	      result.version = result.version || getFirstMatch(/gecko\/(\d+(\.\d+)?)/i)
	    }

	    // set OS flags for platforms that have multiple browsers
	    if (!result.windowsphone && !result.msedge && (android || result.silk)) {
	      result.android = t
	    } else if (!result.windowsphone && !result.msedge && iosdevice) {
	      result[iosdevice] = t
	      result.ios = t
	    } else if (mac) {
	      result.mac = t
	    } else if (xbox) {
	      result.xbox = t
	    } else if (windows) {
	      result.windows = t
	    } else if (linux) {
	      result.linux = t
	    }

	    // OS version extraction
	    var osVersion = '';
	    if (result.windowsphone) {
	      osVersion = getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i);
	    } else if (iosdevice) {
	      osVersion = getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i);
	      osVersion = osVersion.replace(/[_\s]/g, '.');
	    } else if (android) {
	      osVersion = getFirstMatch(/android[ \/-](\d+(\.\d+)*)/i);
	    } else if (result.webos) {
	      osVersion = getFirstMatch(/(?:web|hpw)os\/(\d+(\.\d+)*)/i);
	    } else if (result.blackberry) {
	      osVersion = getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i);
	    } else if (result.bada) {
	      osVersion = getFirstMatch(/bada\/(\d+(\.\d+)*)/i);
	    } else if (result.tizen) {
	      osVersion = getFirstMatch(/tizen[\/\s](\d+(\.\d+)*)/i);
	    }
	    if (osVersion) {
	      result.osversion = osVersion;
	    }

	    // device type extraction
	    var osMajorVersion = osVersion.split('.')[0];
	    if (
	         tablet
	      || nexusTablet
	      || iosdevice == 'ipad'
	      || (android && (osMajorVersion == 3 || (osMajorVersion >= 4 && !mobile)))
	      || result.silk
	    ) {
	      result.tablet = t
	    } else if (
	         mobile
	      || iosdevice == 'iphone'
	      || iosdevice == 'ipod'
	      || android
	      || nexusMobile
	      || result.blackberry
	      || result.webos
	      || result.bada
	    ) {
	      result.mobile = t
	    }

	    // Graded Browser Support
	    // http://developer.yahoo.com/yui/articles/gbs
	    if (result.msedge ||
	        (result.msie && result.version >= 10) ||
	        (result.yandexbrowser && result.version >= 15) ||
			    (result.vivaldi && result.version >= 1.0) ||
	        (result.chrome && result.version >= 20) ||
	        (result.samsungBrowser && result.version >= 4) ||
	        (result.firefox && result.version >= 20.0) ||
	        (result.safari && result.version >= 6) ||
	        (result.opera && result.version >= 10.0) ||
	        (result.ios && result.osversion && result.osversion.split(".")[0] >= 6) ||
	        (result.blackberry && result.version >= 10.1)
	        || (result.chromium && result.version >= 20)
	        ) {
	      result.a = t;
	    }
	    else if ((result.msie && result.version < 10) ||
	        (result.chrome && result.version < 20) ||
	        (result.firefox && result.version < 20.0) ||
	        (result.safari && result.version < 6) ||
	        (result.opera && result.version < 10.0) ||
	        (result.ios && result.osversion && result.osversion.split(".")[0] < 6)
	        || (result.chromium && result.version < 20)
	        ) {
	      result.c = t
	    } else result.x = t

	    return result
	  }

	  var bowser = detect(typeof navigator !== 'undefined' ? navigator.userAgent || '' : '')

	  bowser.test = function (browserList) {
	    for (var i = 0; i < browserList.length; ++i) {
	      var browserItem = browserList[i];
	      if (typeof browserItem=== 'string') {
	        if (browserItem in bowser) {
	          return true;
	        }
	      }
	    }
	    return false;
	  }

	  /**
	   * Get version precisions count
	   *
	   * @example
	   *   getVersionPrecision("1.10.3") // 3
	   *
	   * @param  {string} version
	   * @return {number}
	   */
	  function getVersionPrecision(version) {
	    return version.split(".").length;
	  }

	  /**
	   * Array::map polyfill
	   *
	   * @param  {Array} arr
	   * @param  {Function} iterator
	   * @return {Array}
	   */
	  function map(arr, iterator) {
	    var result = [], i;
	    if (Array.prototype.map) {
	      return Array.prototype.map.call(arr, iterator);
	    }
	    for (i = 0; i < arr.length; i++) {
	      result.push(iterator(arr[i]));
	    }
	    return result;
	  }

	  /**
	   * Calculate browser version weight
	   *
	   * @example
	   *   compareVersions(['1.10.2.1',  '1.8.2.1.90'])    // 1
	   *   compareVersions(['1.010.2.1', '1.09.2.1.90']);  // 1
	   *   compareVersions(['1.10.2.1',  '1.10.2.1']);     // 0
	   *   compareVersions(['1.10.2.1',  '1.0800.2']);     // -1
	   *
	   * @param  {Array<String>} versions versions to compare
	   * @return {Number} comparison result
	   */
	  function compareVersions(versions) {
	    // 1) get common precision for both versions, for example for "10.0" and "9" it should be 2
	    var precision = Math.max(getVersionPrecision(versions[0]), getVersionPrecision(versions[1]));
	    var chunks = map(versions, function (version) {
	      var delta = precision - getVersionPrecision(version);

	      // 2) "9" -> "9.0" (for precision = 2)
	      version = version + new Array(delta + 1).join(".0");

	      // 3) "9.0" -> ["000000000"", "000000009"]
	      return map(version.split("."), function (chunk) {
	        return new Array(20 - chunk.length).join("0") + chunk;
	      }).reverse();
	    });

	    // iterate in reverse order by reversed chunks array
	    while (--precision >= 0) {
	      // 4) compare: "000000009" > "000000010" = false (but "9" > "10" = true)
	      if (chunks[0][precision] > chunks[1][precision]) {
	        return 1;
	      }
	      else if (chunks[0][precision] === chunks[1][precision]) {
	        if (precision === 0) {
	          // all version chunks are same
	          return 0;
	        }
	      }
	      else {
	        return -1;
	      }
	    }
	  }

	  /**
	   * Check if browser is unsupported
	   *
	   * @example
	   *   bowser.isUnsupportedBrowser({
	   *     msie: "10",
	   *     firefox: "23",
	   *     chrome: "29",
	   *     safari: "5.1",
	   *     opera: "16",
	   *     phantom: "534"
	   *   });
	   *
	   * @param  {Object}  minVersions map of minimal version to browser
	   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map
	   * @param  {String}  [ua] user agent string
	   * @return {Boolean}
	   */
	  function isUnsupportedBrowser(minVersions, strictMode, ua) {
	    var _bowser = bowser;

	    // make strictMode param optional with ua param usage
	    if (typeof strictMode === 'string') {
	      ua = strictMode;
	      strictMode = void(0);
	    }

	    if (strictMode === void(0)) {
	      strictMode = false;
	    }
	    if (ua) {
	      _bowser = detect(ua);
	    }

	    var version = "" + _bowser.version;
	    for (var browser in minVersions) {
	      if (minVersions.hasOwnProperty(browser)) {
	        if (_bowser[browser]) {
	          if (typeof minVersions[browser] !== 'string') {
	            throw new Error('Browser version in the minVersion map should be a string: ' + browser + ': ' + String(minVersions));
	          }

	          // browser version and min supported version.
	          return compareVersions([version, minVersions[browser]]) < 0;
	        }
	      }
	    }

	    return strictMode; // not found
	  }

	  /**
	   * Check if browser is supported
	   *
	   * @param  {Object} minVersions map of minimal version to browser
	   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map
	   * @param  {String}  [ua] user agent string
	   * @return {Boolean}
	   */
	  function check(minVersions, strictMode, ua) {
	    return !isUnsupportedBrowser(minVersions, strictMode, ua);
	  }

	  bowser.isUnsupportedBrowser = isUnsupportedBrowser;
	  bowser.compareVersions = compareVersions;
	  bowser.check = check;

	  /*
	   * Set our detect method to the main bowser object so we can
	   * reuse it to test other user agents.
	   * This is needed to implement future tests.
	   */
	  bowser._detect = detect;

	  return bowser
	});


/***/ },
/* 209 */
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },
/* 210 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function (_ref) {
	  var browser = _ref.browser;
	  var version = _ref.version;
	  var prefix = _ref.prefix;

	  var prefixedKeyframes = 'keyframes';

	  if (browser === 'chrome' && version < 43 || (browser === 'safari' || browser === 'ios_saf') && version < 9 || browser === 'opera' && version < 30 || browser === 'android' && version <= 4.4 || browser === 'and_uc') {
	    prefixedKeyframes = prefix.css + prefixedKeyframes;
	  }
	  return prefixedKeyframes;
	};

	module.exports = exports['default'];

/***/ },
/* 211 */
/***/ function(module, exports) {

	// helper to capitalize strings
	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports["default"] = function (str) {
	  return str.charAt(0).toUpperCase() + str.slice(1);
	};

	module.exports = exports["default"];

/***/ },
/* 212 */
/***/ function(module, exports) {

	// leight polyfill for Object.assign
	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports["default"] = function (base) {
	  var extend = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  Object.keys(extend).forEach(function (key) {
	    return base[key] = extend[key];
	  });
	  return base;
	};

	module.exports = exports["default"];

/***/ },
/* 213 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = { "chrome": { "transform": 35, "transformOrigin": 35, "transformOriginX": 35, "transformOriginY": 35, "backfaceVisibility": 35, "perspective": 35, "perspectiveOrigin": 35, "transformStyle": 35, "transformOriginZ": 35, "animation": 42, "animationDelay": 42, "animationDirection": 42, "animationFillMode": 42, "animationDuration": 42, "animationIterationCount": 42, "animationName": 42, "animationPlayState": 42, "animationTimingFunction": 42, "appearance": 52, "userSelect": 52, "fontKerning": 32, "textEmphasisPosition": 52, "textEmphasis": 52, "textEmphasisStyle": 52, "textEmphasisColor": 52, "boxDecorationBreak": 52, "clipPath": 52, "maskImage": 52, "maskMode": 52, "maskRepeat": 52, "maskPosition": 52, "maskClip": 52, "maskOrigin": 52, "maskSize": 52, "maskComposite": 52, "mask": 52, "maskBorderSource": 52, "maskBorderMode": 52, "maskBorderSlice": 52, "maskBorderWidth": 52, "maskBorderOutset": 52, "maskBorderRepeat": 52, "maskBorder": 52, "maskType": 52, "textDecorationStyle": 52, "textDecorationSkip": 52, "textDecorationLine": 52, "textDecorationColor": 52, "filter": 52, "fontFeatureSettings": 47, "breakAfter": 52, "breakBefore": 52, "breakInside": 52, "columnCount": 52, "columnFill": 52, "columnGap": 52, "columnRule": 52, "columnRuleColor": 52, "columnRuleStyle": 52, "columnRuleWidth": 52, "columns": 52, "columnSpan": 52, "columnWidth": 52 }, "safari": { "flex": 8, "flexBasis": 8, "flexDirection": 8, "flexGrow": 8, "flexFlow": 8, "flexShrink": 8, "flexWrap": 8, "alignContent": 8, "alignItems": 8, "alignSelf": 8, "justifyContent": 8, "order": 8, "transition": 6, "transitionDelay": 6, "transitionDuration": 6, "transitionProperty": 6, "transitionTimingFunction": 6, "transform": 8, "transformOrigin": 8, "transformOriginX": 8, "transformOriginY": 8, "backfaceVisibility": 8, "perspective": 8, "perspectiveOrigin": 8, "transformStyle": 8, "transformOriginZ": 8, "animation": 8, "animationDelay": 8, "animationDirection": 8, "animationFillMode": 8, "animationDuration": 8, "animationIterationCount": 8, "animationName": 8, "animationPlayState": 8, "animationTimingFunction": 8, "appearance": 9.1, "userSelect": 9.1, "backdropFilter": 9.1, "fontKerning": 9.1, "scrollSnapType": 9.1, "scrollSnapPointsX": 9.1, "scrollSnapPointsY": 9.1, "scrollSnapDestination": 9.1, "scrollSnapCoordinate": 9.1, "textEmphasisPosition": 7, "textEmphasis": 7, "textEmphasisStyle": 7, "textEmphasisColor": 7, "boxDecorationBreak": 9.1, "clipPath": 9.1, "maskImage": 9.1, "maskMode": 9.1, "maskRepeat": 9.1, "maskPosition": 9.1, "maskClip": 9.1, "maskOrigin": 9.1, "maskSize": 9.1, "maskComposite": 9.1, "mask": 9.1, "maskBorderSource": 9.1, "maskBorderMode": 9.1, "maskBorderSlice": 9.1, "maskBorderWidth": 9.1, "maskBorderOutset": 9.1, "maskBorderRepeat": 9.1, "maskBorder": 9.1, "maskType": 9.1, "textDecorationStyle": 9.1, "textDecorationSkip": 9.1, "textDecorationLine": 9.1, "textDecorationColor": 9.1, "shapeImageThreshold": 9.1, "shapeImageMargin": 9.1, "shapeImageOutside": 9.1, "filter": 9, "hyphens": 9.1, "flowInto": 9.1, "flowFrom": 9.1, "breakBefore": 8, "breakAfter": 8, "breakInside": 8, "regionFragment": 9.1, "columnCount": 8, "columnFill": 8, "columnGap": 8, "columnRule": 8, "columnRuleColor": 8, "columnRuleStyle": 8, "columnRuleWidth": 8, "columns": 8, "columnSpan": 8, "columnWidth": 8 }, "firefox": { "appearance": 47, "userSelect": 47, "boxSizing": 28, "textAlignLast": 47, "textDecorationStyle": 35, "textDecorationSkip": 35, "textDecorationLine": 35, "textDecorationColor": 35, "tabSize": 47, "hyphens": 42, "fontFeatureSettings": 33, "breakAfter": 47, "breakBefore": 47, "breakInside": 47, "columnCount": 47, "columnFill": 47, "columnGap": 47, "columnRule": 47, "columnRuleColor": 47, "columnRuleStyle": 47, "columnRuleWidth": 47, "columns": 47, "columnSpan": 47, "columnWidth": 47 }, "opera": { "flex": 16, "flexBasis": 16, "flexDirection": 16, "flexGrow": 16, "flexFlow": 16, "flexShrink": 16, "flexWrap": 16, "alignContent": 16, "alignItems": 16, "alignSelf": 16, "justifyContent": 16, "order": 16, "transform": 22, "transformOrigin": 22, "transformOriginX": 22, "transformOriginY": 22, "backfaceVisibility": 22, "perspective": 22, "perspectiveOrigin": 22, "transformStyle": 22, "transformOriginZ": 22, "animation": 29, "animationDelay": 29, "animationDirection": 29, "animationFillMode": 29, "animationDuration": 29, "animationIterationCount": 29, "animationName": 29, "animationPlayState": 29, "animationTimingFunction": 29, "appearance": 37, "userSelect": 37, "fontKerning": 19, "textEmphasisPosition": 37, "textEmphasis": 37, "textEmphasisStyle": 37, "textEmphasisColor": 37, "boxDecorationBreak": 37, "clipPath": 37, "maskImage": 37, "maskMode": 37, "maskRepeat": 37, "maskPosition": 37, "maskClip": 37, "maskOrigin": 37, "maskSize": 37, "maskComposite": 37, "mask": 37, "maskBorderSource": 37, "maskBorderMode": 37, "maskBorderSlice": 37, "maskBorderWidth": 37, "maskBorderOutset": 37, "maskBorderRepeat": 37, "maskBorder": 37, "maskType": 37, "filter": 37, "fontFeatureSettings": 37, "breakAfter": 37, "breakBefore": 37, "breakInside": 37, "columnCount": 37, "columnFill": 37, "columnGap": 37, "columnRule": 37, "columnRuleColor": 37, "columnRuleStyle": 37, "columnRuleWidth": 37, "columns": 37, "columnSpan": 37, "columnWidth": 37 }, "ie": { "gridTemplateRows": 11, "breakInside": 11, "transformOriginY": 9, "gridRowStart": 11, "gridColumn": 11, "regionFragment": 11, "breakBefore": 11, "userSelect": 11, "gridColumnEnd": 11, "gridRowEnd": 11, "gridTemplateColumns": 11, "gridColumnStart": 11, "gridArea": 11, "flexDirection": 10, "gridRowGap": 11, "gridTemplateAreas": 11, "gridAutoRows": 11, "gridRow": 11, "scrollSnapDestination": 11, "scrollSnapPointsY": 11, "touchAction": 10, "gridGap": 11, "gridColumnGap": 11, "wrapFlow": 11, "scrollSnapPointsX": 11, "flowFrom": 11, "transform": 9, "breakAfter": 11, "wrapMargin": 11, "scrollSnapCoordinate": 11, "flexWrap": 10, "scrollSnapType": 11, "flex": 10, "wrapThrough": 11, "gridAutoColumns": 11, "flexFlow": 10, "gridTemplate": 11, "hyphens": 11, "grid": 11, "transformOriginX": 9, "flowInto": 11, "transformOrigin": 9, "gridAutoFlow": 11, "textSizeAdjust": 11 }, "edge": { "userSelect": 14, "wrapFlow": 14, "wrapThrough": 14, "wrapMargin": 14, "scrollSnapType": 14, "scrollSnapPointsX": 14, "scrollSnapPointsY": 14, "scrollSnapDestination": 14, "scrollSnapCoordinate": 14, "hyphens": 14, "flowInto": 14, "flowFrom": 14, "breakBefore": 14, "breakAfter": 14, "breakInside": 14, "regionFragment": 14, "gridTemplateColumns": 14, "gridTemplateRows": 14, "gridTemplateAreas": 14, "gridTemplate": 14, "gridAutoColumns": 14, "gridAutoRows": 14, "gridAutoFlow": 14, "grid": 14, "gridRowStart": 14, "gridColumnStart": 14, "gridRowEnd": 14, "gridRow": 14, "gridColumn": 14, "gridColumnEnd": 14, "gridColumnGap": 14, "gridRowGap": 14, "gridArea": 14, "gridGap": 14 }, "ios_saf": { "flex": 8.1, "flexBasis": 8.1, "flexDirection": 8.1, "flexGrow": 8.1, "flexFlow": 8.1, "flexShrink": 8.1, "flexWrap": 8.1, "alignContent": 8.1, "alignItems": 8.1, "alignSelf": 8.1, "justifyContent": 8.1, "order": 8.1, "transition": 6, "transitionDelay": 6, "transitionDuration": 6, "transitionProperty": 6, "transitionTimingFunction": 6, "transform": 8.1, "transformOrigin": 8.1, "transformOriginX": 8.1, "transformOriginY": 8.1, "backfaceVisibility": 8.1, "perspective": 8.1, "perspectiveOrigin": 8.1, "transformStyle": 8.1, "transformOriginZ": 8.1, "animation": 8.1, "animationDelay": 8.1, "animationDirection": 8.1, "animationFillMode": 8.1, "animationDuration": 8.1, "animationIterationCount": 8.1, "animationName": 8.1, "animationPlayState": 8.1, "animationTimingFunction": 8.1, "appearance": 9.3, "userSelect": 9.3, "backdropFilter": 9.3, "fontKerning": 9.3, "scrollSnapType": 9.3, "scrollSnapPointsX": 9.3, "scrollSnapPointsY": 9.3, "scrollSnapDestination": 9.3, "scrollSnapCoordinate": 9.3, "boxDecorationBreak": 9.3, "clipPath": 9.3, "maskImage": 9.3, "maskMode": 9.3, "maskRepeat": 9.3, "maskPosition": 9.3, "maskClip": 9.3, "maskOrigin": 9.3, "maskSize": 9.3, "maskComposite": 9.3, "mask": 9.3, "maskBorderSource": 9.3, "maskBorderMode": 9.3, "maskBorderSlice": 9.3, "maskBorderWidth": 9.3, "maskBorderOutset": 9.3, "maskBorderRepeat": 9.3, "maskBorder": 9.3, "maskType": 9.3, "textSizeAdjust": 9.3, "textDecorationStyle": 9.3, "textDecorationSkip": 9.3, "textDecorationLine": 9.3, "textDecorationColor": 9.3, "shapeImageThreshold": 9.3, "shapeImageMargin": 9.3, "shapeImageOutside": 9.3, "filter": 9, "hyphens": 9.3, "flowInto": 9.3, "flowFrom": 9.3, "breakBefore": 8.1, "breakAfter": 8.1, "breakInside": 8.1, "regionFragment": 9.3, "columnCount": 8.1, "columnFill": 8.1, "columnGap": 8.1, "columnRule": 8.1, "columnRuleColor": 8.1, "columnRuleStyle": 8.1, "columnRuleWidth": 8.1, "columns": 8.1, "columnSpan": 8.1, "columnWidth": 8.1 }, "android": { "borderImage": 4.2, "borderImageOutset": 4.2, "borderImageRepeat": 4.2, "borderImageSlice": 4.2, "borderImageSource": 4.2, "borderImageWidth": 4.2, "flex": 4.2, "flexBasis": 4.2, "flexDirection": 4.2, "flexGrow": 4.2, "flexFlow": 4.2, "flexShrink": 4.2, "flexWrap": 4.2, "alignContent": 4.2, "alignItems": 4.2, "alignSelf": 4.2, "justifyContent": 4.2, "order": 4.2, "transition": 4.2, "transitionDelay": 4.2, "transitionDuration": 4.2, "transitionProperty": 4.2, "transitionTimingFunction": 4.2, "transform": 4.4, "transformOrigin": 4.4, "transformOriginX": 4.4, "transformOriginY": 4.4, "backfaceVisibility": 4.4, "perspective": 4.4, "perspectiveOrigin": 4.4, "transformStyle": 4.4, "transformOriginZ": 4.4, "animation": 4.4, "animationDelay": 4.4, "animationDirection": 4.4, "animationFillMode": 4.4, "animationDuration": 4.4, "animationIterationCount": 4.4, "animationName": 4.4, "animationPlayState": 4.4, "animationTimingFunction": 4.4, "appearance": 47, "userSelect": 47, "fontKerning": 4.4, "textEmphasisPosition": 47, "textEmphasis": 47, "textEmphasisStyle": 47, "textEmphasisColor": 47, "boxDecorationBreak": 47, "clipPath": 47, "maskImage": 47, "maskMode": 47, "maskRepeat": 47, "maskPosition": 47, "maskClip": 47, "maskOrigin": 47, "maskSize": 47, "maskComposite": 47, "mask": 47, "maskBorderSource": 47, "maskBorderMode": 47, "maskBorderSlice": 47, "maskBorderWidth": 47, "maskBorderOutset": 47, "maskBorderRepeat": 47, "maskBorder": 47, "maskType": 47, "filter": 47, "fontFeatureSettings": 47, "breakAfter": 47, "breakBefore": 47, "breakInside": 47, "columnCount": 47, "columnFill": 47, "columnGap": 47, "columnRule": 47, "columnRuleColor": 47, "columnRuleStyle": 47, "columnRuleWidth": 47, "columns": 47, "columnSpan": 47, "columnWidth": 47 }, "and_chr": { "appearance": 47, "userSelect": 47, "textEmphasisPosition": 47, "textEmphasis": 47, "textEmphasisStyle": 47, "textEmphasisColor": 47, "boxDecorationBreak": 47, "clipPath": 47, "maskImage": 47, "maskMode": 47, "maskRepeat": 47, "maskPosition": 47, "maskClip": 47, "maskOrigin": 47, "maskSize": 47, "maskComposite": 47, "mask": 47, "maskBorderSource": 47, "maskBorderMode": 47, "maskBorderSlice": 47, "maskBorderWidth": 47, "maskBorderOutset": 47, "maskBorderRepeat": 47, "maskBorder": 47, "maskType": 47, "textDecorationStyle": 47, "textDecorationSkip": 47, "textDecorationLine": 47, "textDecorationColor": 47, "filter": 47, "fontFeatureSettings": 47, "breakAfter": 47, "breakBefore": 47, "breakInside": 47, "columnCount": 47, "columnFill": 47, "columnGap": 47, "columnRule": 47, "columnRuleColor": 47, "columnRuleStyle": 47, "columnRuleWidth": 47, "columns": 47, "columnSpan": 47, "columnWidth": 47 }, "and_uc": { "flex": 9.9, "flexBasis": 9.9, "flexDirection": 9.9, "flexGrow": 9.9, "flexFlow": 9.9, "flexShrink": 9.9, "flexWrap": 9.9, "alignContent": 9.9, "alignItems": 9.9, "alignSelf": 9.9, "justifyContent": 9.9, "order": 9.9, "transition": 9.9, "transitionDelay": 9.9, "transitionDuration": 9.9, "transitionProperty": 9.9, "transitionTimingFunction": 9.9, "transform": 9.9, "transformOrigin": 9.9, "transformOriginX": 9.9, "transformOriginY": 9.9, "backfaceVisibility": 9.9, "perspective": 9.9, "perspectiveOrigin": 9.9, "transformStyle": 9.9, "transformOriginZ": 9.9, "animation": 9.9, "animationDelay": 9.9, "animationDirection": 9.9, "animationFillMode": 9.9, "animationDuration": 9.9, "animationIterationCount": 9.9, "animationName": 9.9, "animationPlayState": 9.9, "animationTimingFunction": 9.9, "appearance": 9.9, "userSelect": 9.9, "fontKerning": 9.9, "textEmphasisPosition": 9.9, "textEmphasis": 9.9, "textEmphasisStyle": 9.9, "textEmphasisColor": 9.9, "maskImage": 9.9, "maskMode": 9.9, "maskRepeat": 9.9, "maskPosition": 9.9, "maskClip": 9.9, "maskOrigin": 9.9, "maskSize": 9.9, "maskComposite": 9.9, "mask": 9.9, "maskBorderSource": 9.9, "maskBorderMode": 9.9, "maskBorderSlice": 9.9, "maskBorderWidth": 9.9, "maskBorderOutset": 9.9, "maskBorderRepeat": 9.9, "maskBorder": 9.9, "maskType": 9.9, "textSizeAdjust": 9.9, "filter": 9.9, "hyphens": 9.9, "flowInto": 9.9, "flowFrom": 9.9, "breakBefore": 9.9, "breakAfter": 9.9, "breakInside": 9.9, "regionFragment": 9.9, "fontFeatureSettings": 9.9, "columnCount": 9.9, "columnFill": 9.9, "columnGap": 9.9, "columnRule": 9.9, "columnRuleColor": 9.9, "columnRuleStyle": 9.9, "columnRuleWidth": 9.9, "columns": 9.9, "columnSpan": 9.9, "columnWidth": 9.9 }, "op_mini": { "borderImage": 5, "borderImageOutset": 5, "borderImageRepeat": 5, "borderImageSlice": 5, "borderImageSource": 5, "borderImageWidth": 5, "tabSize": 5, "objectFit": 5, "objectPosition": 5 } };
	module.exports = exports["default"];

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = calc;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var _utilsCamelToDashCase = __webpack_require__(215);

	var _utilsCamelToDashCase2 = _interopRequireDefault(_utilsCamelToDashCase);

	function calc(_ref2) {
	  var property = _ref2.property;
	  var value = _ref2.value;
	  var _ref2$browserInfo = _ref2.browserInfo;
	  var browser = _ref2$browserInfo.browser;
	  var version = _ref2$browserInfo.version;
	  var css = _ref2.prefix.css;
	  var keepUnprefixed = _ref2.keepUnprefixed;

	  if (typeof value === 'string' && value.indexOf('calc(') > -1 && (browser === 'firefox' && version < 15 || browser === 'chrome' && version < 25 || browser === 'safari' && version < 6.1 || browser === 'ios_saf' && version < 7)) {
	    return _defineProperty({}, property, value.replace(/calc\(/g, css + 'calc(') + (keepUnprefixed ? ';' + (0, _utilsCamelToDashCase2['default'])(property) + ':' + value : ''));
	  }
	}

	module.exports = exports['default'];

/***/ },
/* 215 */
/***/ function(module, exports) {

	/**
	 * Converts a camel-case string to a dash-case string
	 * @param {string} str - str that gets converted to dash-case
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function (str) {
	  return str.replace(/([a-z]|^)([A-Z])/g, function (match, p1, p2) {
	    return p1 + '-' + p2.toLowerCase();
	  }).replace('ms-', '-ms-');
	};

	module.exports = exports['default'];

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = cursor;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _utilsCamelToDashCase = __webpack_require__(215);

	var _utilsCamelToDashCase2 = _interopRequireDefault(_utilsCamelToDashCase);

	var values = {
	  'zoom-in': true,
	  'zoom-out': true,
	  'grab': true,
	  'grabbing': true
	};

	function cursor(_ref) {
	  var property = _ref.property;
	  var value = _ref.value;
	  var _ref$browserInfo = _ref.browserInfo;
	  var browser = _ref$browserInfo.browser;
	  var version = _ref$browserInfo.version;
	  var css = _ref.prefix.css;
	  var keepUnprefixed = _ref.keepUnprefixed;

	  if (property === 'cursor' && values[value] && (browser === 'firefox' && version < 24 || browser === 'chrome' && version < 37 || browser === 'safari' && version < 9 || browser === 'opera' && version < 24)) {
	    return {
	      cursor: css + value + (keepUnprefixed ? ';' + (0, _utilsCamelToDashCase2['default'])(property) + ':' + value : '')
	    };
	  }
	}

	module.exports = exports['default'];

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = flex;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _utilsCamelToDashCase = __webpack_require__(215);

	var _utilsCamelToDashCase2 = _interopRequireDefault(_utilsCamelToDashCase);

	var values = {
	  'flex': true,
	  'inline-flex': true
	};

	function flex(_ref) {
	  var property = _ref.property;
	  var value = _ref.value;
	  var _ref$browserInfo = _ref.browserInfo;
	  var browser = _ref$browserInfo.browser;
	  var version = _ref$browserInfo.version;
	  var css = _ref.prefix.css;
	  var keepUnprefixed = _ref.keepUnprefixed;

	  if (property === 'display' && values[value] && (browser === 'chrome' && version < 29 && version > 20 || (browser === 'safari' || browser === 'ios_saf') && version < 9 && version > 6 || browser === 'opera' && (version == 15 || version == 16))) {
	    return {
	      display: css + value + (keepUnprefixed ? ';' + (0, _utilsCamelToDashCase2['default'])(property) + ':' + value : '')
	    };
	  }
	}

	module.exports = exports['default'];

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = sizing;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var _utilsCamelToDashCase = __webpack_require__(215);

	var _utilsCamelToDashCase2 = _interopRequireDefault(_utilsCamelToDashCase);

	var properties = {
	  maxHeight: true,
	  maxWidth: true,
	  width: true,
	  height: true,
	  columnWidth: true,
	  minWidth: true,
	  minHeight: true
	};
	var values = {
	  'min-content': true,
	  'max-content': true,
	  'fill-available': true,
	  'fit-content': true,
	  'contain-floats': true
	};

	function sizing(_ref2) {
	  var property = _ref2.property;
	  var value = _ref2.value;
	  var css = _ref2.prefix.css;
	  var keepUnprefixed = _ref2.keepUnprefixed;

	  // This might change in the future
	  // Keep an eye on it
	  if (properties[property] && values[value]) {
	    return _defineProperty({}, property, css + value + (keepUnprefixed ? ';' + (0, _utilsCamelToDashCase2['default'])(property) + ':' + value : ''));
	  }
	}

	module.exports = exports['default'];

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = gradient;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var _utilsCamelToDashCase = __webpack_require__(215);

	var _utilsCamelToDashCase2 = _interopRequireDefault(_utilsCamelToDashCase);

	var values = /linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/;

	function gradient(_ref2) {
	  var property = _ref2.property;
	  var value = _ref2.value;
	  var _ref2$browserInfo = _ref2.browserInfo;
	  var browser = _ref2$browserInfo.browser;
	  var version = _ref2$browserInfo.version;
	  var css = _ref2.prefix.css;
	  var keepUnprefixed = _ref2.keepUnprefixed;

	  if (typeof value === 'string' && value.match(values) !== null && (browser === 'firefox' && version < 16 || browser === 'chrome' && version < 26 || (browser === 'safari' || browser === 'ios_saf') && version < 7 || (browser === 'opera' || browser === 'op_mini') && version < 12.1 || browser === 'android' && version < 4.4 || browser === 'and_uc')) {
	    return _defineProperty({}, property, css + value + (keepUnprefixed ? ';' + (0, _utilsCamelToDashCase2['default'])(property) + ':' + value : ''));
	  }
	}

	module.exports = exports['default'];

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = transition;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var _utilsCamelToDashCase = __webpack_require__(215);

	var _utilsCamelToDashCase2 = _interopRequireDefault(_utilsCamelToDashCase);

	var _utilsCapitalizeString = __webpack_require__(211);

	var _utilsCapitalizeString2 = _interopRequireDefault(_utilsCapitalizeString);

	var _utilsUnprefixProperty = __webpack_require__(221);

	var _utilsUnprefixProperty2 = _interopRequireDefault(_utilsUnprefixProperty);

	var properties = { transition: true, transitionProperty: true };

	function transition(_ref2) {
	  var property = _ref2.property;
	  var value = _ref2.value;
	  var css = _ref2.prefix.css;
	  var requiresPrefix = _ref2.requiresPrefix;
	  var keepUnprefixed = _ref2.keepUnprefixed;

	  // also check for already prefixed transitions
	  var unprefixedProperty = (0, _utilsUnprefixProperty2['default'])(property);
	  if (typeof value === 'string' && properties[unprefixedProperty]) {
	    var _ret = (function () {
	      var requiresPrefixDashCased = Object.keys(requiresPrefix).map(function (prop) {
	        return (0, _utilsCamelToDashCase2['default'])(prop);
	      });

	      // only split multi values, not cubic beziers
	      var multipleValues = value.split(/,(?![^()]*(?:\([^()]*\))?\))/g);

	      requiresPrefixDashCased.forEach(function (property) {
	        multipleValues.forEach(function (val, index) {
	          if (val.indexOf(property) > -1) {
	            multipleValues[index] = val.replace(property, css + property) + (keepUnprefixed ? ',' + val : '');
	          }
	        });
	      });

	      return {
	        v: _defineProperty({}, property, multipleValues.join(','))
	      };
	    })();

	    if (typeof _ret === 'object') return _ret.v;
	  }
	}

	module.exports = exports['default'];

/***/ },
/* 221 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function (property) {
	  var unprefixed = property.replace(/^(ms|Webkit|Moz|O)/, '');
	  return unprefixed.charAt(0).toLowerCase() + unprefixed.slice(1);
	};

	module.exports = exports['default'];

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = flexboxIE;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var _utilsCamelToDashCase = __webpack_require__(215);

	var _utilsCamelToDashCase2 = _interopRequireDefault(_utilsCamelToDashCase);

	var alternativeValues = {
	  'space-around': 'distribute',
	  'space-between': 'justify',
	  'flex-start': 'start',
	  'flex-end': 'end',
	  flex: 'flexbox',
	  'inline-flex': 'inline-flexbox'
	};
	var alternativeProps = {
	  alignContent: 'msFlexLinePack',
	  alignSelf: 'msFlexItemAlign',
	  alignItems: 'msFlexAlign',
	  justifyContent: 'msFlexPack',
	  order: 'msFlexOrder',
	  flexGrow: 'msFlexPositive',
	  flexShrink: 'msFlexNegative',
	  flexBasis: 'msPreferredSize'
	};

	var properties = Object.keys(alternativeProps).reduce(function (result, prop) {
	  result[prop] = true;
	  return result;
	}, {});

	function flexboxIE(_ref2) {
	  var property = _ref2.property;
	  var value = _ref2.value;
	  var styles = _ref2.styles;
	  var _ref2$browserInfo = _ref2.browserInfo;
	  var browser = _ref2$browserInfo.browser;
	  var version = _ref2$browserInfo.version;
	  var css = _ref2.prefix.css;
	  var keepUnprefixed = _ref2.keepUnprefixed;

	  if ((properties[property] || property === 'display' && typeof value === 'string' && value.indexOf('flex') > -1) && (browser === 'ie_mob' || browser === 'ie') && version == 10) {
	    if (!keepUnprefixed) {
	      delete styles[property];
	    }
	    if (property === 'display' && alternativeValues[value]) {
	      return {
	        display: css + alternativeValues[value] + (keepUnprefixed ? ';' + (0, _utilsCamelToDashCase2['default'])(property) + ':' + value : '')
	      };
	    }
	    if (alternativeProps[property]) {
	      return _defineProperty({}, alternativeProps[property], alternativeValues[value] || value);
	    }
	  }
	}

	module.exports = exports['default'];

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = flexboxOld;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var _utilsCamelToDashCase = __webpack_require__(215);

	var _utilsCamelToDashCase2 = _interopRequireDefault(_utilsCamelToDashCase);

	var alternativeValues = {
	  'space-around': 'justify',
	  'space-between': 'justify',
	  'flex-start': 'start',
	  'flex-end': 'end',
	  'wrap-reverse': 'multiple',
	  wrap: 'multiple',
	  flex: 'box',
	  'inline-flex': 'inline-box'
	};

	var alternativeProps = {
	  alignItems: 'WebkitBoxAlign',
	  justifyContent: 'WebkitBoxPack',
	  flexWrap: 'WebkitBoxLines'
	};

	var otherProps = ['alignContent', 'alignSelf', 'order', 'flexGrow', 'flexShrink', 'flexBasis', 'flexDirection'];

	var properties = Object.keys(alternativeProps).concat(otherProps).reduce(function (result, prop) {
	  result[prop] = true;
	  return result;
	}, {});

	function flexboxOld(_ref2) {
	  var property = _ref2.property;
	  var value = _ref2.value;
	  var styles = _ref2.styles;
	  var _ref2$browserInfo = _ref2.browserInfo;
	  var browser = _ref2$browserInfo.browser;
	  var version = _ref2$browserInfo.version;
	  var css = _ref2.prefix.css;
	  var keepUnprefixed = _ref2.keepUnprefixed;

	  if ((properties[property] || property === 'display' && typeof value === 'string' && value.indexOf('flex') > -1) && (browser === 'firefox' && version < 22 || browser === 'chrome' && version < 21 || (browser === 'safari' || browser === 'ios_saf') && version <= 6.1 || browser === 'android' && version < 4.4 || browser === 'and_uc')) {
	    if (!keepUnprefixed) {
	      delete styles[property];
	    }
	    if (property === 'flexDirection') {
	      return {
	        WebkitBoxOrient: value.indexOf('column') > -1 ? 'vertical' : 'horizontal',
	        WebkitBoxDirection: value.indexOf('reverse') > -1 ? 'reverse' : 'normal'
	      };
	    }
	    if (property === 'display' && alternativeValues[value]) {
	      return {
	        display: css + alternativeValues[value] + (keepUnprefixed ? ';' + (0, _utilsCamelToDashCase2['default'])(property) + ':' + value : '')
	      };
	    }
	    if (alternativeProps[property]) {
	      return _defineProperty({}, alternativeProps[property], alternativeValues[value] || value);
	    }
	  }
	}

	module.exports = exports['default'];

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getStateKey = __webpack_require__(225);

	var _getStateKey2 = _interopRequireDefault(_getStateKey);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var getState = function getState(state, elementKey, value) {
	  var key = (0, _getStateKey2.default)(elementKey);

	  return !!state && !!state._radiumStyleState && !!state._radiumStyleState[key] && state._radiumStyleState[key][value];
	};

	exports.default = getState;
	module.exports = exports['default'];

/***/ },
/* 225 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});


	var getStateKey = function getStateKey(elementKey) {
	  return elementKey === null || elementKey === undefined ? 'main' : elementKey.toString();
	};

	exports.default = getStateKey;
	module.exports = exports['default'];

/***/ },
/* 226 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = hash;


	// a simple djb2 hash based on hash-string:
	// https://github.com/MatthewBarker/hash-string/blob/master/source/hash-string.js
	// returns a hex-encoded hash
	function hash(text) {
	  if (!text) {
	    return '';
	  }

	  var hashValue = 5381;
	  var index = text.length - 1;

	  while (index) {
	    hashValue = hashValue * 33 ^ text.charCodeAt(index);
	    index -= 1;
	  }

	  return (hashValue >>> 0).toString(16);
	}
	module.exports = exports['default'];

/***/ },
/* 227 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.isNestedStyle = isNestedStyle;
	exports.mergeStyles = mergeStyles;
	function isNestedStyle(value) {
	  // Don't merge objects overriding toString, since they should be converted
	  // to string values.
	  return value && value.constructor === Object && value.toString === Object.prototype.toString;
	}

	// Merge style objects. Deep merge plain object values.
	function mergeStyles(styles) {
	  var result = {};

	  styles.forEach(function (style) {
	    if (!style || (typeof style === 'undefined' ? 'undefined' : _typeof(style)) !== 'object') {
	      return;
	    }

	    if (Array.isArray(style)) {
	      style = mergeStyles(style);
	    }

	    Object.keys(style).forEach(function (key) {
	      // Simple case, nothing nested
	      if (!isNestedStyle(style[key]) || !isNestedStyle(result[key])) {
	        result[key] = style[key];
	        return;
	      }

	      // If nested media, don't merge the nested styles, append a space to the
	      // end (benign when converted to CSS). This way we don't end up merging
	      // media queries that appear later in the chain with those that appear
	      // earlier.
	      if (key.indexOf('@media') === 0) {
	        var newKey = key;
	        while (true) {
	          // eslint-disable-line no-constant-condition
	          newKey += ' ';
	          if (!result[newKey]) {
	            result[newKey] = style[key];
	            return;
	          }
	        }
	      }

	      // Merge all other nested styles recursively
	      result[key] = mergeStyles([result[key], style[key]]);
	    });
	  });

	  return result;
	}

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _checkPropsPlugin = __webpack_require__(229);

	var _checkPropsPlugin2 = _interopRequireDefault(_checkPropsPlugin);

	var _keyframesPlugin = __webpack_require__(230);

	var _keyframesPlugin2 = _interopRequireDefault(_keyframesPlugin);

	var _mergeStyleArrayPlugin = __webpack_require__(231);

	var _mergeStyleArrayPlugin2 = _interopRequireDefault(_mergeStyleArrayPlugin);

	var _prefixPlugin = __webpack_require__(232);

	var _prefixPlugin2 = _interopRequireDefault(_prefixPlugin);

	var _removeNestedStylesPlugin = __webpack_require__(233);

	var _removeNestedStylesPlugin2 = _interopRequireDefault(_removeNestedStylesPlugin);

	var _resolveInteractionStylesPlugin = __webpack_require__(234);

	var _resolveInteractionStylesPlugin2 = _interopRequireDefault(_resolveInteractionStylesPlugin);

	var _resolveMediaQueriesPlugin = __webpack_require__(236);

	var _resolveMediaQueriesPlugin2 = _interopRequireDefault(_resolveMediaQueriesPlugin);

	var _visitedPlugin = __webpack_require__(237);

	var _visitedPlugin2 = _interopRequireDefault(_visitedPlugin);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = {
	  checkProps: _checkPropsPlugin2.default,
	  keyframes: _keyframesPlugin2.default,
	  mergeStyleArray: _mergeStyleArrayPlugin2.default,
	  prefix: _prefixPlugin2.default,
	  removeNestedStyles: _removeNestedStylesPlugin2.default,
	  resolveInteractionStyles: _resolveInteractionStylesPlugin2.default,
	  resolveMediaQueries: _resolveMediaQueriesPlugin2.default,
	  visited: _visitedPlugin2.default
	};
	/* eslint-disable block-scoped-const */

	module.exports = exports['default'];

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _checkProps = function checkProps() {};

	if (process.env.NODE_ENV !== 'production') {
	  (function () {
	    // Warn if you use longhand and shorthand properties in the same style
	    // object.
	    // https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties

	    var shorthandPropertyExpansions = {
	      'background': ['backgroundAttachment', 'backgroundBlendMode', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPosition', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundRepeatX', 'backgroundRepeatY', 'backgroundSize'],
	      'border': ['borderBottom', 'borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderColor', 'borderLeft', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRight', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderStyle', 'borderTop', 'borderTopColor', 'borderTopStyle', 'borderTopWidth', 'borderWidth'],
	      'borderImage': ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
	      'borderRadius': ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
	      'font': ['fontFamily', 'fontKerning', 'fontSize', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantLigatures', 'fontWeight', 'lineHeight'],
	      'listStyle': ['listStyleImage', 'listStylePosition', 'listStyleType'],
	      'margin': ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
	      'padding': ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
	      'transition': ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction']
	    };

	    _checkProps = function checkProps(config) {
	      var componentName = config.componentName;
	      var style = config.style;

	      if ((typeof style === 'undefined' ? 'undefined' : _typeof(style)) !== 'object' || !style) {
	        return;
	      }

	      var styleKeys = Object.keys(style);
	      styleKeys.forEach(function (styleKey) {
	        if (Array.isArray(shorthandPropertyExpansions[styleKey]) && shorthandPropertyExpansions[styleKey].some(function (sp) {
	          return styleKeys.indexOf(sp) !== -1;
	        })) {
	          if (process.env.NODE_ENV !== 'production') {
	            /* eslint-disable no-console */
	            console.warn('Radium: property "' + styleKey + '" in style object', style, ': do not mix longhand and ' + 'shorthand properties in the same style object. Check the render ' + 'method of ' + componentName + '.', 'See https://github.com/FormidableLabs/radium/issues/95 for more ' + 'information.');
	            /* eslint-enable no-console */
	          }
	        }
	      });

	      styleKeys.forEach(function (k) {
	        return _checkProps(_extends({}, config, { style: style[k] }));
	      });
	      return;
	    };
	  })();
	}

	exports.default = _checkProps;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 230 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = keyframesPlugin;
	function keyframesPlugin(_ref // eslint-disable-line no-shadow
	) {
	  var addCSS = _ref.addCSS;
	  var config = _ref.config;
	  var style = _ref.style;

	  var newStyle = Object.keys(style).reduce(function (newStyleInProgress, key) {
	    var value = style[key];
	    if (key === 'animationName' && value && value.__radiumKeyframes) {
	      var keyframesValue = value;

	      var _keyframesValue$__pro = keyframesValue.__process(config.userAgent);

	      var animationName = _keyframesValue$__pro.animationName;
	      var css = _keyframesValue$__pro.css;

	      addCSS(css);
	      value = animationName;
	    }

	    newStyleInProgress[key] = value;
	    return newStyleInProgress;
	  }, {});
	  return { style: newStyle };
	}
	module.exports = exports['default'];

/***/ },
/* 231 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});


	// Convenient syntax for multiple styles: `style={[style1, style2, etc]}`
	// Ignores non-objects, so you can do `this.state.isCool && styles.cool`.
	var mergeStyleArrayPlugin = function mergeStyleArrayPlugin(_ref) {
	  var style = _ref.style;
	  var mergeStyles = _ref.mergeStyles;
	  // eslint-disable-line no-shadow
	  var newStyle = Array.isArray(style) ? mergeStyles(style) : style;
	  return { style: newStyle };
	};

	exports.default = mergeStyleArrayPlugin;
	module.exports = exports['default'];

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = prefixPlugin;

	var _prefixer = __webpack_require__(190);

	function prefixPlugin(_ref // eslint-disable-line no-shadow
	) {
	  var config = _ref.config;
	  var style = _ref.style;

	  var newStyle = (0, _prefixer.getPrefixedStyle)(style, config.userAgent);
	  return { style: newStyle };
	}
	module.exports = exports['default'];

/***/ },
/* 233 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = removeNestedStyles;
	function removeNestedStyles(_ref) {
	  var isNestedStyle = _ref.isNestedStyle;
	  var style = _ref.style;
	  // eslint-disable-line no-shadow
	  var newStyle = Object.keys(style).reduce(function (newStyleInProgress, key) {
	    var value = style[key];
	    if (!isNestedStyle(value)) {
	      newStyleInProgress[key] = value;
	    }
	    return newStyleInProgress;
	  }, {});

	  return {
	    style: newStyle
	  };
	}
	module.exports = exports['default'];

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _mouseUpListener = __webpack_require__(235);

	var _mouseUpListener2 = _interopRequireDefault(_mouseUpListener);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var _isInteractiveStyleField = function _isInteractiveStyleField(styleFieldName) {
	  return styleFieldName === ':hover' || styleFieldName === ':active' || styleFieldName === ':focus';
	};

	var resolveInteractionStyles = function resolveInteractionStyles(config) {
	  var ExecutionEnvironment = config.ExecutionEnvironment;
	  var getComponentField = config.getComponentField;
	  var getState = config.getState;
	  var mergeStyles = config.mergeStyles;
	  var props = config.props;
	  var setState = config.setState;
	  var style = config.style;


	  var newComponentFields = {};
	  var newProps = {};

	  // Only add handlers if necessary
	  if (style[':hover']) {
	    (function () {
	      // Always call the existing handler if one is already defined.
	      // This code, and the very similar ones below, could be abstracted a bit
	      // more, but it hurts readability IMO.
	      var existingOnMouseEnter = props.onMouseEnter;
	      newProps.onMouseEnter = function (e) {
	        existingOnMouseEnter && existingOnMouseEnter(e);
	        setState(':hover', true);
	      };

	      var existingOnMouseLeave = props.onMouseLeave;
	      newProps.onMouseLeave = function (e) {
	        existingOnMouseLeave && existingOnMouseLeave(e);
	        setState(':hover', false);
	      };
	    })();
	  }

	  if (style[':active']) {
	    (function () {
	      var existingOnMouseDown = props.onMouseDown;
	      newProps.onMouseDown = function (e) {
	        existingOnMouseDown && existingOnMouseDown(e);
	        newComponentFields._lastMouseDown = Date.now();
	        setState(':active', 'viamousedown');
	      };

	      var existingOnKeyDown = props.onKeyDown;
	      newProps.onKeyDown = function (e) {
	        existingOnKeyDown && existingOnKeyDown(e);
	        if (e.key === ' ' || e.key === 'Enter') {
	          setState(':active', 'viakeydown');
	        }
	      };

	      var existingOnKeyUp = props.onKeyUp;
	      newProps.onKeyUp = function (e) {
	        existingOnKeyUp && existingOnKeyUp(e);
	        if (e.key === ' ' || e.key === 'Enter') {
	          setState(':active', false);
	        }
	      };
	    })();
	  }

	  if (style[':focus']) {
	    (function () {
	      var existingOnFocus = props.onFocus;
	      newProps.onFocus = function (e) {
	        existingOnFocus && existingOnFocus(e);
	        setState(':focus', true);
	      };

	      var existingOnBlur = props.onBlur;
	      newProps.onBlur = function (e) {
	        existingOnBlur && existingOnBlur(e);
	        setState(':focus', false);
	      };
	    })();
	  }

	  if (style[':active'] && !getComponentField('_radiumMouseUpListener') && ExecutionEnvironment.canUseEventListeners) {
	    newComponentFields._radiumMouseUpListener = _mouseUpListener2.default.subscribe(function () {
	      Object.keys(getComponentField('state')._radiumStyleState).forEach(function (key) {
	        if (getState(':active', key) === 'viamousedown') {
	          setState(':active', false, key);
	        }
	      });
	    });
	  }

	  // Merge the styles in the order they were defined
	  var interactionStyles = props.disabled ? [style[':disabled']] : Object.keys(style).filter(function (name) {
	    return _isInteractiveStyleField(name) && getState(name);
	  }).map(function (name) {
	    return style[name];
	  });

	  var newStyle = mergeStyles([style].concat(interactionStyles));

	  // Remove interactive styles
	  newStyle = Object.keys(newStyle).reduce(function (styleWithoutInteractions, name) {
	    if (!_isInteractiveStyleField(name) && name !== ':disabled') {
	      styleWithoutInteractions[name] = newStyle[name];
	    }
	    return styleWithoutInteractions;
	  }, {});

	  return {
	    componentFields: newComponentFields,
	    props: newProps,
	    style: newStyle
	  };
	};

	exports.default = resolveInteractionStyles;
	module.exports = exports['default'];

/***/ },
/* 235 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});


	var _callbacks = [];
	var _mouseUpListenerIsActive = false;

	function _handleMouseUp() {
	  _callbacks.forEach(function (callback) {
	    callback();
	  });
	}

	var subscribe = function subscribe(callback) {
	  if (_callbacks.indexOf(callback) === -1) {
	    _callbacks.push(callback);
	  }

	  if (!_mouseUpListenerIsActive) {
	    window.addEventListener('mouseup', _handleMouseUp);
	    _mouseUpListenerIsActive = true;
	  }

	  return {
	    remove: function remove() {
	      var index = _callbacks.indexOf(callback);
	      _callbacks.splice(index, 1);

	      if (_callbacks.length === 0 && _mouseUpListenerIsActive) {
	        window.removeEventListener('mouseup', _handleMouseUp);
	        _mouseUpListenerIsActive = false;
	      }
	    }
	  };
	};

	exports.default = {
	  subscribe: subscribe,
	  __triggerForTests: _handleMouseUp
	};
	module.exports = exports['default'];

/***/ },
/* 236 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.default = resolveMediaQueries;


	var _windowMatchMedia = void 0;
	function _getWindowMatchMedia(ExecutionEnvironment) {
	  if (_windowMatchMedia === undefined) {
	    _windowMatchMedia = !!ExecutionEnvironment.canUseDOM && !!window && !!window.matchMedia && function (mediaQueryString) {
	      return window.matchMedia(mediaQueryString);
	    } || null;
	  }
	  return _windowMatchMedia;
	}

	function _filterObject(obj, predicate) {
	  return Object.keys(obj).filter(function (key) {
	    return predicate(obj[key], key);
	  }).reduce(function (result, key) {
	    result[key] = obj[key];
	    return result;
	  }, {});
	}

	function _removeMediaQueries(style) {
	  return Object.keys(style).reduce(function (styleWithoutMedia, key) {
	    if (key.indexOf('@media') !== 0) {
	      styleWithoutMedia[key] = style[key];
	    }
	    return styleWithoutMedia;
	  }, {});
	}

	function _topLevelRulesToCSS(_ref) {
	  var addCSS = _ref.addCSS;
	  var appendImportantToEachValue = _ref.appendImportantToEachValue;
	  var cssRuleSetToString = _ref.cssRuleSetToString;
	  var hash = _ref.hash;
	  var isNestedStyle = _ref.isNestedStyle;
	  var style = _ref.style;
	  var userAgent = _ref.userAgent;

	  var className = '';
	  Object.keys(style).filter(function (name) {
	    return name.indexOf('@media') === 0;
	  }).map(function (query) {
	    var topLevelRules = appendImportantToEachValue(_filterObject(style[query], function (value) {
	      return !isNestedStyle(value);
	    }));

	    if (!Object.keys(topLevelRules).length) {
	      return;
	    }

	    var ruleCSS = cssRuleSetToString('', topLevelRules, userAgent);

	    // CSS classes cannot start with a number
	    var mediaQueryClassName = 'rmq-' + hash(query + ruleCSS);
	    var css = query + '{ .' + mediaQueryClassName + ruleCSS + '}';

	    addCSS(css);

	    className += (className ? ' ' : '') + mediaQueryClassName;
	  });
	  return className;
	}

	function _subscribeToMediaQuery(_ref2) {
	  var listener = _ref2.listener;
	  var listenersByQuery = _ref2.listenersByQuery;
	  var matchMedia = _ref2.matchMedia;
	  var mediaQueryListsByQuery = _ref2.mediaQueryListsByQuery;
	  var query = _ref2.query;

	  query = query.replace('@media ', '');

	  var mql = mediaQueryListsByQuery[query];
	  if (!mql && matchMedia) {
	    mediaQueryListsByQuery[query] = mql = matchMedia(query);
	  }

	  if (!listenersByQuery || !listenersByQuery[query]) {
	    mql.addListener(listener);

	    listenersByQuery[query] = {
	      remove: function remove() {
	        mql.removeListener(listener);
	      }
	    };
	  }
	  return mql;
	}

	function resolveMediaQueries(_ref3) {
	  var ExecutionEnvironment = _ref3.ExecutionEnvironment;
	  var addCSS = _ref3.addCSS;
	  var appendImportantToEachValue = _ref3.appendImportantToEachValue;
	  var config = _ref3.config;
	  var cssRuleSetToString = _ref3.cssRuleSetToString;
	  var getComponentField = _ref3.getComponentField;
	  var getGlobalState = _ref3.getGlobalState;
	  var hash = _ref3.hash;
	  var isNestedStyle = _ref3.isNestedStyle;
	  var mergeStyles = _ref3.mergeStyles;
	  var props = _ref3.props;
	  var setState = _ref3.setState;
	  var style = _ref3.style;
	  // eslint-disable-line no-shadow
	  var newStyle = _removeMediaQueries(style);
	  var mediaQueryClassNames = _topLevelRulesToCSS({
	    addCSS: addCSS,
	    appendImportantToEachValue: appendImportantToEachValue,
	    cssRuleSetToString: cssRuleSetToString,
	    hash: hash,
	    isNestedStyle: isNestedStyle,
	    style: style,
	    userAgent: config.userAgent
	  });

	  var newProps = mediaQueryClassNames ? {
	    className: mediaQueryClassNames + (props.className ? ' ' + props.className : '')
	  } : null;

	  var matchMedia = config.matchMedia || _getWindowMatchMedia(ExecutionEnvironment);

	  if (!matchMedia) {
	    return {
	      props: newProps,
	      style: newStyle
	    };
	  }

	  var listenersByQuery = _extends({}, getComponentField('_radiumMediaQueryListenersByQuery'));
	  var mediaQueryListsByQuery = getGlobalState('mediaQueryListsByQuery') || {};

	  Object.keys(style).filter(function (name) {
	    return name.indexOf('@media') === 0;
	  }).map(function (query) {
	    var nestedRules = _filterObject(style[query], isNestedStyle);

	    if (!Object.keys(nestedRules).length) {
	      return;
	    }

	    var mql = _subscribeToMediaQuery({
	      listener: function listener() {
	        return setState(query, mql.matches, '_all');
	      },
	      listenersByQuery: listenersByQuery,
	      matchMedia: matchMedia,
	      mediaQueryListsByQuery: mediaQueryListsByQuery,
	      query: query
	    });

	    // Apply media query states
	    if (mql.matches) {
	      newStyle = mergeStyles([newStyle, nestedRules]);
	    }
	  });

	  return {
	    componentFields: {
	      _radiumMediaQueryListenersByQuery: listenersByQuery
	    },
	    globalState: { mediaQueryListsByQuery: mediaQueryListsByQuery },
	    props: newProps,
	    style: newStyle
	  };
	}
	module.exports = exports['default'];

/***/ },
/* 237 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = visited;
	function visited(_ref) {
	  var addCSS = _ref.addCSS;
	  var appendImportantToEachValue = _ref.appendImportantToEachValue;
	  var config = _ref.config;
	  var cssRuleSetToString = _ref.cssRuleSetToString;
	  var hash = _ref.hash;
	  var props = _ref.props;
	  var style = _ref.style;
	  // eslint-disable-line no-shadow
	  var className = props.className;

	  var newStyle = Object.keys(style).reduce(function (newStyleInProgress, key) {
	    var value = style[key];
	    if (key === ':visited') {
	      value = appendImportantToEachValue(value);
	      var ruleCSS = cssRuleSetToString('', value, config.userAgent);
	      var visitedClassName = 'rad-' + hash(ruleCSS);
	      var css = '.' + visitedClassName + ':visited' + ruleCSS;

	      addCSS(css);
	      className = (className ? className + ' ' : '') + visitedClassName;
	    } else {
	      newStyleInProgress[key] = value;
	    }

	    return newStyleInProgress;
	  }, {});

	  return {
	    props: className === props.className ? null : { className: className },
	    style: newStyle
	  };
	}
	module.exports = exports['default'];

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2015 Jed Watson.
	  Based on code that is Copyright 2013-2015, Facebook, Inc.
	  All rights reserved.
	*/
	/* global define */

	(function () {
		'use strict';

		var canUseDOM = !!(
			typeof window !== 'undefined' &&
			window.document &&
			window.document.createElement
		);

		var ExecutionEnvironment = {

			canUseDOM: canUseDOM,

			canUseWorkers: typeof Worker !== 'undefined',

			canUseEventListeners:
				canUseDOM && !!(window.addEventListener || window.attachEvent),

			canUseViewport: canUseDOM && !!window.screen

		};

		if (true) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return ExecutionEnvironment;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (typeof module !== 'undefined' && module.exports) {
			module.exports = ExecutionEnvironment;
		} else {
			window.ExecutionEnvironment = ExecutionEnvironment;
		}

	}());


/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _cssRuleSetToString = __webpack_require__(188);

	var _cssRuleSetToString2 = _interopRequireDefault(_cssRuleSetToString);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Style = _react2.default.createClass({
	  displayName: 'Style',

	  propTypes: {
	    radiumConfig: _react.PropTypes.object,
	    rules: _react.PropTypes.object,
	    scopeSelector: _react.PropTypes.string
	  },

	  contextTypes: {
	    _radiumConfig: _react.PropTypes.object
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      scopeSelector: ''
	    };
	  },
	  _buildStyles: function _buildStyles(styles) {
	    var _this = this;

	    var userAgent = this.props.radiumConfig && this.props.radiumConfig.userAgent || this.context && this.context._radiumConfig && this.context._radiumConfig.userAgent;

	    var scopeSelector = this.props.scopeSelector;

	    var rootRules = Object.keys(styles).reduce(function (accumulator, selector) {
	      if (_typeof(styles[selector]) !== 'object') {
	        accumulator[selector] = styles[selector];
	      }

	      return accumulator;
	    }, {});
	    var rootStyles = Object.keys(rootRules).length ? (0, _cssRuleSetToString2.default)(scopeSelector || '', rootRules, userAgent) : '';

	    return rootStyles + Object.keys(styles).reduce(function (accumulator, selector) {
	      var rules = styles[selector];

	      if (selector === 'mediaQueries') {
	        accumulator += _this._buildMediaQueryString(rules);
	      } else if (_typeof(styles[selector]) === 'object') {
	        var completeSelector = scopeSelector ? selector.split(',').map(function (part) {
	          return scopeSelector + ' ' + part.trim();
	        }).join(',') : selector;

	        accumulator += (0, _cssRuleSetToString2.default)(completeSelector, rules, userAgent);
	      }

	      return accumulator;
	    }, '');
	  },
	  _buildMediaQueryString: function _buildMediaQueryString(stylesByMediaQuery) {
	    var _this2 = this;

	    var mediaQueryString = '';

	    Object.keys(stylesByMediaQuery).forEach(function (query) {
	      mediaQueryString += '@media ' + query + '{' + _this2._buildStyles(stylesByMediaQuery[query]) + '}';
	    });

	    return mediaQueryString;
	  },
	  render: function render() {
	    if (!this.props.rules) {
	      return null;
	    }

	    var styles = this._buildStyles(this.props.rules);

	    return _react2.default.createElement('style', { dangerouslySetInnerHTML: { __html: styles } });
	  }
	});

	exports.default = Style;
	module.exports = exports['default'];

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _enhancer = __webpack_require__(182);

	var _enhancer2 = _interopRequireDefault(_enhancer);

	var _styleKeeper = __webpack_require__(183);

	var _styleKeeper2 = _interopRequireDefault(_styleKeeper);

	var _styleSheet = __webpack_require__(241);

	var _styleSheet2 = _interopRequireDefault(_styleSheet);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _getStyleKeeper(instance) {
	  if (!instance._radiumStyleKeeper) {
	    var userAgent = instance.props.radiumConfig && instance.props.radiumConfig.userAgent || instance.context._radiumConfig && instance.context._radiumConfig.userAgent;
	    instance._radiumStyleKeeper = new _styleKeeper2.default(userAgent);
	  }

	  return instance._radiumStyleKeeper;
	}

	var StyleRoot = function (_Component) {
	  _inherits(StyleRoot, _Component);

	  function StyleRoot() {
	    _classCallCheck(this, StyleRoot);

	    var _this = _possibleConstructorReturn(this, _Component.apply(this, arguments));

	    _getStyleKeeper(_this);
	    return _this;
	  }

	  StyleRoot.prototype.getChildContext = function getChildContext() {
	    return { _radiumStyleKeeper: _getStyleKeeper(this) };
	  };

	  StyleRoot.prototype.render = function render() {
	    /* eslint-disable no-unused-vars */
	    // Pass down all props except config to the rendered div.
	    var _props = this.props;
	    var radiumConfig = _props.radiumConfig;

	    var otherProps = _objectWithoutProperties(_props, ['radiumConfig']);
	    /* eslint-enable no-unused-vars */

	    return _react2.default.createElement(
	      'div',
	      otherProps,
	      this.props.children,
	      _react2.default.createElement(_styleSheet2.default, null)
	    );
	  };

	  return StyleRoot;
	}(_react.Component);

	StyleRoot.contextTypes = {
	  _radiumConfig: _react.PropTypes.object,
	  _radiumStyleKeeper: _react.PropTypes.instanceOf(_styleKeeper2.default)
	};

	StyleRoot.childContextTypes = {
	  _radiumStyleKeeper: _react.PropTypes.instanceOf(_styleKeeper2.default)
	};

	StyleRoot = (0, _enhancer2.default)(StyleRoot);

	exports.default = StyleRoot;
	module.exports = exports['default'];

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _class, _temp;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _styleKeeper = __webpack_require__(183);

	var _styleKeeper2 = _interopRequireDefault(_styleKeeper);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var StyleSheet = (_temp = _class = function (_Component) {
	  _inherits(StyleSheet, _Component);

	  function StyleSheet() {
	    _classCallCheck(this, StyleSheet);

	    var _this = _possibleConstructorReturn(this, _Component.apply(this, arguments));

	    _this.state = _this._getCSSState();

	    _this._onChange = _this._onChange.bind(_this);
	    return _this;
	  }

	  StyleSheet.prototype.componentDidMount = function componentDidMount() {
	    this._isMounted = true;
	    this._subscription = this.context._radiumStyleKeeper.subscribe(this._onChange);
	    this._onChange();
	  };

	  StyleSheet.prototype.componentWillUnmount = function componentWillUnmount() {
	    this._isMounted = false;
	    if (this._subscription) {
	      this._subscription.remove();
	    }
	  };

	  StyleSheet.prototype._getCSSState = function _getCSSState() {
	    return { css: this.context._radiumStyleKeeper.getCSS() };
	  };

	  StyleSheet.prototype._onChange = function _onChange() {
	    var _this2 = this;

	    setTimeout(function () {
	      _this2._isMounted && _this2.setState(_this2._getCSSState());
	    }, 0);
	  };

	  StyleSheet.prototype.render = function render() {
	    return _react2.default.createElement('style', { dangerouslySetInnerHTML: { __html: this.state.css } });
	  };

	  return StyleSheet;
	}(_react.Component), _class.contextTypes = {
	  _radiumStyleKeeper: _react2.default.PropTypes.instanceOf(_styleKeeper2.default)
	}, _temp);
	exports.default = StyleSheet;
	module.exports = exports['default'];

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = keyframes;

	var _cssRuleSetToString = __webpack_require__(188);

	var _cssRuleSetToString2 = _interopRequireDefault(_cssRuleSetToString);

	var _hash = __webpack_require__(226);

	var _hash2 = _interopRequireDefault(_hash);

	var _prefixer = __webpack_require__(190);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function keyframes(keyframeRules, name) {
	  return {
	    __radiumKeyframes: true,
	    __process: function __process(userAgent) {
	      var keyframesPrefixed = (0, _prefixer.getPrefixedKeyframes)(userAgent);
	      var rules = Object.keys(keyframeRules).map(function (percentage) {
	        return (0, _cssRuleSetToString2.default)(percentage, keyframeRules[percentage], userAgent);
	      }).join('\n');
	      var animationName = (name ? name + '-' : '') + 'radium-animation-' + (0, _hash2.default)(rules);
	      var css = '@' + keyframesPrefixed + ' ' + animationName + ' {\n' + rules + '\n}\n';
	      return { css: css, animationName: animationName };
	    }
	  };
	}
	module.exports = exports['default'];

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "2e21749335ed2b94c0192e5e5fa92e6e.png";

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Nav = function Nav() {
	  return _react2.default.createElement('div', { style: nav });
	};

	var nav = {
	  display: 'flex',
	  backgroundColor: '#131544',
	  height: '49px'
	};

	exports.default = Nav;

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Breadcrumbs = function Breadcrumbs() {
	  return _react2.default.createElement('div', { style: breadcrumbs });
	};

	var breadcrumbs = {
	  display: 'flex',
	  height: '40px',
	  backgroundColor: '#EAEAEA'
	};

	exports.default = Breadcrumbs;

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _menu = __webpack_require__(247);

	var _menu2 = _interopRequireDefault(_menu);

	var _video = __webpack_require__(249);

	var _video2 = _interopRequireDefault(_video);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Content = function Content(props) {
	  // SHOULD GO IN CONTAINER AND HAVE STATE
	  return _react2.default.createElement(
	    'div',
	    { style: container },
	    _react2.default.createElement(_menu2.default, { toggle: props.toggle, videoData: props.videoData }),
	    _react2.default.createElement(_video2.default, { videoData: props.videoData })
	  );
	};

	var container = {
	  display: 'flex',
	  flexDirection: 'row',
	  flex: '2'
	};

	exports.default = Content;

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _lesson = __webpack_require__(248);

	var _lesson2 = _interopRequireDefault(_lesson);

	var _radium = __webpack_require__(181);

	var _radium2 = _interopRequireDefault(_radium);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Menu = function Menu(props) {
	  var lessons = [];
	  if (props.videoData) {
	    props.videoData.forEach(function (lesson, i) {
	      lessons.push(_react2.default.createElement(_lesson2.default, { key: i, lessonData: lesson }));
	    });
	  }
	  return _react2.default.createElement(
	    'div',
	    { style: menu },
	    lessons
	  );
	};

	var menu = {
	  backgroundColor: '#131544',
	  width: '30%',
	  minWidth: '300px',
	  maxWidth: '350px'
	};

	exports.default = (0, _radium2.default)(Menu);

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _radium = __webpack_require__(181);

	var _radium2 = _interopRequireDefault(_radium);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Lesson = function Lesson(props) {
	  var videos = [];
	  return _react2.default.createElement(
	    'div',
	    { style: lessonTitle },
	    _react2.default.createElement(
	      'span',
	      null,
	      props.lessonData.name
	    )
	  );
	};

	var lessonTitle = {
	  alignItems: 'center',
	  backgroundColor: '#131544',
	  color: '#FFF',
	  display: 'flex',
	  height: '29px',
	  overflow: 'hidden',
	  paddingLeft: '5px',
	  ':hover': {
	    backgroundColor: '#EAEAEA',
	    color: '#333'
	  }
	};

	exports.default = (0, _radium2.default)(Lesson);

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _video = __webpack_require__(254);

	var _video2 = _interopRequireDefault(_video);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Video = function Video(props) {
	  console.log(_video2.default);
	  return _react2.default.createElement('div', { style: videoContainer });
	};

	var videoContainer = {
	  backgroundColor: '#33DDff',
	  width: '100%'
	};

	exports.default = Video;

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(251);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(253)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./main.css", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./main.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(252)();
	// imports


	// module
	exports.push([module.id, "* {\n  box-sizing: border-box;\n\tfont-family: 'Roboto', sans-serif;\n\tmargin: 0;\n\tpadding: 0;\n}\n\nhtml, body {\n\theight: 100vh\n}", ""]);

	// exports


/***/ },
/* 252 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}

	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}

	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}

	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}

	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;

		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = linkElement.href;

		linkElement.href = URL.createObjectURL(blob);

		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /**
	                                                                                                                                                                                                                                                                               * @file video.js
	                                                                                                                                                                                                                                                                               * @module videojs
	                                                                                                                                                                                                                                                                               */

	/* global define */

	// Include the built-in techs


	var _window = __webpack_require__(255);

	var _window2 = _interopRequireDefault(_window);

	var _document = __webpack_require__(256);

	var _document2 = _interopRequireDefault(_document);

	var _setup = __webpack_require__(258);

	var setup = _interopRequireWildcard(_setup);

	var _stylesheet = __webpack_require__(266);

	var stylesheet = _interopRequireWildcard(_stylesheet);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _eventTarget = __webpack_require__(271);

	var _eventTarget2 = _interopRequireDefault(_eventTarget);

	var _events = __webpack_require__(265);

	var Events = _interopRequireWildcard(_events);

	var _player = __webpack_require__(272);

	var _player2 = _interopRequireDefault(_player);

	var _plugins = __webpack_require__(354);

	var _plugins2 = _interopRequireDefault(_plugins);

	var _mergeOptions2 = __webpack_require__(270);

	var _mergeOptions3 = _interopRequireDefault(_mergeOptions2);

	var _fn = __webpack_require__(268);

	var Fn = _interopRequireWildcard(_fn);

	var _textTrack = __webpack_require__(282);

	var _textTrack2 = _interopRequireDefault(_textTrack);

	var _audioTrack = __webpack_require__(355);

	var _audioTrack2 = _interopRequireDefault(_audioTrack);

	var _videoTrack = __webpack_require__(356);

	var _videoTrack2 = _interopRequireDefault(_videoTrack);

	var _timeRanges = __webpack_require__(273);

	var _formatTime = __webpack_require__(311);

	var _formatTime2 = _interopRequireDefault(_formatTime);

	var _log = __webpack_require__(261);

	var _log2 = _interopRequireDefault(_log);

	var _dom = __webpack_require__(259);

	var Dom = _interopRequireWildcard(_dom);

	var _browser = __webpack_require__(262);

	var browser = _interopRequireWildcard(_browser);

	var _url = __webpack_require__(286);

	var Url = _interopRequireWildcard(_url);

	var _obj = __webpack_require__(263);

	var _computedStyle = __webpack_require__(319);

	var _computedStyle2 = _interopRequireDefault(_computedStyle);

	var _extend = __webpack_require__(357);

	var _extend2 = _interopRequireDefault(_extend);

	var _xhr = __webpack_require__(287);

	var _xhr2 = _interopRequireDefault(_xhr);

	var _tech = __webpack_require__(280);

	var _tech2 = _interopRequireDefault(_tech);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	// HTML5 Element Shim for IE8
	if (typeof HTMLVideoElement === 'undefined' && Dom.isReal()) {
	  _document2['default'].createElement('video');
	  _document2['default'].createElement('audio');
	  _document2['default'].createElement('track');
	}

	/**
	 * Doubles as the main function for users to create a player instance and also
	 * the main library object.
	 * The `videojs` function can be used to initialize or retrieve a player.
	  *
	 * @param {string|Element} id
	 *        Video element or video element ID
	 *
	 * @param {Object} [options]
	 *        Optional options object for config/settings
	 *
	 * @param {Component~ReadyCallback} [ready]
	 *        Optional ready callback
	 *
	 * @return {Player}
	 *         A player instance
	 *
	 * @mixes videojs
	 */
	function videojs(id, options, ready) {
	  var tag = void 0;

	  // Allow for element or ID to be passed in
	  // String ID
	  if (typeof id === 'string') {

	    // Adjust for jQuery ID syntax
	    if (id.indexOf('#') === 0) {
	      id = id.slice(1);
	    }

	    // If a player instance has already been created for this ID return it.
	    if (videojs.getPlayers()[id]) {

	      // If options or ready funtion are passed, warn
	      if (options) {
	        _log2['default'].warn('Player "' + id + '" is already initialised. Options will not be applied.');
	      }

	      if (ready) {
	        videojs.getPlayers()[id].ready(ready);
	      }

	      return videojs.getPlayers()[id];
	    }

	    // Otherwise get element for ID
	    tag = Dom.getEl(id);

	    // ID is a media element
	  } else {
	    tag = id;
	  }

	  // Check for a useable element
	  // re: nodeName, could be a box div also
	  if (!tag || !tag.nodeName) {
	    throw new TypeError('The element or ID supplied is not valid. (videojs)');
	  }

	  // Element may have a player attr referring to an already created player instance.
	  // If so return that otherwise set up a new player below
	  if (tag.player || _player2['default'].players[tag.playerId]) {
	    return tag.player || _player2['default'].players[tag.playerId];
	  }

	  options = options || {};

	  videojs.hooks('beforesetup').forEach(function (hookFunction) {
	    var opts = hookFunction(tag, (0, _mergeOptions3['default'])(options));

	    if (!(0, _obj.isObject)(opts) || Array.isArray(opts)) {
	      _log2['default'].error('please return an object in beforesetup hooks');
	      return;
	    }

	    options = (0, _mergeOptions3['default'])(options, opts);
	  });

	  var PlayerComponent = _component2['default'].getComponent('Player');
	  // If not, set up a new player
	  var player = new PlayerComponent(tag, options, ready);

	  videojs.hooks('setup').forEach(function (hookFunction) {
	    return hookFunction(player);
	  });

	  return player;
	}

	/**
	 * An Object that contains lifecycle hooks as keys which point to an array
	 * of functions that are run when a lifecycle is triggered
	 */
	videojs.hooks_ = {};

	/**
	 * Get a list of hooks for a specific lifecycle
	 *
	 * @param {string} type
	 *        the lifecyle to get hooks from
	 *
	 * @param {Function} [fn]
	 *        Optionally add a hook to the lifecycle that your are getting.
	 *
	 * @return {Array}
	 *         an array of hooks, or an empty array if there are none.
	 */
	videojs.hooks = function (type, fn) {
	  videojs.hooks_[type] = videojs.hooks_[type] || [];
	  if (fn) {
	    videojs.hooks_[type] = videojs.hooks_[type].concat(fn);
	  }
	  return videojs.hooks_[type];
	};

	/**
	 * Add a function hook to a specific videojs lifecycle.
	 *
	 * @param {string} type
	 *        the lifecycle to hook the function to.
	 *
	 * @param {Function|Function[]}
	 *        The function or array of functions to attach.
	 */
	videojs.hook = function (type, fn) {
	  videojs.hooks(type, fn);
	};

	/**
	 * Remove a hook from a specific videojs lifecycle.
	 *
	 * @param {string} type
	 *        the lifecycle that the function hooked to
	 *
	 * @param {Function} fn
	 *        The hooked function to remove
	 *
	 * @return {boolean}
	 *         The function that was removed or undef
	 */
	videojs.removeHook = function (type, fn) {
	  var index = videojs.hooks(type).indexOf(fn);

	  if (index <= -1) {
	    return false;
	  }

	  videojs.hooks_[type] = videojs.hooks_[type].slice();
	  videojs.hooks_[type].splice(index, 1);

	  return true;
	};

	// Add default styles
	if (_window2['default'].VIDEOJS_NO_DYNAMIC_STYLE !== true && Dom.isReal()) {
	  var style = Dom.$('.vjs-styles-defaults');

	  if (!style) {
	    style = stylesheet.createStyleElement('vjs-styles-defaults');
	    var head = Dom.$('head');

	    if (head) {
	      head.insertBefore(style, head.firstChild);
	    }
	    stylesheet.setTextContent(style, '\n      .video-js {\n        width: 300px;\n        height: 150px;\n      }\n\n      .vjs-fluid {\n        padding-top: 56.25%\n      }\n    ');
	  }
	}

	// Run Auto-load players
	// You have to wait at least once in case this script is loaded after your
	// video in the DOM (weird behavior only with minified version)
	setup.autoSetupTimeout(1, videojs);

	/**
	 * Current software version. Follows semver.
	 *
	 * @type {string}
	 */
	videojs.VERSION = '5.15.1';

	/**
	 * The global options object. These are the settings that take effect
	 * if no overrides are specified when the player is created.
	 *
	 * @type {Object}
	 */
	videojs.options = _player2['default'].prototype.options_;

	/**
	 * Get an object with the currently created players, keyed by player ID
	 *
	 * @return {Object}
	 *         The created players
	 */
	videojs.getPlayers = function () {
	  return _player2['default'].players;
	};

	/**
	 * Expose players object.
	 *
	 * @memberOf videojs
	 * @property {Object} players
	 */
	videojs.players = _player2['default'].players;

	/**
	 * Get a component class object by name
	 *
	 * @borrows Component.getComponent as videojs.getComponent
	 */
	videojs.getComponent = _component2['default'].getComponent;

	/**
	 * Register a component so it can referred to by name. Used when adding to other
	 * components, either through addChild `component.addChild('myComponent')` or through
	 * default children options  `{ children: ['myComponent'] }`.
	 *
	 * > NOTE: You could also just initialize the component before adding.
	 * `component.addChild(new MyComponent());`
	 *
	 * @param {string} name
	 *        The class name of the component
	 *
	 * @param {Component} comp
	 *        The component class
	 *
	 * @return {Component}
	 *         The newly registered component
	 */
	videojs.registerComponent = function (name, comp) {
	  if (_tech2['default'].isTech(comp)) {
	    _log2['default'].warn('The ' + name + ' tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)');
	  }

	  _component2['default'].registerComponent.call(_component2['default'], name, comp);
	};

	/**
	 * Get a Tech class object by name
	 *
	 * @borrows Tech.getTech as videojs.getTech
	 */
	videojs.getTech = _tech2['default'].getTech;

	/**
	 * Register a Tech so it can referred to by name.
	 * This is used in the tech order for the player.
	 *
	 * @borrows Tech.registerTech as videojs.registerTech
	 */
	videojs.registerTech = _tech2['default'].registerTech;

	/**
	 * A suite of browser and device tests from {@link browser}.
	 *
	 * @type {Object}
	 * @private
	 */
	videojs.browser = browser;

	/**
	 * Whether or not the browser supports touch events. Included for backward
	 * compatibility with 4.x, but deprecated. Use `videojs.browser.TOUCH_ENABLED`
	 * instead going forward.
	 *
	 * @deprecated since version 5.0
	 * @type {boolean}
	 */
	videojs.TOUCH_ENABLED = browser.TOUCH_ENABLED;

	/**
	 * Subclass an existing class
	 * Mimics ES6 subclassing with the `extend` keyword
	 *
	 * @borrows extend:extendFn as videojs.extend
	 */
	videojs.extend = _extend2['default'];

	/**
	 * Merge two options objects recursively
	 * Performs a deep merge like lodash.merge but **only merges plain objects**
	 * (not arrays, elements, anything else)
	 * Other values will be copied directly from the second object.
	 *
	 * @borrows merge-options:mergeOptions as videojs.mergeOptions
	 */
	videojs.mergeOptions = _mergeOptions3['default'];

	/**
	 * Change the context (this) of a function
	 *
	 * > NOTE: as of v5.0 we require an ES5 shim, so you should use the native
	 * `function() {}.bind(newContext);` instead of this.
	 *
	 * @borrows fn:bind as videojs.bind
	 */
	videojs.bind = Fn.bind;

	/**
	 * Create a Video.js player plugin.
	 * Plugins are only initialized when options for the plugin are included
	 * in the player options, or the plugin function on the player instance is
	 * called.
	 *
	 * @borrows plugin:plugin as videojs.plugin
	 */
	videojs.plugin = _plugins2['default'];

	/**
	 * Adding languages so that they're available to all players.
	 * Example: `videojs.addLanguage('es', { 'Hello': 'Hola' });`
	 *
	 * @param {string} code
	 *        The language code or dictionary property
	 *
	 * @param {Object} data
	 *        The data values to be translated
	 *
	 * @return {Object}
	 *         The resulting language dictionary object
	 */
	videojs.addLanguage = function (code, data) {
	  var _mergeOptions;

	  code = ('' + code).toLowerCase();

	  videojs.options.languages = (0, _mergeOptions3['default'])(videojs.options.languages, (_mergeOptions = {}, _mergeOptions[code] = data, _mergeOptions));

	  return videojs.options.languages[code];
	};

	/**
	 * Log messages
	 *
	 * @borrows log:log as videojs.log
	 */
	videojs.log = _log2['default'];

	/**
	 * Creates an emulated TimeRange object.
	 *
	 * @borrows time-ranges:createTimeRanges as videojs.createTimeRange
	 */
	/**
	 * @borrows time-ranges:createTimeRanges as videojs.createTimeRanges
	 */
	videojs.createTimeRange = videojs.createTimeRanges = _timeRanges.createTimeRanges;

	/**
	 * Format seconds as a time string, H:MM:SS or M:SS
	 * Supplying a guide (in seconds) will force a number of leading zeros
	 * to cover the length of the guide
	 *
	 * @borrows format-time:formatTime as videojs.formatTime
	 */
	videojs.formatTime = _formatTime2['default'];

	/**
	 * Resolve and parse the elements of a URL
	 *
	 * @borrows url:parseUrl as videojs.parseUrl
	 */
	videojs.parseUrl = Url.parseUrl;

	/**
	 * Returns whether the url passed is a cross domain request or not.
	 *
	 * @borrows url:isCrossOrigin as videojs.isCrossOrigin
	 */
	videojs.isCrossOrigin = Url.isCrossOrigin;

	/**
	 * Event target class.
	 *
	 * @borrows EventTarget as videojs.EventTarget
	 */
	videojs.EventTarget = _eventTarget2['default'];

	/**
	 * Add an event listener to element
	 * It stores the handler function in a separate cache object
	 * and adds a generic handler to the element's event,
	 * along with a unique id (guid) to the element.
	 *
	 * @borrows events:on as videojs.on
	 */
	videojs.on = Events.on;

	/**
	 * Trigger a listener only once for an event
	 *
	 * @borrows events:one as videojs.one
	 */
	videojs.one = Events.one;

	/**
	 * Removes event listeners from an element
	 *
	 * @borrows events:off as videojs.off
	 */
	videojs.off = Events.off;

	/**
	 * Trigger an event for an element
	 *
	 * @borrows events:trigger as videojs.trigger
	 */
	videojs.trigger = Events.trigger;

	/**
	 * A cross-browser XMLHttpRequest wrapper. Here's a simple example:
	 *
	 * @param {Object} options
	 *        settings for the request.
	 *
	 * @return {XMLHttpRequest|XDomainRequest}
	 *         The request object.
	 *
	 * @see https://github.com/Raynos/xhr
	 */
	videojs.xhr = _xhr2['default'];

	/**
	 * TextTrack class
	 *
	 * @borrows TextTrack as videojs.TextTrack
	 */
	videojs.TextTrack = _textTrack2['default'];

	/**
	 * export the AudioTrack class so that source handlers can create
	 * AudioTracks and then add them to the players AudioTrackList
	 *
	 * @borrows AudioTrack as videojs.AudioTrack
	 */
	videojs.AudioTrack = _audioTrack2['default'];

	/**
	 * export the VideoTrack class so that source handlers can create
	 * VideoTracks and then add them to the players VideoTrackList
	 *
	 * @borrows VideoTrack as videojs.VideoTrack
	 */
	videojs.VideoTrack = _videoTrack2['default'];

	/**
	 * Determines, via duck typing, whether or not a value is a DOM element.
	 *
	 * @borrows dom:isEl as videojs.isEl
	 */
	videojs.isEl = Dom.isEl;

	/**
	 * Determines, via duck typing, whether or not a value is a text node.
	 *
	 * @borrows dom:isTextNode as videojs.isTextNode
	 */
	videojs.isTextNode = Dom.isTextNode;

	/**
	 * Creates an element and applies properties.
	 *
	 * @borrows dom:createEl as videojs.createEl
	 */
	videojs.createEl = Dom.createEl;

	/**
	 * Check if an element has a CSS class
	 *
	 * @borrows dom:hasElClass as videojs.hasClass
	 */
	videojs.hasClass = Dom.hasElClass;

	/**
	 * Add a CSS class name to an element
	 *
	 * @borrows dom:addElClass as videojs.addClass
	 */
	videojs.addClass = Dom.addElClass;

	/**
	 * Remove a CSS class name from an element
	 *
	 * @borrows dom:removeElClass as videojs.removeClass
	 */
	videojs.removeClass = Dom.removeElClass;

	/**
	 * Adds or removes a CSS class name on an element depending on an optional
	 * condition or the presence/absence of the class name.
	 *
	 * @borrows dom:toggleElClass as videojs.toggleClass
	 */
	videojs.toggleClass = Dom.toggleElClass;

	/**
	 * Apply attributes to an HTML element.
	 *
	 * @borrows dom:setElAttributes as videojs.setAttribute
	 */
	videojs.setAttributes = Dom.setElAttributes;

	/**
	 * Get an element's attribute values, as defined on the HTML tag
	 * Attributes are not the same as properties. They're defined on the tag
	 * or with setAttribute (which shouldn't be used with HTML)
	 * This will return true or false for boolean attributes.
	 *
	 * @borrows dom:getElAttributes as videojs.getAttributes
	 */
	videojs.getAttributes = Dom.getElAttributes;

	/**
	 * Empties the contents of an element.
	 *
	 * @borrows dom:emptyEl as videojs.emptyEl
	 */
	videojs.emptyEl = Dom.emptyEl;

	/**
	 * Normalizes and appends content to an element.
	 *
	 * The content for an element can be passed in multiple types and
	 * combinations, whose behavior is as follows:
	 *
	 * - String
	 *   Normalized into a text node.
	 *
	 * - Element, TextNode
	 *   Passed through.
	 *
	 * - Array
	 *   A one-dimensional array of strings, elements, nodes, or functions (which
	 *   return single strings, elements, or nodes).
	 *
	 * - Function
	 *   If the sole argument, is expected to produce a string, element,
	 *   node, or array.
	 *
	 * @borrows dom:appendContents as videojs.appendContet
	 */
	videojs.appendContent = Dom.appendContent;

	/**
	 * Normalizes and inserts content into an element; this is identical to
	 * `appendContent()`, except it empties the element first.
	 *
	 * The content for an element can be passed in multiple types and
	 * combinations, whose behavior is as follows:
	 *
	 * - String
	 *   Normalized into a text node.
	 *
	 * - Element, TextNode
	 *   Passed through.
	 *
	 * - Array
	 *   A one-dimensional array of strings, elements, nodes, or functions (which
	 *   return single strings, elements, or nodes).
	 *
	 * - Function
	 *   If the sole argument, is expected to produce a string, element,
	 *   node, or array.
	 *
	 * @borrows dom:insertContent as videojs.insertContent
	 */
	videojs.insertContent = Dom.insertContent;

	/**
	 * A safe getComputedStyle with an IE8 fallback.
	 *
	 * This is because in Firefox, if the player is loaded in an iframe with `display:none`,
	 * then `getComputedStyle` returns `null`, so, we do a null-check to make sure
	 * that the player doesn't break in these cases.
	 * See https://bugzilla.mozilla.org/show_bug.cgi?id=548397 for more details.
	 *
	 * @borrows computed-style:computedStyle as videojs.computedStyle
	 */
	videojs.computedStyle = _computedStyle2['default'];

	/*
	 * Custom Universal Module Definition (UMD)
	 *
	 * Video.js will never be a non-browser lib so we can simplify UMD a bunch and
	 * still support requirejs and browserify. This also needs to be closure
	 * compiler compatible, so string keys are used.
	 */
	if (true) {
	  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
	    return videojs;
	  }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	  // checking that module is an object too because of umdjs/umd#35
	} else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && (typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object') {
	  module.exports = videojs;
	}

	exports['default'] = videojs;


/***/ },
/* 255 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {if (typeof window !== "undefined") {
	    module.exports = window;
	} else if (typeof global !== "undefined") {
	    module.exports = global;
	} else if (typeof self !== "undefined"){
	    module.exports = self;
	} else {
	    module.exports = {};
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var topLevel = typeof global !== 'undefined' ? global :
	    typeof window !== 'undefined' ? window : {}
	var minDoc = __webpack_require__(257);

	if (typeof document !== 'undefined') {
	    module.exports = document;
	} else {
	    var doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

	    if (!doccy) {
	        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
	    }

	    module.exports = doccy;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 257 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.hasLoaded = exports.autoSetupTimeout = exports.autoSetup = undefined;

	var _dom = __webpack_require__(259);

	var Dom = _interopRequireWildcard(_dom);

	var _events = __webpack_require__(265);

	var Events = _interopRequireWildcard(_events);

	var _document = __webpack_require__(256);

	var _document2 = _interopRequireDefault(_document);

	var _window = __webpack_require__(255);

	var _window2 = _interopRequireDefault(_window);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	/**
	 * @file setup.js - Functions for setting up a player without
	 * user interaction based on the data-setup `attribute` of the video tag.
	 *
	 * @module setup
	 */
	var _windowLoaded = false;
	var videojs = void 0;

	/**
	 * Set up any tags that have a data-setup `attribute` when the player is started.
	 */
	var autoSetup = function autoSetup() {

	  // Protect against breakage in non-browser environments.
	  if (!Dom.isReal()) {
	    return;
	  }

	  // One day, when we stop supporting IE8, go back to this, but in the meantime...*hack hack hack*
	  // var vids = Array.prototype.slice.call(document.getElementsByTagName('video'));
	  // var audios = Array.prototype.slice.call(document.getElementsByTagName('audio'));
	  // var mediaEls = vids.concat(audios);

	  // Because IE8 doesn't support calling slice on a node list, we need to loop
	  // through each list of elements to build up a new, combined list of elements.
	  var vids = _document2['default'].getElementsByTagName('video');
	  var audios = _document2['default'].getElementsByTagName('audio');
	  var mediaEls = [];

	  if (vids && vids.length > 0) {
	    for (var i = 0, e = vids.length; i < e; i++) {
	      mediaEls.push(vids[i]);
	    }
	  }

	  if (audios && audios.length > 0) {
	    for (var _i = 0, _e = audios.length; _i < _e; _i++) {
	      mediaEls.push(audios[_i]);
	    }
	  }

	  // Check if any media elements exist
	  if (mediaEls && mediaEls.length > 0) {

	    for (var _i2 = 0, _e2 = mediaEls.length; _i2 < _e2; _i2++) {
	      var mediaEl = mediaEls[_i2];

	      // Check if element exists, has getAttribute func.
	      // IE seems to consider typeof el.getAttribute == 'object' instead of
	      // 'function' like expected, at least when loading the player immediately.
	      if (mediaEl && mediaEl.getAttribute) {

	        // Make sure this player hasn't already been set up.
	        if (mediaEl.player === undefined) {
	          var options = mediaEl.getAttribute('data-setup');

	          // Check if data-setup attr exists.
	          // We only auto-setup if they've added the data-setup attr.
	          if (options !== null) {
	            // Create new video.js instance.
	            videojs(mediaEl);
	          }
	        }

	        // If getAttribute isn't defined, we need to wait for the DOM.
	      } else {
	        autoSetupTimeout(1);
	        break;
	      }
	    }

	    // No videos were found, so keep looping unless page is finished loading.
	  } else if (!_windowLoaded) {
	    autoSetupTimeout(1);
	  }
	};

	/**
	 * Wait until the page is loaded before running autoSetup. This will be called in
	 * autoSetup if `hasLoaded` returns false.
	 *
	 * @param {number} wait
	 *        How long to wait in ms
	 *
	 * @param {videojs} [vjs]
	 *        The videojs library function
	 */
	function autoSetupTimeout(wait, vjs) {
	  if (vjs) {
	    videojs = vjs;
	  }

	  _window2['default'].setTimeout(autoSetup, wait);
	}

	if (Dom.isReal() && _document2['default'].readyState === 'complete') {
	  _windowLoaded = true;
	} else {
	  /**
	   * Listen for the load event on window, and set _windowLoaded to true.
	   *
	   * @listens load
	   */
	  Events.one(_window2['default'], 'load', function () {
	    _windowLoaded = true;
	  });
	}

	/**
	 * check if the document has been loaded
	 */
	var hasLoaded = function hasLoaded() {
	  return _windowLoaded;
	};

	exports.autoSetup = autoSetup;
	exports.autoSetupTimeout = autoSetupTimeout;
	exports.hasLoaded = hasLoaded;


/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.$$ = exports.$ = undefined;

	var _templateObject = _taggedTemplateLiteralLoose(['Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.'], ['Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.']);

	exports.isReal = isReal;
	exports.isEl = isEl;
	exports.getEl = getEl;
	exports.createEl = createEl;
	exports.textContent = textContent;
	exports.insertElFirst = insertElFirst;
	exports.getElData = getElData;
	exports.hasElData = hasElData;
	exports.removeElData = removeElData;
	exports.hasElClass = hasElClass;
	exports.addElClass = addElClass;
	exports.removeElClass = removeElClass;
	exports.toggleElClass = toggleElClass;
	exports.setElAttributes = setElAttributes;
	exports.getElAttributes = getElAttributes;
	exports.getAttribute = getAttribute;
	exports.setAttribute = setAttribute;
	exports.removeAttribute = removeAttribute;
	exports.blockTextSelection = blockTextSelection;
	exports.unblockTextSelection = unblockTextSelection;
	exports.findElPosition = findElPosition;
	exports.getPointerPosition = getPointerPosition;
	exports.isTextNode = isTextNode;
	exports.emptyEl = emptyEl;
	exports.normalizeContent = normalizeContent;
	exports.appendContent = appendContent;
	exports.insertContent = insertContent;

	var _document = __webpack_require__(256);

	var _document2 = _interopRequireDefault(_document);

	var _window = __webpack_require__(255);

	var _window2 = _interopRequireDefault(_window);

	var _guid = __webpack_require__(260);

	var Guid = _interopRequireWildcard(_guid);

	var _log = __webpack_require__(261);

	var _log2 = _interopRequireDefault(_log);

	var _tsml = __webpack_require__(264);

	var _tsml2 = _interopRequireDefault(_tsml);

	var _obj = __webpack_require__(263);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _taggedTemplateLiteralLoose(strings, raw) { strings.raw = raw; return strings; } /**
	                                                                                           * @file dom.js
	                                                                                           * @module dom
	                                                                                           */


	/**
	 * Detect if a value is a string with any non-whitespace characters.
	 *
	 * @param {string} str
	 *        The string to check
	 *
	 * @return {boolean}
	 *         - True if the string is non-blank
	 *         - False otherwise
	 *
	 */
	function isNonBlankString(str) {
	  return typeof str === 'string' && /\S/.test(str);
	}

	/**
	 * Throws an error if the passed string has whitespace. This is used by
	 * class methods to be relatively consistent with the classList API.
	 *
	 * @param {string} str
	 *         The string to check for whitespace.
	 *
	 * @throws {Error}
	 *         Throws an error if there is whitespace in the string.
	 *
	 */
	function throwIfWhitespace(str) {
	  if (/\s/.test(str)) {
	    throw new Error('class has illegal whitespace characters');
	  }
	}

	/**
	 * Produce a regular expression for matching a className within an elements className.
	 *
	 * @param {string} className
	 *         The className to generate the RegExp for.
	 *
	 * @return {RegExp}
	 *         The RegExp that will check for a specific `className` in an elements
	 *         className.
	 */
	function classRegExp(className) {
	  return new RegExp('(^|\\s)' + className + '($|\\s)');
	}

	/**
	 * Whether the current DOM interface appears to be real.
	 *
	 * @return {Boolean}
	 */
	function isReal() {
	  return (

	    // Both document and window will never be undefined thanks to `global`.
	    _document2['default'] === _window2['default'].document &&

	    // In IE < 9, DOM methods return "object" as their type, so all we can
	    // confidently check is that it exists.
	    typeof _document2['default'].createElement !== 'undefined'
	  );
	}

	/**
	 * Determines, via duck typing, whether or not a value is a DOM element.
	 *
	 * @param {Mixed} value
	 *        The thing to check
	 *
	 * @return {boolean}
	 *         - True if it is a DOM element
	 *         - False otherwise
	 */
	function isEl(value) {
	  return (0, _obj.isObject)(value) && value.nodeType === 1;
	}

	/**
	 * Creates functions to query the DOM using a given method.
	 *
	 * @param {string} method
	 *         The method to create the query with.
	 *
	 * @return {Function}
	 *         The query method
	 */
	function createQuerier(method) {
	  return function (selector, context) {
	    if (!isNonBlankString(selector)) {
	      return _document2['default'][method](null);
	    }
	    if (isNonBlankString(context)) {
	      context = _document2['default'].querySelector(context);
	    }

	    var ctx = isEl(context) ? context : _document2['default'];

	    return ctx[method] && ctx[method](selector);
	  };
	}

	/**
	 * Shorthand for document.getElementById()
	 * Also allows for CSS (jQuery) ID syntax. But nothing other than IDs.
	 *
	 * @param {string} id
	 *         The id of the element to get
	 *
	 * @return {Element|null}
	 *         Element with supplied ID or null if there wasn't one.
	 */
	function getEl(id) {
	  if (id.indexOf('#') === 0) {
	    id = id.slice(1);
	  }

	  return _document2['default'].getElementById(id);
	}

	/**
	 * Creates an element and applies properties.
	 *
	 * @param {string} [tagName='div']
	 *         Name of tag to be created.
	 *
	 * @param {Object} [properties={}]
	 *         Element properties to be applied.
	 *
	 * @param {Object} [attributes={}]
	 *         Element attributes to be applied.
	 *
	 * @param {String|Element|TextNode|Array|Function} [content]
	 *         Contents for the element (see: {@link dom:normalizeContent})
	 *
	 * @return {Element}
	 *         The element that was created.
	 */
	function createEl() {
	  var tagName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'div';
	  var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	  var content = arguments[3];

	  var el = _document2['default'].createElement(tagName);

	  Object.getOwnPropertyNames(properties).forEach(function (propName) {
	    var val = properties[propName];

	    // See #2176
	    // We originally were accepting both properties and attributes in the
	    // same object, but that doesn't work so well.
	    if (propName.indexOf('aria-') !== -1 || propName === 'role' || propName === 'type') {
	      _log2['default'].warn((0, _tsml2['default'])(_templateObject, propName, val));
	      el.setAttribute(propName, val);

	      // Handle textContent since it's not supported everywhere and we have a
	      // method for it.
	    } else if (propName === 'textContent') {
	      textContent(el, val);
	    } else {
	      el[propName] = val;
	    }
	  });

	  Object.getOwnPropertyNames(attributes).forEach(function (attrName) {
	    el.setAttribute(attrName, attributes[attrName]);
	  });

	  if (content) {
	    appendContent(el, content);
	  }

	  return el;
	}

	/**
	 * Injects text into an element, replacing any existing contents entirely.
	 *
	 * @param {Element} el
	 *        The element to add text content into
	 *
	 * @param {string} text
	 *        The text content to add.
	 *
	 * @return {Element}
	 *         The element with added text content.
	 */
	function textContent(el, text) {
	  if (typeof el.textContent === 'undefined') {
	    el.innerText = text;
	  } else {
	    el.textContent = text;
	  }
	  return el;
	}

	/**
	 * Insert an element as the first child node of another
	 *
	 * @param {Element} child
	 *        Element to insert
	 *
	 * @param {Element} parent
	 *        Element to insert child into
	 *
	 */
	function insertElFirst(child, parent) {
	  if (parent.firstChild) {
	    parent.insertBefore(child, parent.firstChild);
	  } else {
	    parent.appendChild(child);
	  }
	}

	/**
	 * Element Data Store. Allows for binding data to an element without putting it directly on the element.
	 * Ex. Event listeners are stored here.
	 * (also from jsninja.com, slightly modified and updated for closure compiler)
	 *
	 * @type {Object}
	 * @private
	 */
	var elData = {};

	/*
	 * Unique attribute name to store an element's guid in
	 *
	 * @type {string}
	 * @constant
	 * @private
	 */
	var elIdAttr = 'vdata' + new Date().getTime();

	/**
	 * Returns the cache object where data for an element is stored
	 *
	 * @param {Element} el
	 *        Element to store data for.
	 *
	 * @return {Object}
	 *         The cache object for that el that was passed in.
	 */
	function getElData(el) {
	  var id = el[elIdAttr];

	  if (!id) {
	    id = el[elIdAttr] = Guid.newGUID();
	  }

	  if (!elData[id]) {
	    elData[id] = {};
	  }

	  return elData[id];
	}

	/**
	 * Returns whether or not an element has cached data
	 *
	 * @param {Element} el
	 *        Check if this element has cached data.
	 *
	 * @return {boolean}
	 *         - True if the DOM element has cached data.
	 *         - False otherwise.
	 */
	function hasElData(el) {
	  var id = el[elIdAttr];

	  if (!id) {
	    return false;
	  }

	  return !!Object.getOwnPropertyNames(elData[id]).length;
	}

	/**
	 * Delete data for the element from the cache and the guid attr from getElementById
	 *
	 * @param {Element} el
	 *        Remove cached data for this element.
	 */
	function removeElData(el) {
	  var id = el[elIdAttr];

	  if (!id) {
	    return;
	  }

	  // Remove all stored data
	  delete elData[id];

	  // Remove the elIdAttr property from the DOM node
	  try {
	    delete el[elIdAttr];
	  } catch (e) {
	    if (el.removeAttribute) {
	      el.removeAttribute(elIdAttr);
	    } else {
	      // IE doesn't appear to support removeAttribute on the document element
	      el[elIdAttr] = null;
	    }
	  }
	}

	/**
	 * Check if an element has a CSS class
	 *
	 * @param {Element} element
	 *        Element to check
	 *
	 * @param {string} classToCheck
	 *        Class name to check for
	 *
	 * @return {boolean}
	 *         - True if the element had the class
	 *         - False otherwise.
	 *
	 * @throws {Error}
	 *         Throws an error if `classToCheck` has white space.
	 */
	function hasElClass(element, classToCheck) {
	  throwIfWhitespace(classToCheck);
	  if (element.classList) {
	    return element.classList.contains(classToCheck);
	  }
	  return classRegExp(classToCheck).test(element.className);
	}

	/**
	 * Add a CSS class name to an element
	 *
	 * @param {Element} element
	 *        Element to add class name to.
	 *
	 * @param {string} classToAdd
	 *        Class name to add.
	 *
	 * @return {Element}
	 *         The dom element with the added class name.
	 */
	function addElClass(element, classToAdd) {
	  if (element.classList) {
	    element.classList.add(classToAdd);

	    // Don't need to `throwIfWhitespace` here because `hasElClass` will do it
	    // in the case of classList not being supported.
	  } else if (!hasElClass(element, classToAdd)) {
	    element.className = (element.className + ' ' + classToAdd).trim();
	  }

	  return element;
	}

	/**
	 * Remove a CSS class name from an element
	 *
	 * @param {Element} element
	 *        Element to remove a class name from.
	 *
	 * @param {string} classToRemove
	 *        Class name to remove
	 *
	 * @return {Element}
	 *         The dom element with class name removed.
	 */
	function removeElClass(element, classToRemove) {
	  if (element.classList) {
	    element.classList.remove(classToRemove);
	  } else {
	    throwIfWhitespace(classToRemove);
	    element.className = element.className.split(/\s+/).filter(function (c) {
	      return c !== classToRemove;
	    }).join(' ');
	  }

	  return element;
	}

	/**
	 * The callback definition for toggleElClass.
	 *
	 * @callback Dom~PredicateCallback
	 * @param {Element} element
	 *        The DOM element of the Component.
	 *
	 * @param {string} classToToggle
	 *        The `className` that wants to be toggled
	 *
	 * @return {boolean|undefined}
	 *         - If true the `classToToggle` will get added to `element`.
	 *         - If false the `classToToggle` will get removed from `element`.
	 *         - If undefined this callback will be ignored
	 */

	/**
	 * Adds or removes a CSS class name on an element depending on an optional
	 * condition or the presence/absence of the class name.
	 *
	 * @param {Element} element
	 *        The element to toggle a class name on.
	 *
	 * @param {string} classToToggle
	 *        The class that should be toggled
	 *
	 * @param {boolean|PredicateCallback} [predicate]
	 *        See the return value for {@link Dom~PredicateCallback}
	 *
	 * @return {Element}
	 *         The element with a class that has been toggled.
	 */
	function toggleElClass(element, classToToggle, predicate) {

	  // This CANNOT use `classList` internally because IE does not support the
	  // second parameter to the `classList.toggle()` method! Which is fine because
	  // `classList` will be used by the add/remove functions.
	  var has = hasElClass(element, classToToggle);

	  if (typeof predicate === 'function') {
	    predicate = predicate(element, classToToggle);
	  }

	  if (typeof predicate !== 'boolean') {
	    predicate = !has;
	  }

	  // If the necessary class operation matches the current state of the
	  // element, no action is required.
	  if (predicate === has) {
	    return;
	  }

	  if (predicate) {
	    addElClass(element, classToToggle);
	  } else {
	    removeElClass(element, classToToggle);
	  }

	  return element;
	}

	/**
	 * Apply attributes to an HTML element.
	 *
	 * @param {Element} el
	 *        Element to add attributes to.
	 *
	 * @param {Object} [attributes]
	 *        Attributes to be applied.
	 */
	function setElAttributes(el, attributes) {
	  Object.getOwnPropertyNames(attributes).forEach(function (attrName) {
	    var attrValue = attributes[attrName];

	    if (attrValue === null || typeof attrValue === 'undefined' || attrValue === false) {
	      el.removeAttribute(attrName);
	    } else {
	      el.setAttribute(attrName, attrValue === true ? '' : attrValue);
	    }
	  });
	}

	/**
	 * Get an element's attribute values, as defined on the HTML tag
	 * Attributes are not the same as properties. They're defined on the tag
	 * or with setAttribute (which shouldn't be used with HTML)
	 * This will return true or false for boolean attributes.
	 *
	 * @param {Element} tag
	 *        Element from which to get tag attributes.
	 *
	 * @return {Object}
	 *         All attributes of the element.
	 */
	function getElAttributes(tag) {
	  var obj = {};

	  // known boolean attributes
	  // we can check for matching boolean properties, but older browsers
	  // won't know about HTML5 boolean attributes that we still read from
	  var knownBooleans = ',' + 'autoplay,controls,loop,muted,default' + ',';

	  if (tag && tag.attributes && tag.attributes.length > 0) {
	    var attrs = tag.attributes;

	    for (var i = attrs.length - 1; i >= 0; i--) {
	      var attrName = attrs[i].name;
	      var attrVal = attrs[i].value;

	      // check for known booleans
	      // the matching element property will return a value for typeof
	      if (typeof tag[attrName] === 'boolean' || knownBooleans.indexOf(',' + attrName + ',') !== -1) {
	        // the value of an included boolean attribute is typically an empty
	        // string ('') which would equal false if we just check for a false value.
	        // we also don't want support bad code like autoplay='false'
	        attrVal = attrVal !== null ? true : false;
	      }

	      obj[attrName] = attrVal;
	    }
	  }

	  return obj;
	}

	/**
	 * Get the value of an element's attribute
	 *
	 * @param {Element} el
	 *        A DOM element
	 *
	 * @param {string} attribute
	 *        Attribute to get the value of
	 *
	 * @return {string}
	 *         value of the attribute
	 */
	function getAttribute(el, attribute) {
	  return el.getAttribute(attribute);
	}

	/**
	 * Set the value of an element's attribute
	 *
	 * @param {Element} el
	 *        A DOM element
	 *
	 * @param {string} attribute
	 *        Attribute to set
	 *
	 * @param {string} value
	 *        Value to set the attribute to
	 */
	function setAttribute(el, attribute, value) {
	  el.setAttribute(attribute, value);
	}

	/**
	 * Remove an element's attribute
	 *
	 * @param {Element} el
	 *        A DOM element
	 *
	 * @param {string} attribute
	 *        Attribute to remove
	 */
	function removeAttribute(el, attribute) {
	  el.removeAttribute(attribute);
	}

	/**
	 * Attempt to block the ability to select text while dragging controls
	 */
	function blockTextSelection() {
	  _document2['default'].body.focus();
	  _document2['default'].onselectstart = function () {
	    return false;
	  };
	}

	/**
	 * Turn off text selection blocking
	 */
	function unblockTextSelection() {
	  _document2['default'].onselectstart = function () {
	    return true;
	  };
	}

	/**
	 * The postion of a DOM element on the page.
	 *
	 * @typedef {Object} Dom~Position
	 *
	 * @property {number} left
	 *           Pixels to the left
	 *
	 * @property {number} top
	 *           Pixels on top
	 */

	/**
	 * Offset Left.
	 * getBoundingClientRect technique from
	 * John Resig
	 *
	 * @see http://ejohn.org/blog/getboundingclientrect-is-awesome/
	 *
	 * @param {Element} el
	 *        Element from which to get offset
	 *
	 * @return {Dom~Position}
	 *         The position of the element that was passed in.
	 */
	function findElPosition(el) {
	  var box = void 0;

	  if (el.getBoundingClientRect && el.parentNode) {
	    box = el.getBoundingClientRect();
	  }

	  if (!box) {
	    return {
	      left: 0,
	      top: 0
	    };
	  }

	  var docEl = _document2['default'].documentElement;
	  var body = _document2['default'].body;

	  var clientLeft = docEl.clientLeft || body.clientLeft || 0;
	  var scrollLeft = _window2['default'].pageXOffset || body.scrollLeft;
	  var left = box.left + scrollLeft - clientLeft;

	  var clientTop = docEl.clientTop || body.clientTop || 0;
	  var scrollTop = _window2['default'].pageYOffset || body.scrollTop;
	  var top = box.top + scrollTop - clientTop;

	  // Android sometimes returns slightly off decimal values, so need to round
	  return {
	    left: Math.round(left),
	    top: Math.round(top)
	  };
	}

	/**
	 * x and y coordinates for a dom element or mouse pointer
	 *
	 * @typedef {Object} Dom~Coordinates
	 *
	 * @property {number} x
	 *           x coordinate in pixels
	 *
	 * @property {number} y
	 *           y coordinate in pixels
	 */

	/**
	 * Get pointer position in element
	 * Returns an object with x and y coordinates.
	 * The base on the coordinates are the bottom left of the element.
	 *
	 * @param {Element} el
	 *        Element on which to get the pointer position on
	 *
	 * @param {EventTarget~Event} event
	 *        Event object
	 *
	 * @return {Dom~Coordinates}
	 *         A Coordinates object corresponding to the mouse position.
	 *
	 */
	function getPointerPosition(el, event) {
	  var position = {};
	  var box = findElPosition(el);
	  var boxW = el.offsetWidth;
	  var boxH = el.offsetHeight;

	  var boxY = box.top;
	  var boxX = box.left;
	  var pageY = event.pageY;
	  var pageX = event.pageX;

	  if (event.changedTouches) {
	    pageX = event.changedTouches[0].pageX;
	    pageY = event.changedTouches[0].pageY;
	  }

	  position.y = Math.max(0, Math.min(1, (boxY - pageY + boxH) / boxH));
	  position.x = Math.max(0, Math.min(1, (pageX - boxX) / boxW));

	  return position;
	}

	/**
	 * Determines, via duck typing, whether or not a value is a text node.
	 *
	 * @param {Mixed} value
	 *        Check if this value is a text node.
	 *
	 * @return {boolean}
	 *         - True if it is a text node
	 *         - False otherwise
	 */
	function isTextNode(value) {
	  return (0, _obj.isObject)(value) && value.nodeType === 3;
	}

	/**
	 * Empties the contents of an element.
	 *
	 * @param {Element} el
	 *        The element to empty children from
	 *
	 * @return {Element}
	 *         The element with no children
	 */
	function emptyEl(el) {
	  while (el.firstChild) {
	    el.removeChild(el.firstChild);
	  }
	  return el;
	}

	/**
	 * Normalizes content for eventual insertion into the DOM.
	 *
	 * This allows a wide range of content definition methods, but protects
	 * from falling into the trap of simply writing to `innerHTML`, which is
	 * an XSS concern.
	 *
	 * The content for an element can be passed in multiple types and
	 * combinations, whose behavior is as follows:
	 *
	 * @param {String|Element|TextNode|Array|Function} content
	 *        - String: Normalized into a text node.
	 *        - Element/TextNode: Passed through.
	 *        - Array: A one-dimensional array of strings, elements, nodes, or functions
	 *          (which return single strings, elements, or nodes).
	 *        - Function: If the sole argument, is expected to produce a string, element,
	 *          node, or array as defined above.
	 *
	 * @return {Array}
	 *         All of the content that was passed in normalized.
	 */
	function normalizeContent(content) {

	  // First, invoke content if it is a function. If it produces an array,
	  // that needs to happen before normalization.
	  if (typeof content === 'function') {
	    content = content();
	  }

	  // Next up, normalize to an array, so one or many items can be normalized,
	  // filtered, and returned.
	  return (Array.isArray(content) ? content : [content]).map(function (value) {

	    // First, invoke value if it is a function to produce a new value,
	    // which will be subsequently normalized to a Node of some kind.
	    if (typeof value === 'function') {
	      value = value();
	    }

	    if (isEl(value) || isTextNode(value)) {
	      return value;
	    }

	    if (typeof value === 'string' && /\S/.test(value)) {
	      return _document2['default'].createTextNode(value);
	    }
	  }).filter(function (value) {
	    return value;
	  });
	}

	/**
	 * Normalizes and appends content to an element.
	 *
	 * @param {Element} el
	 *        Element to append normalized content to.
	 *
	 *
	 * @param {String|Element|TextNode|Array|Function} content
	 *        See the `content` argument of {@link dom:normalizeContent}
	 *
	 * @return {Element}
	 *         The element with appended normalized content.
	 */
	function appendContent(el, content) {
	  normalizeContent(content).forEach(function (node) {
	    return el.appendChild(node);
	  });
	  return el;
	}

	/**
	 * Normalizes and inserts content into an element; this is identical to
	 * `appendContent()`, except it empties the element first.
	 *
	 * @param {Element} el
	 *        Element to insert normalized content into.
	 *
	 * @param {String|Element|TextNode|Array|Function} content
	 *        See the `content` argument of {@link dom:normalizeContent}
	 *
	 * @return {Element}
	 *         The element with inserted normalized content.
	 *
	 */
	function insertContent(el, content) {
	  return appendContent(emptyEl(el), content);
	}

	/**
	 * Finds a single DOM element matching `selector` within the optional
	 * `context` of another DOM element (defaulting to `document`).
	 *
	 * @param {string} selector
	 *        A valid CSS selector, which will be passed to `querySelector`.
	 *
	 * @param {Element|String} [context=document]
	 *        A DOM element within which to query. Can also be a selector
	 *        string in which case the first matching element will be used
	 *        as context. If missing (or no element matches selector), falls
	 *        back to `document`.
	 *
	 * @return {Element|null}
	 *         The element that was found or null.
	 */
	var $ = exports.$ = createQuerier('querySelector');

	/**
	 * Finds a all DOM elements matching `selector` within the optional
	 * `context` of another DOM element (defaulting to `document`).
	 *
	 * @param {string} selector
	 *           A valid CSS selector, which will be passed to `querySelectorAll`.
	 *
	 * @param {Element|String} [context=document]
	 *           A DOM element within which to query. Can also be a selector
	 *           string in which case the first matching element will be used
	 *           as context. If missing (or no element matches selector), falls
	 *           back to `document`.
	 *
	 * @return {NodeList}
	 *         A element list of elements that were found. Will be empty if none were found.
	 *
	 */
	var $$ = exports.$$ = createQuerier('querySelectorAll');


/***/ },
/* 260 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports.newGUID = newGUID;
	/**
	 * @file guid.js
	 * @module guid
	 */

	/**
	 * Unique ID for an element or function
	 * @type {Number}
	 */
	var _guid = 1;

	/**
	 * Get a unique auto-incrementing ID by number that has not been returned before.
	 *
	 * @return {number}
	 *         A new unique ID.
	 */
	function newGUID() {
	  return _guid++;
	}


/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.logByType = undefined;

	var _window = __webpack_require__(255);

	var _window2 = _interopRequireDefault(_window);

	var _browser = __webpack_require__(262);

	var _obj = __webpack_require__(263);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var log = void 0;

	/**
	 * Log messages to the console and history based on the type of message
	 *
	 * @param  {string} type
	 *         The name of the console method to use.
	 *
	 * @param  {Array} args
	 *         The arguments to be passed to the matching console method.
	 *
	 * @param  {boolean} [stringify]
	 *         By default, only old IEs should get console argument stringification,
	 *         but this is exposed as a parameter to facilitate testing.
	 */
	/**
	 * @file log.js
	 * @module log
	 */
	var logByType = exports.logByType = function logByType(type, args) {
	  var stringify = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !!_browser.IE_VERSION && _browser.IE_VERSION < 11;


	  if (type !== 'log') {

	    // add the type to the front of the message when it's not "log"
	    args.unshift(type.toUpperCase() + ':');
	  }

	  // add to history
	  log.history.push(args);

	  // add console prefix after adding to history
	  args.unshift('VIDEOJS:');

	  // If there's no console then don't try to output messages, but they will
	  // still be stored in `log.history`.
	  //
	  // Was setting these once outside of this function, but containing them
	  // in the function makes it easier to test cases where console doesn't exist
	  // when the module is executed.
	  var fn = _window2['default'].console && _window2['default'].console[type];

	  // Bail out if there's no console.
	  if (!fn) {
	    return;
	  }

	  // IEs previous to 11 log objects uselessly as "[object Object]"; so, JSONify
	  // objects and arrays for those less-capable browsers.
	  if (stringify) {
	    args = args.map(function (a) {
	      if ((0, _obj.isObject)(a) || Array.isArray(a)) {
	        try {
	          return JSON.stringify(a);
	        } catch (x) {
	          return String(a);
	        }
	      }

	      // Cast to string before joining, so we get null and undefined explicitly
	      // included in output (as we would in a modern console).
	      return String(a);
	    }).join(' ');
	  }

	  // Old IE versions do not allow .apply() for console methods (they are
	  // reported as objects rather than functions).
	  if (!fn.apply) {
	    fn(args);
	  } else {
	    fn[Array.isArray(args) ? 'apply' : 'call'](_window2['default'].console, args);
	  }
	};

	/**
	 * Log plain debug messages
	 *
	 * @param {Mixed[]} args
	 *        One or more messages or objects that should be logged.
	 */
	log = function log() {
	  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  logByType('log', args);
	};

	/**
	 * Keep a history of log messages
	 *
	 * @type {Array}
	 */
	log.history = [];

	/**
	 * Log error messages
	 *
	 * @param {Mixed[]} args
	 *        One or more messages or objects that should be logged as an error
	 */
	log.error = function () {
	  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	    args[_key2] = arguments[_key2];
	  }

	  return logByType('error', args);
	};

	/**
	 * Log warning messages
	 *
	 * @param {Mixed[]} args
	 *        One or more messages or objects that should be logged as a warning.
	 */
	log.warn = function () {
	  for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	    args[_key3] = arguments[_key3];
	  }

	  return logByType('warn', args);
	};

	exports['default'] = log;


/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.BACKGROUND_SIZE_SUPPORTED = exports.TOUCH_ENABLED = exports.IS_ANY_SAFARI = exports.IS_SAFARI = exports.IE_VERSION = exports.IS_IE8 = exports.IS_CHROME = exports.IS_EDGE = exports.IS_FIREFOX = exports.IS_NATIVE_ANDROID = exports.IS_OLD_ANDROID = exports.ANDROID_VERSION = exports.IS_ANDROID = exports.IOS_VERSION = exports.IS_IOS = exports.IS_IPOD = exports.IS_IPHONE = exports.IS_IPAD = undefined;

	var _dom = __webpack_require__(259);

	var Dom = _interopRequireWildcard(_dom);

	var _window = __webpack_require__(255);

	var _window2 = _interopRequireDefault(_window);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	/**
	 * @file browser.js
	 * @module browser
	 */
	var USER_AGENT = _window2['default'].navigator && _window2['default'].navigator.userAgent || '';
	var webkitVersionMap = /AppleWebKit\/([\d.]+)/i.exec(USER_AGENT);
	var appleWebkitVersion = webkitVersionMap ? parseFloat(webkitVersionMap.pop()) : null;

	/*
	 * Device is an iPhone
	 *
	 * @type {Boolean}
	 * @constant
	 * @private
	 */
	var IS_IPAD = exports.IS_IPAD = /iPad/i.test(USER_AGENT);

	// The Facebook app's UIWebView identifies as both an iPhone and iPad, so
	// to identify iPhones, we need to exclude iPads.
	// http://artsy.github.io/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing/
	var IS_IPHONE = exports.IS_IPHONE = /iPhone/i.test(USER_AGENT) && !IS_IPAD;
	var IS_IPOD = exports.IS_IPOD = /iPod/i.test(USER_AGENT);
	var IS_IOS = exports.IS_IOS = IS_IPHONE || IS_IPAD || IS_IPOD;

	var IOS_VERSION = exports.IOS_VERSION = function () {
	  var match = USER_AGENT.match(/OS (\d+)_/i);

	  if (match && match[1]) {
	    return match[1];
	  }
	  return null;
	}();

	var IS_ANDROID = exports.IS_ANDROID = /Android/i.test(USER_AGENT);
	var ANDROID_VERSION = exports.ANDROID_VERSION = function () {
	  // This matches Android Major.Minor.Patch versions
	  // ANDROID_VERSION is Major.Minor as a Number, if Minor isn't available, then only Major is returned
	  var match = USER_AGENT.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i);

	  if (!match) {
	    return null;
	  }

	  var major = match[1] && parseFloat(match[1]);
	  var minor = match[2] && parseFloat(match[2]);

	  if (major && minor) {
	    return parseFloat(match[1] + '.' + match[2]);
	  } else if (major) {
	    return major;
	  }
	  return null;
	}();

	// Old Android is defined as Version older than 2.3, and requiring a webkit version of the android browser
	var IS_OLD_ANDROID = exports.IS_OLD_ANDROID = IS_ANDROID && /webkit/i.test(USER_AGENT) && ANDROID_VERSION < 2.3;
	var IS_NATIVE_ANDROID = exports.IS_NATIVE_ANDROID = IS_ANDROID && ANDROID_VERSION < 5 && appleWebkitVersion < 537;

	var IS_FIREFOX = exports.IS_FIREFOX = /Firefox/i.test(USER_AGENT);
	var IS_EDGE = exports.IS_EDGE = /Edge/i.test(USER_AGENT);
	var IS_CHROME = exports.IS_CHROME = !IS_EDGE && /Chrome/i.test(USER_AGENT);
	var IS_IE8 = exports.IS_IE8 = /MSIE\s8\.0/.test(USER_AGENT);
	var IE_VERSION = exports.IE_VERSION = function (result) {
	  return result && parseFloat(result[1]);
	}(/MSIE\s(\d+)\.\d/.exec(USER_AGENT));

	var IS_SAFARI = exports.IS_SAFARI = /Safari/i.test(USER_AGENT) && !IS_CHROME && !IS_ANDROID && !IS_EDGE;
	var IS_ANY_SAFARI = exports.IS_ANY_SAFARI = IS_SAFARI || IS_IOS;

	var TOUCH_ENABLED = exports.TOUCH_ENABLED = Dom.isReal() && ('ontouchstart' in _window2['default'] || _window2['default'].DocumentTouch && _window2['default'].document instanceof _window2['default'].DocumentTouch);

	var BACKGROUND_SIZE_SUPPORTED = exports.BACKGROUND_SIZE_SUPPORTED = Dom.isReal() && 'backgroundSize' in _window2['default'].document.createElement('video').style;


/***/ },
/* 263 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	exports.each = each;
	exports.reduce = reduce;
	exports.assign = assign;
	exports.isObject = isObject;
	exports.isPlain = isPlain;
	/**
	 * @file obj.js
	 * @module obj
	 */

	/**
	 * @callback obj:EachCallback
	 *
	 * @param {Mixed} value
	 *        The current key for the object that is being iterated over.
	 *
	 * @param {string} key
	 *        The current key-value for object that is being iterated over
	 */

	/**
	 * @callback obj:ReduceCallback
	 *
	 * @param {Mixed} accum
	 *        The value that is accumulating over the reduce loop.
	 *
	 * @param {Mixed} value
	 *        The current key for the object that is being iterated over.
	 *
	 * @param {string} key
	 *        The current key-value for object that is being iterated over
	 *
	 * @return {Mixed}
	 *         The new accumulated value.
	 */
	var toString = Object.prototype.toString;

	/**
	 * Array-like iteration for objects.
	 *
	 * @param {Object} object
	 *        The object to iterate over
	 *
	 * @param {obj:EachCallback} fn
	 *        The callback function which is called for each key in the object.
	 */
	function each(object, fn) {
	  Object.keys(object).forEach(function (key) {
	    return fn(object[key], key);
	  });
	}

	/**
	 * Array-like reduce for objects.
	 *
	 * @param {Object} object
	 *        The Object that you want to reduce.
	 *
	 * @param {Function} fn
	 *         A callback function which is called for each key in the object. It
	 *         receives the accumulated value and the per-iteration value and key
	 *         as arguments.
	 *
	 * @param {Mixed} [initial = 0]
	 *        Starting value
	 *
	 * @return {Mixed}
	 *         The final accumulated value.
	 */
	function reduce(object, fn) {
	  var initial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

	  return Object.keys(object).reduce(function (accum, key) {
	    return fn(accum, object[key], key);
	  }, initial);
	}

	/**
	 * Object.assign-style object shallow merge/extend.
	 *
	 * @param  {Object} target
	 * @param  {Object} ...sources
	 * @return {Object}
	 */
	function assign(target) {
	  for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    sources[_key - 1] = arguments[_key];
	  }

	  if (Object.assign) {
	    return Object.assign.apply(Object, [target].concat(sources));
	  }

	  sources.forEach(function (source) {
	    if (!source) {
	      return;
	    }

	    each(source, function (value, key) {
	      target[key] = value;
	    });
	  });

	  return target;
	}

	/**
	 * Returns whether a value is an object of any kind - including DOM nodes,
	 * arrays, regular expressions, etc. Not functions, though.
	 *
	 * This avoids the gotcha where using `typeof` on a `null` value
	 * results in `'object'`.
	 *
	 * @param  {Object} value
	 * @return {Boolean}
	 */
	function isObject(value) {
	  return !!value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object';
	}

	/**
	 * Returns whether an object appears to be a "plain" object - that is, a
	 * direct instance of `Object`.
	 *
	 * @param  {Object} value
	 * @return {Boolean}
	 */
	function isPlain(value) {
	  return isObject(value) && toString.call(value) === '[object Object]' && value.constructor === Object;
	}


/***/ },
/* 264 */
/***/ function(module, exports) {

	function clean (s) {
	  return s.replace(/\n\r?\s*/g, '')
	}


	module.exports = function tsml (sa) {
	  var s = ''
	    , i = 0

	  for (; i < arguments.length; i++)
	    s += clean(sa[i]) + (arguments[i + 1] || '')

	  return s
	}

/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.fixEvent = fixEvent;
	exports.on = on;
	exports.off = off;
	exports.trigger = trigger;
	exports.one = one;

	var _dom = __webpack_require__(259);

	var Dom = _interopRequireWildcard(_dom);

	var _guid = __webpack_require__(260);

	var Guid = _interopRequireWildcard(_guid);

	var _log = __webpack_require__(261);

	var _log2 = _interopRequireDefault(_log);

	var _window = __webpack_require__(255);

	var _window2 = _interopRequireDefault(_window);

	var _document = __webpack_require__(256);

	var _document2 = _interopRequireDefault(_document);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	/**
	 * Clean up the listener cache and dispatchers
	 *
	 * @param {Element|Object} elem
	 *        Element to clean up
	 *
	 * @param {string} type
	 *        Type of event to clean up
	 */
	function _cleanUpEvents(elem, type) {
	  var data = Dom.getElData(elem);

	  // Remove the events of a particular type if there are none left
	  if (data.handlers[type].length === 0) {
	    delete data.handlers[type];
	    // data.handlers[type] = null;
	    // Setting to null was causing an error with data.handlers

	    // Remove the meta-handler from the element
	    if (elem.removeEventListener) {
	      elem.removeEventListener(type, data.dispatcher, false);
	    } else if (elem.detachEvent) {
	      elem.detachEvent('on' + type, data.dispatcher);
	    }
	  }

	  // Remove the events object if there are no types left
	  if (Object.getOwnPropertyNames(data.handlers).length <= 0) {
	    delete data.handlers;
	    delete data.dispatcher;
	    delete data.disabled;
	  }

	  // Finally remove the element data if there is no data left
	  if (Object.getOwnPropertyNames(data).length === 0) {
	    Dom.removeElData(elem);
	  }
	}

	/**
	 * Loops through an array of event types and calls the requested method for each type.
	 *
	 * @param {Function} fn
	 *        The event method we want to use.
	 *
	 * @param {Element|Object} elem
	 *        Element or object to bind listeners to
	 *
	 * @param {string} type
	 *        Type of event to bind to.
	 *
	 * @param {EventTarget~EventListener} callback
	 *        Event listener.
	 */
	/**
	 * @file events.js. An Event System (John Resig - Secrets of a JS Ninja http://jsninja.com/)
	 * (Original book version wasn't completely usable, so fixed some things and made Closure Compiler compatible)
	 * This should work very similarly to jQuery's events, however it's based off the book version which isn't as
	 * robust as jquery's, so there's probably some differences.
	 *
	 * @module events
	 */

	function _handleMultipleEvents(fn, elem, types, callback) {
	  types.forEach(function (type) {
	    // Call the event method for each one of the types
	    fn(elem, type, callback);
	  });
	}

	/**
	 * Fix a native event to have standard property values
	 *
	 * @param {Object} event
	 *        Event object to fix.
	 *
	 * @return {Object}
	 *         Fixed event object.
	 */
	function fixEvent(event) {

	  function returnTrue() {
	    return true;
	  }

	  function returnFalse() {
	    return false;
	  }

	  // Test if fixing up is needed
	  // Used to check if !event.stopPropagation instead of isPropagationStopped
	  // But native events return true for stopPropagation, but don't have
	  // other expected methods like isPropagationStopped. Seems to be a problem
	  // with the Javascript Ninja code. So we're just overriding all events now.
	  if (!event || !event.isPropagationStopped) {
	    (function () {
	      var old = event || _window2['default'].event;

	      event = {};
	      // Clone the old object so that we can modify the values event = {};
	      // IE8 Doesn't like when you mess with native event properties
	      // Firefox returns false for event.hasOwnProperty('type') and other props
	      //  which makes copying more difficult.
	      // TODO: Probably best to create a whitelist of event props
	      for (var key in old) {
	        // Safari 6.0.3 warns you if you try to copy deprecated layerX/Y
	        // Chrome warns you if you try to copy deprecated keyboardEvent.keyLocation
	        // and webkitMovementX/Y
	        if (key !== 'layerX' && key !== 'layerY' && key !== 'keyLocation' && key !== 'webkitMovementX' && key !== 'webkitMovementY') {
	          // Chrome 32+ warns if you try to copy deprecated returnValue, but
	          // we still want to if preventDefault isn't supported (IE8).
	          if (!(key === 'returnValue' && old.preventDefault)) {
	            event[key] = old[key];
	          }
	        }
	      }

	      // The event occurred on this element
	      if (!event.target) {
	        event.target = event.srcElement || _document2['default'];
	      }

	      // Handle which other element the event is related to
	      if (!event.relatedTarget) {
	        event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement;
	      }

	      // Stop the default browser action
	      event.preventDefault = function () {
	        if (old.preventDefault) {
	          old.preventDefault();
	        }
	        event.returnValue = false;
	        old.returnValue = false;
	        event.defaultPrevented = true;
	      };

	      event.defaultPrevented = false;

	      // Stop the event from bubbling
	      event.stopPropagation = function () {
	        if (old.stopPropagation) {
	          old.stopPropagation();
	        }
	        event.cancelBubble = true;
	        old.cancelBubble = true;
	        event.isPropagationStopped = returnTrue;
	      };

	      event.isPropagationStopped = returnFalse;

	      // Stop the event from bubbling and executing other handlers
	      event.stopImmediatePropagation = function () {
	        if (old.stopImmediatePropagation) {
	          old.stopImmediatePropagation();
	        }
	        event.isImmediatePropagationStopped = returnTrue;
	        event.stopPropagation();
	      };

	      event.isImmediatePropagationStopped = returnFalse;

	      // Handle mouse position
	      if (event.clientX !== null && event.clientX !== undefined) {
	        var doc = _document2['default'].documentElement;
	        var body = _document2['default'].body;

	        event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
	        event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
	      }

	      // Handle key presses
	      event.which = event.charCode || event.keyCode;

	      // Fix button for mouse clicks:
	      // 0 == left; 1 == middle; 2 == right
	      if (event.button !== null && event.button !== undefined) {

	        // The following is disabled because it does not pass videojs-standard
	        // and... yikes.
	        /* eslint-disable */
	        event.button = event.button & 1 ? 0 : event.button & 4 ? 1 : event.button & 2 ? 2 : 0;
	        /* eslint-enable */
	      }
	    })();
	  }

	  // Returns fixed-up instance
	  return event;
	}

	/**
	 * Add an event listener to element
	 * It stores the handler function in a separate cache object
	 * and adds a generic handler to the element's event,
	 * along with a unique id (guid) to the element.
	 *
	 * @param {Element|Object} elem
	 *        Element or object to bind listeners to
	 *
	 * @param {string|string[]} type
	 *        Type of event to bind to.
	 *
	 * @param {EventTarget~EventListener} fn
	 *        Event listener.
	 */
	function on(elem, type, fn) {
	  if (Array.isArray(type)) {
	    return _handleMultipleEvents(on, elem, type, fn);
	  }

	  var data = Dom.getElData(elem);

	  // We need a place to store all our handler data
	  if (!data.handlers) {
	    data.handlers = {};
	  }

	  if (!data.handlers[type]) {
	    data.handlers[type] = [];
	  }

	  if (!fn.guid) {
	    fn.guid = Guid.newGUID();
	  }

	  data.handlers[type].push(fn);

	  if (!data.dispatcher) {
	    data.disabled = false;

	    data.dispatcher = function (event, hash) {

	      if (data.disabled) {
	        return;
	      }

	      event = fixEvent(event);

	      var handlers = data.handlers[event.type];

	      if (handlers) {
	        // Copy handlers so if handlers are added/removed during the process it doesn't throw everything off.
	        var handlersCopy = handlers.slice(0);

	        for (var m = 0, n = handlersCopy.length; m < n; m++) {
	          if (event.isImmediatePropagationStopped()) {
	            break;
	          } else {
	            try {
	              handlersCopy[m].call(elem, event, hash);
	            } catch (e) {
	              _log2['default'].error(e);
	            }
	          }
	        }
	      }
	    };
	  }

	  if (data.handlers[type].length === 1) {
	    if (elem.addEventListener) {
	      elem.addEventListener(type, data.dispatcher, false);
	    } else if (elem.attachEvent) {
	      elem.attachEvent('on' + type, data.dispatcher);
	    }
	  }
	}

	/**
	 * Removes event listeners from an element
	 *
	 * @param {Element|Object} elem
	 *        Object to remove listeners from.
	 *
	 * @param {string|string[]} [type]
	 *        Type of listener to remove. Don't include to remove all events from element.
	 *
	 * @param {EventTarget~EventListener} [fn]
	 *        Specific listener to remove. Don't include to remove listeners for an event
	 *        type.
	 */
	function off(elem, type, fn) {
	  // Don't want to add a cache object through getElData if not needed
	  if (!Dom.hasElData(elem)) {
	    return;
	  }

	  var data = Dom.getElData(elem);

	  // If no events exist, nothing to unbind
	  if (!data.handlers) {
	    return;
	  }

	  if (Array.isArray(type)) {
	    return _handleMultipleEvents(off, elem, type, fn);
	  }

	  // Utility function
	  var removeType = function removeType(t) {
	    data.handlers[t] = [];
	    _cleanUpEvents(elem, t);
	  };

	  // Are we removing all bound events?
	  if (!type) {
	    for (var t in data.handlers) {
	      removeType(t);
	    }
	    return;
	  }

	  var handlers = data.handlers[type];

	  // If no handlers exist, nothing to unbind
	  if (!handlers) {
	    return;
	  }

	  // If no listener was provided, remove all listeners for type
	  if (!fn) {
	    removeType(type);
	    return;
	  }

	  // We're only removing a single handler
	  if (fn.guid) {
	    for (var n = 0; n < handlers.length; n++) {
	      if (handlers[n].guid === fn.guid) {
	        handlers.splice(n--, 1);
	      }
	    }
	  }

	  _cleanUpEvents(elem, type);
	}

	/**
	 * Trigger an event for an element
	 *
	 * @param {Element|Object} elem
	 *        Element to trigger an event on
	 *
	 * @param {EventTarget~Event|string} event
	 *        A string (the type) or an event object with a type attribute
	 *
	 * @param {Object} [hash]
	 *        data hash to pass along with the event
	 *
	 * @return {boolean|undefined}
	 *         - Returns the opposite of `defaultPrevented` if default was prevented
	 *         - Otherwise returns undefined
	 */
	function trigger(elem, event, hash) {
	  // Fetches element data and a reference to the parent (for bubbling).
	  // Don't want to add a data object to cache for every parent,
	  // so checking hasElData first.
	  var elemData = Dom.hasElData(elem) ? Dom.getElData(elem) : {};
	  var parent = elem.parentNode || elem.ownerDocument;
	  // type = event.type || event,
	  // handler;

	  // If an event name was passed as a string, creates an event out of it
	  if (typeof event === 'string') {
	    event = { type: event, target: elem };
	  }
	  // Normalizes the event properties.
	  event = fixEvent(event);

	  // If the passed element has a dispatcher, executes the established handlers.
	  if (elemData.dispatcher) {
	    elemData.dispatcher.call(elem, event, hash);
	  }

	  // Unless explicitly stopped or the event does not bubble (e.g. media events)
	  // recursively calls this function to bubble the event up the DOM.
	  if (parent && !event.isPropagationStopped() && event.bubbles === true) {
	    trigger.call(null, parent, event, hash);

	    // If at the top of the DOM, triggers the default action unless disabled.
	  } else if (!parent && !event.defaultPrevented) {
	    var targetData = Dom.getElData(event.target);

	    // Checks if the target has a default action for this event.
	    if (event.target[event.type]) {
	      // Temporarily disables event dispatching on the target as we have already executed the handler.
	      targetData.disabled = true;
	      // Executes the default action.
	      if (typeof event.target[event.type] === 'function') {
	        event.target[event.type]();
	      }
	      // Re-enables event dispatching.
	      targetData.disabled = false;
	    }
	  }

	  // Inform the triggerer if the default was prevented by returning false
	  return !event.defaultPrevented;
	}

	/**
	 * Trigger a listener only once for an event
	 *
	 * @param {Element|Object} elem
	 *        Element or object to bind to.
	 *
	 * @param {string|string[]} type
	 *        Name/type of event
	 *
	 * @param {Event~EventListener} fn
	 *        Event Listener function
	 */
	function one(elem, type, fn) {
	  if (Array.isArray(type)) {
	    return _handleMultipleEvents(one, elem, type, fn);
	  }
	  var func = function func() {
	    off(elem, type, func);
	    fn.apply(this, arguments);
	  };

	  // copy the guid to the new function so it can removed using the original function's ID
	  func.guid = fn.guid = fn.guid || Guid.newGUID();
	  on(elem, type, func);
	}


/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.setTextContent = exports.createStyleElement = undefined;

	var _document = __webpack_require__(256);

	var _document2 = _interopRequireDefault(_document);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * Create a DOM syle element given a className for it.
	 *
	 * @param {string} className
	 *        The className to add to the created style element.
	 *
	 * @return {Element}
	 *         The element that was created.
	 */
	var createStyleElement = exports.createStyleElement = function createStyleElement(className) {
	  var style = _document2['default'].createElement('style');

	  style.className = className;

	  return style;
	};

	/**
	 * Add text to a DOM element.
	 *
	 * @param {Element} el
	 *        The Element to add text content to.
	 *
	 * @param {string} content
	 *        The text to add to the element.
	 */
	/**
	 * @file stylesheet.js
	 * @module stylesheet
	 */
	var setTextContent = exports.setTextContent = function setTextContent(el, content) {
	  if (el.styleSheet) {
	    el.styleSheet.cssText = content;
	  } else {
	    el.textContent = content;
	  }
	};


/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _window = __webpack_require__(255);

	var _window2 = _interopRequireDefault(_window);

	var _dom = __webpack_require__(259);

	var Dom = _interopRequireWildcard(_dom);

	var _fn = __webpack_require__(268);

	var Fn = _interopRequireWildcard(_fn);

	var _guid = __webpack_require__(260);

	var Guid = _interopRequireWildcard(_guid);

	var _events = __webpack_require__(265);

	var Events = _interopRequireWildcard(_events);

	var _log = __webpack_require__(261);

	var _log2 = _interopRequireDefault(_log);

	var _toTitleCase = __webpack_require__(269);

	var _toTitleCase2 = _interopRequireDefault(_toTitleCase);

	var _mergeOptions = __webpack_require__(270);

	var _mergeOptions2 = _interopRequireDefault(_mergeOptions);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /**
	                                                                                                                                                           * Player Component - Base class for all UI objects
	                                                                                                                                                           *
	                                                                                                                                                           * @file component.js
	                                                                                                                                                           */


	/**
	 * Base class for all UI Components.
	 * Components are UI objects which represent both a javascript object and an element
	 * in the DOM. They can be children of other components, and can have
	 * children themselves.
	 *
	 * Components can also use methods from {@link EventTarget}
	 */
	var Component = function () {

	  /**
	   * A callback that is called when a component is ready. Does not have any
	   * paramters and any callback value will be ignored.
	   *
	   * @callback Component~ReadyCallback
	   * @this Component
	   */

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   #
	   * @param {Object[]} [options.children]
	   *        An array of children objects to intialize this component with. Children objects have
	   *        a name property that will be used if more than one component of the same type needs to be
	   *        added.
	   *
	   * @param {Component~ReadyCallback} [ready]
	   *        Function that gets called when the `Component` is ready.
	   */
	  function Component(player, options, ready) {
	    _classCallCheck(this, Component);

	    // The component might be the player itself and we can't pass `this` to super
	    if (!player && this.play) {
	      this.player_ = player = this; // eslint-disable-line
	    } else {
	      this.player_ = player;
	    }

	    // Make a copy of prototype.options_ to protect against overriding defaults
	    this.options_ = (0, _mergeOptions2['default'])({}, this.options_);

	    // Updated options with supplied options
	    options = this.options_ = (0, _mergeOptions2['default'])(this.options_, options);

	    // Get ID from options or options element if one is supplied
	    this.id_ = options.id || options.el && options.el.id;

	    // If there was no ID from the options, generate one
	    if (!this.id_) {
	      // Don't require the player ID function in the case of mock players
	      var id = player && player.id && player.id() || 'no_player';

	      this.id_ = id + '_component_' + Guid.newGUID();
	    }

	    this.name_ = options.name || null;

	    // Create element if one wasn't provided in options
	    if (options.el) {
	      this.el_ = options.el;
	    } else if (options.createEl !== false) {
	      this.el_ = this.createEl();
	    }

	    this.children_ = [];
	    this.childIndex_ = {};
	    this.childNameIndex_ = {};

	    // Add any child components in options
	    if (options.initChildren !== false) {
	      this.initChildren();
	    }

	    this.ready(ready);
	    // Don't want to trigger ready here or it will before init is actually
	    // finished for all children that run this constructor

	    if (options.reportTouchActivity !== false) {
	      this.enableTouchActivity();
	    }
	  }

	  /**
	   * Dispose of the `Component` and all child components.
	   *
	   * @fires Component#dispose
	   */


	  Component.prototype.dispose = function dispose() {

	    /**
	     * Triggered when a `Component` is disposed.
	     *
	     * @event Component#dispose
	     * @type {EventTarget~Event}
	     *
	     * @property {boolean} [bubbles=false]
	     *           set to false so that the close event does not
	     *           bubble up
	     */
	    this.trigger({ type: 'dispose', bubbles: false });

	    // Dispose all children.
	    if (this.children_) {
	      for (var i = this.children_.length - 1; i >= 0; i--) {
	        if (this.children_[i].dispose) {
	          this.children_[i].dispose();
	        }
	      }
	    }

	    // Delete child references
	    this.children_ = null;
	    this.childIndex_ = null;
	    this.childNameIndex_ = null;

	    // Remove all event listeners.
	    this.off();

	    // Remove element from DOM
	    if (this.el_.parentNode) {
	      this.el_.parentNode.removeChild(this.el_);
	    }

	    Dom.removeElData(this.el_);
	    this.el_ = null;
	  };

	  /**
	   * Return the {@link Player} that the `Component` has attached to.
	   *
	   * @return {Player}
	   *         The player that this `Component` has attached to.
	   */


	  Component.prototype.player = function player() {
	    return this.player_;
	  };

	  /**
	   * Deep merge of options objects with new options.
	   * > Note: When both `obj` and `options` contain properties whose values are objects.
	   *         The two properties get merged using {@link module:mergeOptions}
	   *
	   * @param {Object} obj
	   *        The object that contains new options.
	   *
	   * @return {Object}
	   *         A new object of `this.options_` and `obj` merged together.
	   *
	   * @deprecated since version 5
	   */


	  Component.prototype.options = function options(obj) {
	    _log2['default'].warn('this.options() has been deprecated and will be moved to the constructor in 6.0');

	    if (!obj) {
	      return this.options_;
	    }

	    this.options_ = (0, _mergeOptions2['default'])(this.options_, obj);
	    return this.options_;
	  };

	  /**
	   * Get the `Component`s DOM element
	   *
	   * @return {Element}
	   *         The DOM element for this `Component`.
	   */


	  Component.prototype.el = function el() {
	    return this.el_;
	  };

	  /**
	   * Create the `Component`s DOM element.
	   *
	   * @param {string} [tagName]
	   *        Element's DOM node type. e.g. 'div'
	   *
	   * @param {Object} [properties]
	   *        An object of properties that should be set.
	   *
	   * @param {Object} [attributes]
	   *        An object of attributes that should be set.
	   *
	   * @return {Element}
	   *         The element that gets created.
	   */


	  Component.prototype.createEl = function createEl(tagName, properties, attributes) {
	    return Dom.createEl(tagName, properties, attributes);
	  };

	  /**
	   * Localize a string given the string in english.
	   *
	   * @param {string} string
	   *        The string to localize.
	   *
	   * @return {string}
	   *         The localized string or if no localization exists the english string.
	   */


	  Component.prototype.localize = function localize(string) {
	    var code = this.player_.language && this.player_.language();
	    var languages = this.player_.languages && this.player_.languages();

	    if (!code || !languages) {
	      return string;
	    }

	    var language = languages[code];

	    if (language && language[string]) {
	      return language[string];
	    }

	    var primaryCode = code.split('-')[0];
	    var primaryLang = languages[primaryCode];

	    if (primaryLang && primaryLang[string]) {
	      return primaryLang[string];
	    }

	    return string;
	  };

	  /**
	   * Return the `Component`s DOM element. This is where children get inserted.
	   * This will usually be the the same as the element returned in {@link Component#el}.
	   *
	   * @return {Element}
	   *         The content element for this `Component`.
	   */


	  Component.prototype.contentEl = function contentEl() {
	    return this.contentEl_ || this.el_;
	  };

	  /**
	   * Get this `Component`s ID
	   *
	   * @return {string}
	   *         The id of this `Component`
	   */


	  Component.prototype.id = function id() {
	    return this.id_;
	  };

	  /**
	   * Get the `Component`s name. The name gets used to reference the `Component`
	   * and is set during registration.
	   *
	   * @return {string}
	   *         The name of this `Component`.
	   */


	  Component.prototype.name = function name() {
	    return this.name_;
	  };

	  /**
	   * Get an array of all child components
	   *
	   * @return {Array}
	   *         The children
	   */


	  Component.prototype.children = function children() {
	    return this.children_;
	  };

	  /**
	   * Returns the child `Component` with the given `id`.
	   *
	   * @param {string} id
	   *        The id of the child `Component` to get.
	   *
	   * @return {Component|undefined}
	   *         The child `Component` with the given `id` or undefined.
	   */


	  Component.prototype.getChildById = function getChildById(id) {
	    return this.childIndex_[id];
	  };

	  /**
	   * Returns the child `Component` with the given `name`.
	   *
	   * @param {string} name
	   *        The name of the child `Component` to get.
	   *
	   * @return {Component|undefined}
	   *         The child `Component` with the given `name` or undefined.
	   */


	  Component.prototype.getChild = function getChild(name) {
	    if (!name) {
	      return;
	    }

	    name = (0, _toTitleCase2['default'])(name);

	    return this.childNameIndex_[name];
	  };

	  /**
	   * Add a child `Component` inside the current `Component`.
	   *
	   *
	   * @param {string|Component} child
	   *        The name or instance of a child to add.
	   *
	   * @param {Object} [options={}]
	   *        The key/value store of options that will get passed to children of
	   *        the child.
	   *
	   * @param {number} [index=this.children_.length]
	   *        The index to attempt to add a child into.
	   *
	   * @return {Component}
	   *         The `Component` that gets added as a child. When using a string the
	   *         `Component` will get created by this process.
	   */


	  Component.prototype.addChild = function addChild(child) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.children_.length;

	    var component = void 0;
	    var componentName = void 0;

	    // If child is a string, create component with options
	    if (typeof child === 'string') {
	      componentName = (0, _toTitleCase2['default'])(child);

	      // Options can also be specified as a boolean,
	      // so convert to an empty object if false.
	      if (!options) {
	        options = {};
	      }

	      // Same as above, but true is deprecated so show a warning.
	      if (options === true) {
	        _log2['default'].warn('Initializing a child component with `true` is deprecated.' + 'Children should be defined in an array when possible, ' + 'but if necessary use an object instead of `true`.');
	        options = {};
	      }

	      var componentClassName = options.componentClass || componentName;

	      // Set name through options
	      options.name = componentName;

	      // Create a new object & element for this controls set
	      // If there's no .player_, this is a player
	      var ComponentClass = Component.getComponent(componentClassName);

	      if (!ComponentClass) {
	        throw new Error('Component ' + componentClassName + ' does not exist');
	      }

	      // data stored directly on the videojs object may be
	      // misidentified as a component to retain
	      // backwards-compatibility with 4.x. check to make sure the
	      // component class can be instantiated.
	      if (typeof ComponentClass !== 'function') {
	        return null;
	      }

	      component = new ComponentClass(this.player_ || this, options);

	      // child is a component instance
	    } else {
	      component = child;
	    }

	    this.children_.splice(index, 0, component);

	    if (typeof component.id === 'function') {
	      this.childIndex_[component.id()] = component;
	    }

	    // If a name wasn't used to create the component, check if we can use the
	    // name function of the component
	    componentName = componentName || component.name && component.name();

	    if (componentName) {
	      this.childNameIndex_[componentName] = component;
	    }

	    // Add the UI object's element to the container div (box)
	    // Having an element is not required
	    if (typeof component.el === 'function' && component.el()) {
	      var childNodes = this.contentEl().children;
	      var refNode = childNodes[index] || null;

	      this.contentEl().insertBefore(component.el(), refNode);
	    }

	    // Return so it can stored on parent object if desired.
	    return component;
	  };

	  /**
	   * Remove a child `Component` from this `Component`s list of children. Also removes
	   * the child `Component`s element from this `Component`s element.
	   *
	   * @param {Component} component
	   *        The child `Component` to remove.
	   */


	  Component.prototype.removeChild = function removeChild(component) {
	    if (typeof component === 'string') {
	      component = this.getChild(component);
	    }

	    if (!component || !this.children_) {
	      return;
	    }

	    var childFound = false;

	    for (var i = this.children_.length - 1; i >= 0; i--) {
	      if (this.children_[i] === component) {
	        childFound = true;
	        this.children_.splice(i, 1);
	        break;
	      }
	    }

	    if (!childFound) {
	      return;
	    }

	    this.childIndex_[component.id()] = null;
	    this.childNameIndex_[component.name()] = null;

	    var compEl = component.el();

	    if (compEl && compEl.parentNode === this.contentEl()) {
	      this.contentEl().removeChild(component.el());
	    }
	  };

	  /**
	   * Add and initialize default child `Component`s based upon options.
	   */


	  Component.prototype.initChildren = function initChildren() {
	    var _this = this;

	    var children = this.options_.children;

	    if (children) {
	      (function () {
	        // `this` is `parent`
	        var parentOptions = _this.options_;

	        var handleAdd = function handleAdd(child) {
	          var name = child.name;
	          var opts = child.opts;

	          // Allow options for children to be set at the parent options
	          // e.g. videojs(id, { controlBar: false });
	          // instead of videojs(id, { children: { controlBar: false });
	          if (parentOptions[name] !== undefined) {
	            opts = parentOptions[name];
	          }

	          // Allow for disabling default components
	          // e.g. options['children']['posterImage'] = false
	          if (opts === false) {
	            return;
	          }

	          // Allow options to be passed as a simple boolean if no configuration
	          // is necessary.
	          if (opts === true) {
	            opts = {};
	          }

	          // We also want to pass the original player options
	          // to each component as well so they don't need to
	          // reach back into the player for options later.
	          opts.playerOptions = _this.options_.playerOptions;

	          // Create and add the child component.
	          // Add a direct reference to the child by name on the parent instance.
	          // If two of the same component are used, different names should be supplied
	          // for each
	          var newChild = _this.addChild(name, opts);

	          if (newChild) {
	            _this[name] = newChild;
	          }
	        };

	        // Allow for an array of children details to passed in the options
	        var workingChildren = void 0;
	        var Tech = Component.getComponent('Tech');

	        if (Array.isArray(children)) {
	          workingChildren = children;
	        } else {
	          workingChildren = Object.keys(children);
	        }

	        workingChildren
	        // children that are in this.options_ but also in workingChildren  would
	        // give us extra children we do not want. So, we want to filter them out.
	        .concat(Object.keys(_this.options_).filter(function (child) {
	          return !workingChildren.some(function (wchild) {
	            if (typeof wchild === 'string') {
	              return child === wchild;
	            }
	            return child === wchild.name;
	          });
	        })).map(function (child) {
	          var name = void 0;
	          var opts = void 0;

	          if (typeof child === 'string') {
	            name = child;
	            opts = children[name] || _this.options_[name] || {};
	          } else {
	            name = child.name;
	            opts = child;
	          }

	          return { name: name, opts: opts };
	        }).filter(function (child) {
	          // we have to make sure that child.name isn't in the techOrder since
	          // techs are registerd as Components but can't aren't compatible
	          // See https://github.com/videojs/video.js/issues/2772
	          var c = Component.getComponent(child.opts.componentClass || (0, _toTitleCase2['default'])(child.name));

	          return c && !Tech.isTech(c);
	        }).forEach(handleAdd);
	      })();
	    }
	  };

	  /**
	   * Builds the default DOM class name. Should be overriden by sub-components.
	   *
	   * @return {string}
	   *         The DOM class name for this object.
	   *
	   * @abstract
	   */


	  Component.prototype.buildCSSClass = function buildCSSClass() {
	    // Child classes can include a function that does:
	    // return 'CLASS NAME' + this._super();
	    return '';
	  };

	  /**
	   * Add an `event listener` to this `Component`s element.
	   *
	   * The benefit of using this over the following:
	   * - `VjsEvents.on(otherElement, 'eventName', myFunc)`
	   * - `otherComponent.on('eventName', myFunc)`
	   *
	   * 1. Is that the listeners will get cleaned up when either component gets disposed.
	   * 1. It will also bind `myComponent` as the context of `myFunc`.
	   * > NOTE: If you remove the element from the DOM that has used `on` you need to
	   *         clean up references using: `myComponent.trigger(el, 'dispose')`
	   *         This will also allow the browser to garbage collect it. In special
	   *         cases such as with `window` and `document`, which are both permanent,
	   *         this is not necessary.
	   *
	   * @param {string|Component|string[]} [first]
	   *        The event name, and array of event names, or another `Component`.
	   *
	   * @param {EventTarget~EventListener|string|string[]} [second]
	   *        The listener function, an event name, or an Array of events names.
	   *
	   * @param {EventTarget~EventListener} [third]
	   *        The event handler if `first` is a `Component` and `second` is an event name
	   *        or an Array of event names.
	   *
	   * @return {Component}
	   *         Returns itself; method can be chained.
	   *
	   * @listens Component#dispose
	   */


	  Component.prototype.on = function on(first, second, third) {
	    var _this2 = this;

	    if (typeof first === 'string' || Array.isArray(first)) {
	      Events.on(this.el_, first, Fn.bind(this, second));

	      // Targeting another component or element
	    } else {
	      (function () {
	        var target = first;
	        var type = second;
	        var fn = Fn.bind(_this2, third);

	        // When this component is disposed, remove the listener from the other component
	        var removeOnDispose = function removeOnDispose() {
	          return _this2.off(target, type, fn);
	        };

	        // Use the same function ID so we can remove it later it using the ID
	        // of the original listener
	        removeOnDispose.guid = fn.guid;
	        _this2.on('dispose', removeOnDispose);

	        // If the other component is disposed first we need to clean the reference
	        // to the other component in this component's removeOnDispose listener
	        // Otherwise we create a memory leak.
	        var cleanRemover = function cleanRemover() {
	          return _this2.off('dispose', removeOnDispose);
	        };

	        // Add the same function ID so we can easily remove it later
	        cleanRemover.guid = fn.guid;

	        // Check if this is a DOM node
	        if (first.nodeName) {
	          // Add the listener to the other element
	          Events.on(target, type, fn);
	          Events.on(target, 'dispose', cleanRemover);

	          // Should be a component
	          // Not using `instanceof Component` because it makes mock players difficult
	        } else if (typeof first.on === 'function') {
	          // Add the listener to the other component
	          target.on(type, fn);
	          target.on('dispose', cleanRemover);
	        }
	      })();
	    }

	    return this;
	  };

	  /**
	   * Remove an event listener from this `Component`s element. If the second argument is
	   * exluded all listeners for the type passed in as the first argument will be removed.
	   *
	   * @param {string|Component|string[]} [first]
	   *        The event name, and array of event names, or another `Component`.
	   *
	   * @param {EventTarget~EventListener|string|string[]} [second]
	   *        The listener function, an event name, or an Array of events names.
	   *
	   * @param {EventTarget~EventListener} [third]
	   *        The event handler if `first` is a `Component` and `second` is an event name
	   *        or an Array of event names.
	   *
	   * @return {Component}
	   *         Returns itself; method can be chained.
	   */


	  Component.prototype.off = function off(first, second, third) {
	    if (!first || typeof first === 'string' || Array.isArray(first)) {
	      Events.off(this.el_, first, second);
	    } else {
	      var target = first;
	      var type = second;
	      // Ensure there's at least a guid, even if the function hasn't been used
	      var fn = Fn.bind(this, third);

	      // Remove the dispose listener on this component,
	      // which was given the same guid as the event listener
	      this.off('dispose', fn);

	      if (first.nodeName) {
	        // Remove the listener
	        Events.off(target, type, fn);
	        // Remove the listener for cleaning the dispose listener
	        Events.off(target, 'dispose', fn);
	      } else {
	        target.off(type, fn);
	        target.off('dispose', fn);
	      }
	    }

	    return this;
	  };

	  /**
	   * Add an event listener that gets triggered only once and then gets removed.
	   *
	   * @param {string|Component|string[]} [first]
	   *        The event name, and array of event names, or another `Component`.
	   *
	   * @param {EventTarget~EventListener|string|string[]} [second]
	   *        The listener function, an event name, or an Array of events names.
	   *
	   * @param {EventTarget~EventListener} [third]
	   *        The event handler if `first` is a `Component` and `second` is an event name
	   *        or an Array of event names.
	   *
	   * @return {Component}
	   *         Returns itself; method can be chained.
	   */


	  Component.prototype.one = function one(first, second, third) {
	    var _this3 = this,
	        _arguments = arguments;

	    if (typeof first === 'string' || Array.isArray(first)) {
	      Events.one(this.el_, first, Fn.bind(this, second));
	    } else {
	      (function () {
	        var target = first;
	        var type = second;
	        var fn = Fn.bind(_this3, third);

	        var newFunc = function newFunc() {
	          _this3.off(target, type, newFunc);
	          fn.apply(null, _arguments);
	        };

	        // Keep the same function ID so we can remove it later
	        newFunc.guid = fn.guid;

	        _this3.on(target, type, newFunc);
	      })();
	    }

	    return this;
	  };

	  /**
	   * Trigger an event on an element.
	   *
	   * @param {EventTarget~Event|Object|string} event
	   *        The event name, and Event, or an event-like object with a type attribute
	   *        set to the event name.
	   *
	   * @param {Object} [hash]
	   *        Data hash to pass along with the event
	   *
	   * @return {Component}
	   *         Returns itself; method can be chained.
	   */


	  Component.prototype.trigger = function trigger(event, hash) {
	    Events.trigger(this.el_, event, hash);
	    return this;
	  };

	  /**
	   * Bind a listener to the component's ready state. If the ready event has already
	   * happened it will trigger the function immediately.
	   *
	   * @param  {Component~ReadyCallback} fn
	   *         A function to call when ready is triggered.
	   *
	   * @param  {boolean} [sync=false]
	   *         Execute the listener synchronously if `Component` is ready.
	   *
	   * @return {Component}
	   *         Returns itself; method can be chained.
	   */


	  Component.prototype.ready = function ready(fn) {
	    var sync = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	    if (fn) {
	      if (this.isReady_) {
	        if (sync) {
	          fn.call(this);
	        } else {
	          // Call the function asynchronously by default for consistency
	          this.setTimeout(fn, 1);
	        }
	      } else {
	        this.readyQueue_ = this.readyQueue_ || [];
	        this.readyQueue_.push(fn);
	      }
	    }
	    return this;
	  };

	  /**
	   * Trigger all the ready listeners for this `Component`.
	   *
	   * @fires Component#ready
	   */


	  Component.prototype.triggerReady = function triggerReady() {
	    this.isReady_ = true;

	    // Ensure ready is triggerd asynchronously
	    this.setTimeout(function () {
	      var readyQueue = this.readyQueue_;

	      // Reset Ready Queue
	      this.readyQueue_ = [];

	      if (readyQueue && readyQueue.length > 0) {
	        readyQueue.forEach(function (fn) {
	          fn.call(this);
	        }, this);
	      }

	      // Allow for using event listeners also
	      /**
	       * Triggered when a `Component` is ready.
	       *
	       * @event Component#ready
	       * @type {EventTarget~Event}
	       */
	      this.trigger('ready');
	    }, 1);
	  };

	  /**
	   * Find a single DOM element matching a `selector`. This can be within the `Component`s
	   * `contentEl()` or another custom context.
	   *
	   * @param {string} selector
	   *        A valid CSS selector, which will be passed to `querySelector`.
	   *
	   * @param {Element|string} [context=this.contentEl()]
	   *        A DOM element within which to query. Can also be a selector string in
	   *        which case the first matching element will get used as context. If
	   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns
	   *        nothing it falls back to `document`.
	   *
	   * @return {Element|null}
	   *         the dom element that was found, or null
	   *
	   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)
	   */


	  Component.prototype.$ = function $(selector, context) {
	    return Dom.$(selector, context || this.contentEl());
	  };

	  /**
	   * Finds all DOM element matching a `selector`. This can be within the `Component`s
	   * `contentEl()` or another custom context.
	   *
	   * @param {string} selector
	   *        A valid CSS selector, which will be passed to `querySelectorAll`.
	   *
	   * @param {Element|string} [context=this.contentEl()]
	   *        A DOM element within which to query. Can also be a selector string in
	   *        which case the first matching element will get used as context. If
	   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns
	   *        nothing it falls back to `document`.
	   *
	   * @return {NodeList}
	   *         a list of dom elements that were found
	   *
	   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)
	   */


	  Component.prototype.$$ = function $$(selector, context) {
	    return Dom.$$(selector, context || this.contentEl());
	  };

	  /**
	   * Check if a component's element has a CSS class name.
	   *
	   * @param {string} classToCheck
	   *        CSS class name to check.
	   *
	   * @return {boolean}
	   *         - True if the `Component` has the class.
	   *         - False if the `Component` does not have the class`
	   */


	  Component.prototype.hasClass = function hasClass(classToCheck) {
	    return Dom.hasElClass(this.el_, classToCheck);
	  };

	  /**
	   * Add a CSS class name to the `Component`s element.
	   *
	   * @param {string} classToAdd
	   *        CSS class name to add
	   *
	   * @return {Component}
	   *         Returns itself; method can be chained.
	   */


	  Component.prototype.addClass = function addClass(classToAdd) {
	    Dom.addElClass(this.el_, classToAdd);
	    return this;
	  };

	  /**
	   * Remove a CSS class name from the `Component`s element.
	   *
	   * @param {string} classToRemove
	   *        CSS class name to remove
	   *
	   * @return {Component}
	   *         Returns itself; method can be chained.
	   */


	  Component.prototype.removeClass = function removeClass(classToRemove) {
	    Dom.removeElClass(this.el_, classToRemove);
	    return this;
	  };

	  /**
	   * Add or remove a CSS class name from the component's element.
	   * - `classToToggle` gets added when {@link Component#hasClass} would return false.
	   * - `classToToggle` gets removed when {@link Component#hasClass} would return true.
	   *
	   * @param  {string} classToToggle
	   *         The class to add or remove based on (@link Component#hasClass}
	   *
	   * @param  {boolean|Dom~predicate} [predicate]
	   *         An {@link Dom~predicate} function or a boolean
	   *
	   * @return {Component}
	   *         Returns itself; method can be chained.
	   */


	  Component.prototype.toggleClass = function toggleClass(classToToggle, predicate) {
	    Dom.toggleElClass(this.el_, classToToggle, predicate);
	    return this;
	  };

	  /**
	   * Show the `Component`s element if it is hidden by removing the
	   * 'vjs-hidden' class name from it.
	   *
	   * @return {Component}
	   *         Returns itself; method can be chained.
	   */


	  Component.prototype.show = function show() {
	    this.removeClass('vjs-hidden');
	    return this;
	  };

	  /**
	   * Hide the `Component`s element if it is currently showing by adding the
	   * 'vjs-hidden` class name to it.
	   *
	   * @return {Component}
	   *         Returns itself; method can be chained.
	   */


	  Component.prototype.hide = function hide() {
	    this.addClass('vjs-hidden');
	    return this;
	  };

	  /**
	   * Lock a `Component`s element in its visible state by adding the 'vjs-lock-showing'
	   * class name to it. Used during fadeIn/fadeOut.
	   *
	   * @return {Component}
	   *         Returns itself; method can be chained.
	   *
	   * @private
	   */


	  Component.prototype.lockShowing = function lockShowing() {
	    this.addClass('vjs-lock-showing');
	    return this;
	  };

	  /**
	   * Unlock a `Component`s element from its visible state by removing the 'vjs-lock-showing'
	   * class name from it. Used during fadeIn/fadeOut.
	   *
	   * @return {Component}
	   *         Returns itself; method can be chained.
	   *
	   * @private
	   */


	  Component.prototype.unlockShowing = function unlockShowing() {
	    this.removeClass('vjs-lock-showing');
	    return this;
	  };

	  /**
	   * Get the value of an attribute on the `Component`s element.
	   *
	   * @param {string} attribute
	   *        Name of the attribute to get the value from.
	   *
	   * @return {string|null}
	   *         - The value of the attribute that was asked for.
	   *         - Can be an empty string on some browsers if the attribute does not exist
	   *           or has no value
	   *         - Most browsers will return null if the attibute does not exist or has
	   *           no value.
	   *
	   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute}
	   */


	  Component.prototype.getAttribute = function getAttribute(attribute) {
	    return Dom.getAttribute(this.el_, attribute);
	  };

	  /**
	   * Set the value of an attribute on the `Component`'s element
	   *
	   * @param {string} attribute
	   *        Name of the attribute to set.
	   *
	   * @param {string} value
	   *        Value to set the attribute to.
	   *
	   * @return {Component}
	   *         Returns itself; method can be chained.
	   *
	   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute}
	   */


	  Component.prototype.setAttribute = function setAttribute(attribute, value) {
	    Dom.setAttribute(this.el_, attribute, value);
	    return this;
	  };

	  /**
	   * Remove an attribute from the `Component`s element.
	   *
	   * @param {string} attribute
	   *        Name of the attribute to remove.
	   *
	   * @return {Component}
	   *         Returns itself; method can be chained.
	   *
	   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute}
	   */


	  Component.prototype.removeAttribute = function removeAttribute(attribute) {
	    Dom.removeAttribute(this.el_, attribute);
	    return this;
	  };

	  /**
	   * Get or set the width of the component based upon the CSS styles.
	   * See {@link Component#dimension} for more detailed information.
	   *
	   * @param {number|string} [num]
	   *        The width that you want to set postfixed with '%', 'px' or nothing.
	   *
	   * @param {boolean} [skipListeners]
	   *        Skip the resize event trigger
	   *
	   * @return {Component|number|string}
	   *         - The width when getting, zero if there is no width. Can be a string
	   *           postpixed with '%' or 'px'.
	   *         - Returns itself when setting; method can be chained.
	   */


	  Component.prototype.width = function width(num, skipListeners) {
	    return this.dimension('width', num, skipListeners);
	  };

	  /**
	   * Get or set the height of the component based upon the CSS styles.
	   * See {@link Component#dimension} for more detailed information.
	   *
	   * @param {number|string} [num]
	   *        The height that you want to set postfixed with '%', 'px' or nothing.
	   *
	   * @param {boolean} [skipListeners]
	   *        Skip the resize event trigger
	   *
	   * @return {Component|number|string}
	   *         - The width when getting, zero if there is no width. Can be a string
	   *           postpixed with '%' or 'px'.
	   *         - Returns itself when setting; method can be chained.
	   */


	  Component.prototype.height = function height(num, skipListeners) {
	    return this.dimension('height', num, skipListeners);
	  };

	  /**
	   * Set both the width and height of the `Component` element at the same time.
	   *
	   * @param  {number|string} width
	   *         Width to set the `Component`s element to.
	   *
	   * @param  {number|string} height
	   *         Height to set the `Component`s element to.
	   *
	   * @return {Component}
	   *         Returns itself; method can be chained.
	   */


	  Component.prototype.dimensions = function dimensions(width, height) {
	    // Skip resize listeners on width for optimization
	    return this.width(width, true).height(height);
	  };

	  /**
	   * Get or set width or height of the `Component` element. This is the shared code
	   * for the {@link Component#width} and {@link Component#height}.
	   *
	   * Things to know:
	   * - If the width or height in an number this will return the number postfixed with 'px'.
	   * - If the width/height is a percent this will return the percent postfixed with '%'
	   * - Hidden elements have a width of 0 with `window.getComputedStyle`. This function
	   *   defaults to the `Component`s `style.width` and falls back to `window.getComputedStyle`.
	   *   See [this]{@link http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/}
	   *   for more information
	   * - If you want the computed style of the component, use {@link Component#currentWidth}
	   *   and {@link {Component#currentHeight}
	   *
	   * @fires Component#resize
	   *
	   * @param {string} widthOrHeight
	   8        'width' or 'height'
	   *
	   * @param  {number|string} [num]
	   8         New dimension
	   *
	   * @param  {boolean} [skipListeners]
	   *         Skip resize event trigger
	   *
	   * @return {Component}
	   *         - the dimension when getting or 0 if unset
	   *         - Returns itself when setting; method can be chained.
	   */


	  Component.prototype.dimension = function dimension(widthOrHeight, num, skipListeners) {
	    if (num !== undefined) {
	      // Set to zero if null or literally NaN (NaN !== NaN)
	      if (num === null || num !== num) {
	        num = 0;
	      }

	      // Check if using css width/height (% or px) and adjust
	      if (('' + num).indexOf('%') !== -1 || ('' + num).indexOf('px') !== -1) {
	        this.el_.style[widthOrHeight] = num;
	      } else if (num === 'auto') {
	        this.el_.style[widthOrHeight] = '';
	      } else {
	        this.el_.style[widthOrHeight] = num + 'px';
	      }

	      // skipListeners allows us to avoid triggering the resize event when setting both width and height
	      if (!skipListeners) {
	        /**
	         * Triggered when a component is resized.
	         *
	         * @event Component#resize
	         * @type {EventTarget~Event}
	         */
	        this.trigger('resize');
	      }

	      // Return component
	      return this;
	    }

	    // Not setting a value, so getting it
	    // Make sure element exists
	    if (!this.el_) {
	      return 0;
	    }

	    // Get dimension value from style
	    var val = this.el_.style[widthOrHeight];
	    var pxIndex = val.indexOf('px');

	    if (pxIndex !== -1) {
	      // Return the pixel value with no 'px'
	      return parseInt(val.slice(0, pxIndex), 10);
	    }

	    // No px so using % or no style was set, so falling back to offsetWidth/height
	    // If component has display:none, offset will return 0
	    // TODO: handle display:none and no dimension style using px
	    return parseInt(this.el_['offset' + (0, _toTitleCase2['default'])(widthOrHeight)], 10);
	  };

	  /**
	   * Get the width or the height of the `Component` elements computed style. Uses
	   * `window.getComputedStyle`.
	   *
	   * @param {string} widthOrHeight
	   *        A string containing 'width' or 'height'. Whichever one you want to get.
	   *
	   * @return {number}
	   *         The dimension that gets asked for or 0 if nothing was set
	   *         for that dimension.
	   */


	  Component.prototype.currentDimension = function currentDimension(widthOrHeight) {
	    var computedWidthOrHeight = 0;

	    if (widthOrHeight !== 'width' && widthOrHeight !== 'height') {
	      throw new Error('currentDimension only accepts width or height value');
	    }

	    if (typeof _window2['default'].getComputedStyle === 'function') {
	      var computedStyle = _window2['default'].getComputedStyle(this.el_);

	      computedWidthOrHeight = computedStyle.getPropertyValue(widthOrHeight) || computedStyle[widthOrHeight];
	    }

	    // remove 'px' from variable and parse as integer
	    computedWidthOrHeight = parseFloat(computedWidthOrHeight);

	    // if the computed value is still 0, it's possible that the browser is lying
	    // and we want to check the offset values.
	    // This code also runs on IE8 and wherever getComputedStyle doesn't exist.
	    if (computedWidthOrHeight === 0) {
	      var rule = 'offset' + (0, _toTitleCase2['default'])(widthOrHeight);

	      computedWidthOrHeight = this.el_[rule];
	    }

	    return computedWidthOrHeight;
	  };

	  /**
	   * An object that contains width and height values of the `Component`s
	   * computed style. Uses `window.getComputedStyle`.
	   *
	   * @typedef {Object} Component~DimensionObject
	   *
	   * @property {number} width
	   *           The width of the `Component`s computed style.
	   *
	   * @property {number} height
	   *           The height of the `Component`s computed style.
	   */

	  /**
	   * Get an object that contains width and height values of the `Component`s
	   * computed style.
	   *
	   * @return {Component~DimensionObject}
	   *         The dimensions of the components element
	   */


	  Component.prototype.currentDimensions = function currentDimensions() {
	    return {
	      width: this.currentDimension('width'),
	      height: this.currentDimension('height')
	    };
	  };

	  /**
	   * Get the width of the `Component`s computed style. Uses `window.getComputedStyle`.
	   *
	   * @return {number} width
	   *           The width of the `Component`s computed style.
	   */


	  Component.prototype.currentWidth = function currentWidth() {
	    return this.currentDimension('width');
	  };

	  /**
	   * Get the height of the `Component`s computed style. Uses `window.getComputedStyle`.
	   *
	   * @return {number} height
	   *           The height of the `Component`s computed style.
	   */


	  Component.prototype.currentHeight = function currentHeight() {
	    return this.currentDimension('height');
	  };

	  /**
	   * Emit a 'tap' events when touch event support gets detected. This gets used to
	   * support toggling the controls through a tap on the video. They get enabled
	   * because every sub-component would have extra overhead otherwise.
	   *
	   * @private
	   * @fires Component#tap
	   * @listens Component#touchstart
	   * @listens Component#touchmove
	   * @listens Component#touchleave
	   * @listens Component#touchcancel
	   * @listens Component#touchend
	    */


	  Component.prototype.emitTapEvents = function emitTapEvents() {
	    // Track the start time so we can determine how long the touch lasted
	    var touchStart = 0;
	    var firstTouch = null;

	    // Maximum movement allowed during a touch event to still be considered a tap
	    // Other popular libs use anywhere from 2 (hammer.js) to 15,
	    // so 10 seems like a nice, round number.
	    var tapMovementThreshold = 10;

	    // The maximum length a touch can be while still being considered a tap
	    var touchTimeThreshold = 200;

	    var couldBeTap = void 0;

	    this.on('touchstart', function (event) {
	      // If more than one finger, don't consider treating this as a click
	      if (event.touches.length === 1) {
	        // Copy pageX/pageY from the object
	        firstTouch = {
	          pageX: event.touches[0].pageX,
	          pageY: event.touches[0].pageY
	        };
	        // Record start time so we can detect a tap vs. "touch and hold"
	        touchStart = new Date().getTime();
	        // Reset couldBeTap tracking
	        couldBeTap = true;
	      }
	    });

	    this.on('touchmove', function (event) {
	      // If more than one finger, don't consider treating this as a click
	      if (event.touches.length > 1) {
	        couldBeTap = false;
	      } else if (firstTouch) {
	        // Some devices will throw touchmoves for all but the slightest of taps.
	        // So, if we moved only a small distance, this could still be a tap
	        var xdiff = event.touches[0].pageX - firstTouch.pageX;
	        var ydiff = event.touches[0].pageY - firstTouch.pageY;
	        var touchDistance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);

	        if (touchDistance > tapMovementThreshold) {
	          couldBeTap = false;
	        }
	      }
	    });

	    var noTap = function noTap() {
	      couldBeTap = false;
	    };

	    // TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s
	    this.on('touchleave', noTap);
	    this.on('touchcancel', noTap);

	    // When the touch ends, measure how long it took and trigger the appropriate
	    // event
	    this.on('touchend', function (event) {
	      firstTouch = null;
	      // Proceed only if the touchmove/leave/cancel event didn't happen
	      if (couldBeTap === true) {
	        // Measure how long the touch lasted
	        var touchTime = new Date().getTime() - touchStart;

	        // Make sure the touch was less than the threshold to be considered a tap
	        if (touchTime < touchTimeThreshold) {
	          // Don't let browser turn this into a click
	          event.preventDefault();
	          /**
	           * Triggered when a `Component` is tapped.
	           *
	           * @event Component#tap
	           * @type {EventTarget~Event}
	           */
	          this.trigger('tap');
	          // It may be good to copy the touchend event object and change the
	          // type to tap, if the other event properties aren't exact after
	          // Events.fixEvent runs (e.g. event.target)
	        }
	      }
	    });
	  };

	  /**
	   * This function reports user activity whenever touch events happen. This can get
	   * turned off by any sub-components that wants touch events to act another way.
	   *
	   * Report user touch activity when touch events occur. User activity gets used to
	   * determine when controls should show/hide. It is simple when it comes to mouse
	   * events, because any mouse event should show the controls. So we capture mouse
	   * events that bubble up to the player and report activity when that happens.
	   * With touch events it isn't as easy as `touchstart` and `touchend` toggle player
	   * controls. So touch events can't help us at the player level either.
	   *
	   * User activity gets checked asynchronously. So what could happen is a tap event
	   * on the video turns the controls off. Then the `touchend` event bubbles up to
	   * the player. Which, if it reported user activity, would turn the controls right
	   * back on. We also don't want to completely block touch events from bubbling up.
	   * Furthermore a `touchmove` event and anything other than a tap, should not turn
	   * controls back on.
	   *
	   * @listens Component#touchstart
	   * @listens Component#touchmove
	   * @listens Component#touchend
	   * @listens Component#touchcancel
	   */


	  Component.prototype.enableTouchActivity = function enableTouchActivity() {
	    // Don't continue if the root player doesn't support reporting user activity
	    if (!this.player() || !this.player().reportUserActivity) {
	      return;
	    }

	    // listener for reporting that the user is active
	    var report = Fn.bind(this.player(), this.player().reportUserActivity);

	    var touchHolding = void 0;

	    this.on('touchstart', function () {
	      report();
	      // For as long as the they are touching the device or have their mouse down,
	      // we consider them active even if they're not moving their finger or mouse.
	      // So we want to continue to update that they are active
	      this.clearInterval(touchHolding);
	      // report at the same interval as activityCheck
	      touchHolding = this.setInterval(report, 250);
	    });

	    var touchEnd = function touchEnd(event) {
	      report();
	      // stop the interval that maintains activity if the touch is holding
	      this.clearInterval(touchHolding);
	    };

	    this.on('touchmove', report);
	    this.on('touchend', touchEnd);
	    this.on('touchcancel', touchEnd);
	  };

	  /**
	   * A callback that has no parameters and is bound into `Component`s context.
	   *
	   * @callback Component~GenericCallback
	   * @this Component
	   */

	  /**
	   * Creates a function that runs after an `x` millisecond timeout. This function is a
	   * wrapper around `window.setTimeout`. There are a few reasons to use this one
	   * instead though:
	   * 1. It gets cleared via  {@link Component#clearTimeout} when
	   *    {@link Component#dispose} gets called.
	   * 2. The function callback will gets turned into a {@link Component~GenericCallback}
	   *
	   * > Note: You can use `window.clearTimeout` on the id returned by this function. This
	   *         will cause its dispose listener not to get cleaned up! Please use
	   *         {@link Component#clearTimeout} or {@link Component#dispose}.
	   *
	   * @param {Component~GenericCallback} fn
	   *        The function that will be run after `timeout`.
	   *
	   * @param {number} timeout
	   *        Timeout in milliseconds to delay before executing the specified function.
	   *
	   * @return {number}
	   *         Returns a timeout ID that gets used to identify the timeout. It can also
	   *         get used in {@link Component#clearTimeout} to clear the timeout that
	   *         was set.
	   *
	   * @listens Component#dispose
	   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout}
	   */


	  Component.prototype.setTimeout = function setTimeout(fn, timeout) {
	    fn = Fn.bind(this, fn);

	    var timeoutId = _window2['default'].setTimeout(fn, timeout);
	    var disposeFn = function disposeFn() {
	      this.clearTimeout(timeoutId);
	    };

	    disposeFn.guid = 'vjs-timeout-' + timeoutId;

	    this.on('dispose', disposeFn);

	    return timeoutId;
	  };

	  /**
	   * Clears a timeout that gets created via `window.setTimeout` or
	   * {@link Component#setTimeout}. If you set a timeout via {@link Component#setTimeout}
	   * use this function instead of `window.clearTimout`. If you don't your dispose
	   * listener will not get cleaned up until {@link Component#dispose}!
	   *
	   * @param {number} timeoutId
	   *        The id of the timeout to clear. The return value of
	   *        {@link Component#setTimeout} or `window.setTimeout`.
	   *
	   * @return {number}
	   *         Returns the timeout id that was cleared.
	   *
	   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout}
	   */


	  Component.prototype.clearTimeout = function clearTimeout(timeoutId) {
	    _window2['default'].clearTimeout(timeoutId);

	    var disposeFn = function disposeFn() {};

	    disposeFn.guid = 'vjs-timeout-' + timeoutId;

	    this.off('dispose', disposeFn);

	    return timeoutId;
	  };

	  /**
	   * Creates a function that gets run every `x` milliseconds. This function is a wrapper
	   * around `window.setInterval`. There are a few reasons to use this one instead though.
	   * 1. It gets cleared via  {@link Component#clearInterval} when
	   *    {@link Component#dispose} gets called.
	   * 2. The function callback will be a {@link Component~GenericCallback}
	   *
	   * @param {Component~GenericCallback} fn
	   *        The function to run every `x` seconds.
	   *
	   * @param {number} interval
	   *        Execute the specified function every `x` milliseconds.
	   *
	   * @return {number}
	   *         Returns an id that can be used to identify the interval. It can also be be used in
	   *         {@link Component#clearInterval} to clear the interval.
	   *
	   * @listens Component#dispose
	   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval}
	   */


	  Component.prototype.setInterval = function setInterval(fn, interval) {
	    fn = Fn.bind(this, fn);

	    var intervalId = _window2['default'].setInterval(fn, interval);

	    var disposeFn = function disposeFn() {
	      this.clearInterval(intervalId);
	    };

	    disposeFn.guid = 'vjs-interval-' + intervalId;

	    this.on('dispose', disposeFn);

	    return intervalId;
	  };

	  /**
	   * Clears an interval that gets created via `window.setInterval` or
	   * {@link Component#setInterval}. If you set an inteval via {@link Component#setInterval}
	   * use this function instead of `window.clearInterval`. If you don't your dispose
	   * listener will not get cleaned up until {@link Component#dispose}!
	   *
	   * @param {number} intervalId
	   *        The id of the interval to clear. The return value of
	   *        {@link Component#setInterval} or `window.setInterval`.
	   *
	   * @return {number}
	   *         Returns the interval id that was cleared.
	   *
	   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval}
	   */


	  Component.prototype.clearInterval = function clearInterval(intervalId) {
	    _window2['default'].clearInterval(intervalId);

	    var disposeFn = function disposeFn() {};

	    disposeFn.guid = 'vjs-interval-' + intervalId;

	    this.off('dispose', disposeFn);

	    return intervalId;
	  };

	  /**
	   * Register a `Component` with `videojs` given the name and the component.
	   *
	   * > NOTE: {@link Tech}s should not be registered as a `Component`. {@link Tech}s
	   *         should be registered using {@link Tech.registerTech} or
	   *         {@link videojs:videojs.registerTech}.
	   *
	   * > NOTE: This function can also be seen on videojs as
	   *         {@link videojs:videojs.registerComponent}.
	   *
	   * @param {string} name
	   *        The name of the `Component` to register.
	   *
	   * @param {Component} comp
	   *        The `Component` class to register.
	   *
	   * @return {Component}
	   *         The `Component` that was registered.
	   */


	  Component.registerComponent = function registerComponent(name, comp) {
	    if (!name) {
	      return;
	    }

	    name = (0, _toTitleCase2['default'])(name);

	    if (!Component.components_) {
	      Component.components_ = {};
	    }

	    if (name === 'Player' && Component.components_[name]) {
	      (function () {
	        var Player = Component.components_[name];

	        // If we have players that were disposed, then their name will still be
	        // in Players.players. So, we must loop through and verify that the value
	        // for each item is not null. This allows registration of the Player component
	        // after all players have been disposed or before any were created.
	        if (Player.players && Object.keys(Player.players).length > 0 && Object.keys(Player.players).map(function (playerName) {
	          return Player.players[playerName];
	        }).every(Boolean)) {
	          throw new Error('Can not register Player component after player has been created');
	        }
	      })();
	    }

	    Component.components_[name] = comp;

	    return comp;
	  };

	  /**
	   * Get a `Component` based on the name it was registered with.
	   *
	   * @param {string} name
	   *        The Name of the component to get.
	   *
	   * @return {Component}
	   *         The `Component` that got registered under the given name.
	   *
	   * @deprecated In `videojs` 6 this will not return `Component`s that were not
	   *             registered using {@link Component.registerComponent}. Currently we
	   *             check the global `videojs` object for a `Component` name and
	   *             return that if it exists.
	   */


	  Component.getComponent = function getComponent(name) {
	    if (!name) {
	      return;
	    }

	    name = (0, _toTitleCase2['default'])(name);

	    if (Component.components_ && Component.components_[name]) {
	      return Component.components_[name];
	    }

	    if (_window2['default'] && _window2['default'].videojs && _window2['default'].videojs[name]) {
	      _log2['default'].warn('The ' + name + ' component was added to the videojs object when it should be registered using videojs.registerComponent(name, component)');

	      return _window2['default'].videojs[name];
	    }
	  };

	  /**
	   * Sets up the constructor using the supplied init method or uses the init of the
	   * parent object.
	   *
	   * @param {Object} [props={}]
	   *        An object of properties.
	   *
	   * @return {Object}
	   *         the extended object.
	   *
	   * @deprecated since version 5
	   */


	  Component.extend = function extend(props) {
	    props = props || {};

	    _log2['default'].warn('Component.extend({}) has been deprecated, ' + ' use videojs.extend(Component, {}) instead');

	    // Set up the constructor using the supplied init method
	    // or using the init of the parent object
	    // Make sure to check the unobfuscated version for external libs
	    var init = props.init || props.init || this.prototype.init || this.prototype.init || function () {};
	    // In Resig's simple class inheritance (previously used) the constructor
	    //  is a function that calls `this.init.apply(arguments)`
	    // However that would prevent us from using `ParentObject.call(this);`
	    //  in a Child constructor because the `this` in `this.init`
	    //  would still refer to the Child and cause an infinite loop.
	    // We would instead have to do
	    //    `ParentObject.prototype.init.apply(this, arguments);`
	    //  Bleh. We're not creating a _super() function, so it's good to keep
	    //  the parent constructor reference simple.
	    var subObj = function subObj() {
	      init.apply(this, arguments);
	    };

	    // Inherit from this object's prototype
	    subObj.prototype = Object.create(this.prototype);
	    // Reset the constructor property for subObj otherwise
	    // instances of subObj would have the constructor of the parent Object
	    subObj.prototype.constructor = subObj;

	    // Make the class extendable
	    subObj.extend = Component.extend;

	    // Extend subObj's prototype with functions and other properties from props
	    for (var name in props) {
	      if (props.hasOwnProperty(name)) {
	        subObj.prototype[name] = props[name];
	      }
	    }

	    return subObj;
	  };

	  return Component;
	}();

	Component.registerComponent('Component', Component);
	exports['default'] = Component;


/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.throttle = exports.bind = undefined;

	var _guid = __webpack_require__(260);

	/**
	 * Bind (a.k.a proxy or Context). A simple method for changing the context of a function
	 * It also stores a unique id on the function so it can be easily removed from events.
	 *
	 * @param {Mixed} context
	 *        The object to bind as scope.
	 *
	 * @param {Function} fn
	 *        The function to be bound to a scope.
	 *
	 * @param {number} [uid]
	 *        An optional unique ID for the function to be set
	 *
	 * @return {Function}
	 *         The new function that will be bound into the context given
	 */
	var bind = exports.bind = function bind(context, fn, uid) {
	  // Make sure the function has a unique ID
	  if (!fn.guid) {
	    fn.guid = (0, _guid.newGUID)();
	  }

	  // Create the new function that changes the context
	  var bound = function bound() {
	    return fn.apply(context, arguments);
	  };

	  // Allow for the ability to individualize this function
	  // Needed in the case where multiple objects might share the same prototype
	  // IF both items add an event listener with the same function, then you try to remove just one
	  // it will remove both because they both have the same guid.
	  // when using this, you need to use the bind method when you remove the listener as well.
	  // currently used in text tracks
	  bound.guid = uid ? uid + '_' + fn.guid : fn.guid;

	  return bound;
	};

	/**
	 * Wraps the given function, `fn`, with a new function that only invokes `fn`
	 * at most once per every `wait` milliseconds.
	 *
	 * @param  {Function} fn
	 *         The function to be throttled.
	 *
	 * @param  {Number}   wait
	 *         The number of milliseconds by which to throttle.
	 *
	 * @return {Function}
	 */
	/**
	 * @file fn.js
	 * @module fn
	 */
	var throttle = exports.throttle = function throttle(fn, wait) {
	  var last = Date.now();

	  var throttled = function throttled() {
	    var now = Date.now();

	    if (now - last >= wait) {
	      fn.apply(undefined, arguments);
	      last = now;
	    }
	  };

	  return throttled;
	};


/***/ },
/* 269 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	/**
	 * @file to-title-case.js
	 * @module to-title-case
	 */

	/**
	 * Uppercase the first letter of a string.
	 *
	 * @param {string} string
	 *        String to be uppercased
	 *
	 * @return {string}
	 *         The string with an uppercased first letter
	 */
	function toTitleCase(string) {
	  if (typeof string !== 'string') {
	    return string;
	  }

	  return string.charAt(0).toUpperCase() + string.slice(1);
	}

	exports['default'] = toTitleCase;


/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = mergeOptions;

	var _obj = __webpack_require__(263);

	/**
	 * Deep-merge one or more options objects, recursively merging **only** plain
	 * object properties.
	 *
	 * @param   {Object[]} sources
	 *          One or more objects to merge into a new object.
	 *
	 * @returns {Object}
	 *          A new object that is the merged result of all sources.
	 */
	function mergeOptions() {
	  var result = {};

	  for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {
	    sources[_key] = arguments[_key];
	  }

	  sources.forEach(function (source) {
	    if (!source) {
	      return;
	    }

	    (0, _obj.each)(source, function (value, key) {
	      if (!(0, _obj.isPlain)(value)) {
	        result[key] = value;
	        return;
	      }

	      if (!(0, _obj.isPlain)(result[key])) {
	        result[key] = {};
	      }

	      result[key] = mergeOptions(result[key], value);
	    });
	  });

	  return result;
	} /**
	   * @file merge-options.js
	   * @module merge-options
	   */


/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _events = __webpack_require__(265);

	var Events = _interopRequireWildcard(_events);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	/**
	 * `EventTarget` is a class that can have the same API as the DOM `EventTarget`. It
	 * adds shorthand functions that wrap around lengthy functions. For example:
	 * the `on` function is a wrapper around `addEventListener`.
	 *
	 * @see [EventTarget Spec]{@link https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget}
	 * @class EventTarget
	 */
	var EventTarget = function EventTarget() {};

	/**
	 * A Custom DOM event.
	 *
	 * @typedef {Object} EventTarget~Event
	 * @see [Properties]{@link https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent}
	 */

	/**
	 * All event listeners should follow the following format.
	 *
	 * @callback EventTarget~EventListener
	 * @this {EventTarget}
	 *
	 * @param {EventTarget~Event} event
	 *        the event that triggered this function
	 *
	 * @param {Object} [hash]
	 *        hash of data sent during the event
	 */

	/**
	 * An object containing event names as keys and booleans as values.
	 *
	 * > NOTE: If an event name is set to a true value here {@link EventTarget#trigger}
	 *         will have extra functionality. See that function for more information.
	 *
	 * @property EventTarget.prototype.allowedEvents_
	 * @private
	 */
	/**
	 * @file src/js/event-target.js
	 */
	EventTarget.prototype.allowedEvents_ = {};

	/**
	 * Adds an `event listener` to an instance of an `EventTarget`. An `event listener` is a
	 * function that will get called when an event with a certain name gets triggered.
	 *
	 * @param {string|string[]} type
	 *        An event name or an array of event names.
	 *
	 * @param {EventTarget~EventListener} fn
	 *        The function to call with `EventTarget`s
	 */
	EventTarget.prototype.on = function (type, fn) {
	  // Remove the addEventListener alias before calling Events.on
	  // so we don't get into an infinite type loop
	  var ael = this.addEventListener;

	  this.addEventListener = function () {};
	  Events.on(this, type, fn);
	  this.addEventListener = ael;
	};

	/**
	 * An alias of {@link EventTarget#on}. Allows `EventTarget` to mimic
	 * the standard DOM API.
	 *
	 * @function
	 * @see {@link EventTarget#on}
	 */
	EventTarget.prototype.addEventListener = EventTarget.prototype.on;

	/**
	 * Removes an `event listener` for a specific event from an instance of `EventTarget`.
	 * This makes it so that the `event listener` will no longer get called when the
	 * named event happens.
	 *
	 * @param {string|string[]} type
	 *        An event name or an array of event names.
	 *
	 * @param {EventTarget~EventListener} fn
	 *        The function to remove.
	 */
	EventTarget.prototype.off = function (type, fn) {
	  Events.off(this, type, fn);
	};

	/**
	 * An alias of {@link EventTarget#off}. Allows `EventTarget` to mimic
	 * the standard DOM API.
	 *
	 * @function
	 * @see {@link EventTarget#off}
	 */
	EventTarget.prototype.removeEventListener = EventTarget.prototype.off;

	/**
	 * This function will add an `event listener` that gets triggered only once. After the
	 * first trigger it will get removed. This is like adding an `event listener`
	 * with {@link EventTarget#on} that calls {@link EventTarget#off} on itself.
	 *
	 * @param {string|string[]} type
	 *        An event name or an array of event names.
	 *
	 * @param {EventTarget~EventListener} fn
	 *        The function to be called once for each event name.
	 */
	EventTarget.prototype.one = function (type, fn) {
	  // Remove the addEventListener alialing Events.on
	  // so we don't get into an infinite type loop
	  var ael = this.addEventListener;

	  this.addEventListener = function () {};
	  Events.one(this, type, fn);
	  this.addEventListener = ael;
	};

	/**
	 * This function causes an event to happen. This will then cause any `event listeners`
	 * that are waiting for that event, to get called. If there are no `event listeners`
	 * for an event then nothing will happen.
	 *
	 * If the name of the `Event` that is being triggered is in `EventTarget.allowedEvents_`.
	 * Trigger will also call the `on` + `uppercaseEventName` function.
	 *
	 * Example:
	 * 'click' is in `EventTarget.allowedEvents_`, so, trigger will attempt to call
	 * `onClick` if it exists.
	 *
	 * @param {string|EventTarget~Event|Object} event
	 *        The name of the event, an `Event`, or an object with a key of type set to
	 *        an event name.
	 */
	EventTarget.prototype.trigger = function (event) {
	  var type = event.type || event;

	  if (typeof event === 'string') {
	    event = { type: type };
	  }
	  event = Events.fixEvent(event);

	  if (this.allowedEvents_[type] && this['on' + type]) {
	    this['on' + type](event);
	  }

	  Events.trigger(this, event);
	};

	/**
	 * An alias of {@link EventTarget#trigger}. Allows `EventTarget` to mimic
	 * the standard DOM API.
	 *
	 * @function
	 * @see {@link EventTarget#trigger}
	 */
	EventTarget.prototype.dispatchEvent = EventTarget.prototype.trigger;

	exports['default'] = EventTarget;


/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _document = __webpack_require__(256);

	var _document2 = _interopRequireDefault(_document);

	var _window = __webpack_require__(255);

	var _window2 = _interopRequireDefault(_window);

	var _events = __webpack_require__(265);

	var Events = _interopRequireWildcard(_events);

	var _dom = __webpack_require__(259);

	var Dom = _interopRequireWildcard(_dom);

	var _fn = __webpack_require__(268);

	var Fn = _interopRequireWildcard(_fn);

	var _guid = __webpack_require__(260);

	var Guid = _interopRequireWildcard(_guid);

	var _browser = __webpack_require__(262);

	var browser = _interopRequireWildcard(_browser);

	var _log = __webpack_require__(261);

	var _log2 = _interopRequireDefault(_log);

	var _toTitleCase = __webpack_require__(269);

	var _toTitleCase2 = _interopRequireDefault(_toTitleCase);

	var _timeRanges = __webpack_require__(273);

	var _buffer = __webpack_require__(274);

	var _stylesheet = __webpack_require__(266);

	var stylesheet = _interopRequireWildcard(_stylesheet);

	var _fullscreenApi = __webpack_require__(275);

	var _fullscreenApi2 = _interopRequireDefault(_fullscreenApi);

	var _mediaError = __webpack_require__(276);

	var _mediaError2 = _interopRequireDefault(_mediaError);

	var _tuple = __webpack_require__(277);

	var _tuple2 = _interopRequireDefault(_tuple);

	var _obj = __webpack_require__(263);

	var _mergeOptions = __webpack_require__(270);

	var _mergeOptions2 = _interopRequireDefault(_mergeOptions);

	var _textTrackListConverter = __webpack_require__(278);

	var _textTrackListConverter2 = _interopRequireDefault(_textTrackListConverter);

	var _modalDialog = __webpack_require__(279);

	var _modalDialog2 = _interopRequireDefault(_modalDialog);

	var _tech = __webpack_require__(280);

	var _tech2 = _interopRequireDefault(_tech);

	var _audioTrackList = __webpack_require__(297);

	var _audioTrackList2 = _interopRequireDefault(_audioTrackList);

	var _videoTrackList = __webpack_require__(296);

	var _videoTrackList2 = _interopRequireDefault(_videoTrackList);

	__webpack_require__(298);

	__webpack_require__(299);

	__webpack_require__(301);

	__webpack_require__(303);

	__webpack_require__(304);

	__webpack_require__(305);

	__webpack_require__(307);

	__webpack_require__(308);

	__webpack_require__(351);

	__webpack_require__(352);

	__webpack_require__(353);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file player.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	// Subclasses Component


	// The following imports are used only to ensure that the corresponding modules
	// are always included in the video.js package. Importing the modules will
	// execute them and they will register themselves with video.js.


	// Import Html5 tech, at least for disposing the original video tag.


	// The following tech events are simply re-triggered
	// on the player when they happen
	var TECH_EVENTS_RETRIGGER = [
	/**
	 * Fired while the user agent is downloading media data.
	 *
	 * @event Player#progress
	 * @type {EventTarget~Event}
	 */
	/**
	 * Retrigger the `progress` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechProgress_
	 * @fires Player#progress
	 * @listens Tech#progress
	 */
	'progress',

	/**
	 * Fires when the loading of an audio/video is aborted.
	 *
	 * @event Player#abort
	 * @type {EventTarget~Event}
	 */
	/**
	 * Retrigger the `abort` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechAbort_
	 * @fires Player#abort
	 * @listens Tech#abort
	 */
	'abort',

	/**
	 * Fires when the browser is intentionally not getting media data.
	 *
	 * @event Player#suspend
	 * @type {EventTarget~Event}
	 */
	/**
	 * Retrigger the `suspend` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechSuspend_
	 * @fires Player#suspend
	 * @listens Tech#suspend
	 */
	'suspend',

	/**
	 * Fires when the current playlist is empty.
	 *
	 * @event Player#emptied
	 * @type {EventTarget~Event}
	 */
	/**
	 * Retrigger the `emptied` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechEmptied_
	 * @fires Player#emptied
	 * @listens Tech#emptied
	 */
	'emptied',
	/**
	 * Fires when the browser is trying to get media data, but data is not available.
	 *
	 * @event Player#stalled
	 * @type {EventTarget~Event}
	 */
	/**
	 * Retrigger the `stalled` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechStalled_
	 * @fires Player#stalled
	 * @listens Tech#stalled
	 */
	'stalled',

	/**
	 * Fires when the browser has loaded meta data for the audio/video.
	 *
	 * @event Player#loadedmetadata
	 * @type {EventTarget~Event}
	 */
	/**
	 * Retrigger the `stalled` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechLoadedmetadata_
	 * @fires Player#loadedmetadata
	 * @listens Tech#loadedmetadata
	 */
	'loadedmetadata',

	/**
	 * Fires when the browser has loaded the current frame of the audio/video.
	 *
	 * @event player#loadeddata
	 * @type {event}
	 */
	/**
	 * Retrigger the `loadeddata` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechLoaddeddata_
	 * @fires Player#loadeddata
	 * @listens Tech#loadeddata
	 */
	'loadeddata',

	/**
	 * Fires when the current playback position has changed.
	 *
	 * @event player#timeupdate
	 * @type {event}
	 */
	/**
	 * Retrigger the `timeupdate` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechTimeUpdate_
	 * @fires Player#timeupdate
	 * @listens Tech#timeupdate
	 */
	'timeupdate',

	/**
	 * Fires when the playing speed of the audio/video is changed
	 *
	 * @event player#ratechange
	 * @type {event}
	 */
	/**
	 * Retrigger the `ratechange` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechRatechange_
	 * @fires Player#ratechange
	 * @listens Tech#ratechange
	 */
	'ratechange',

	/**
	 * Fires when the volume has been changed
	 *
	 * @event player#volumechange
	 * @type {event}
	 */
	/**
	 * Retrigger the `volumechange` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechVolumechange_
	 * @fires Player#volumechange
	 * @listens Tech#volumechange
	 */
	'volumechange',

	/**
	 * Fires when the text track has been changed
	 *
	 * @event player#texttrackchange
	 * @type {event}
	 */
	/**
	 * Retrigger the `texttrackchange` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechTexttrackchange_
	 * @fires Player#texttrackchange
	 * @listens Tech#texttrackchange
	 */
	'texttrackchange'];

	/**
	 * An instance of the `Player` class is created when any of the Video.js setup methods
	 * are used to initialize a video.
	 *
	 * After an instance has been created it can be accessed globally in two ways:
	 * 1. By calling `videojs('example_video_1');`
	 * 2. By using it directly via  `videojs.players.example_video_1;`
	 *
	 * @extends Component
	 */

	var Player = function (_Component) {
	  _inherits(Player, _Component);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Element} tag
	   *        The original video DOM element used for configuring options.
	   *
	   * @param {Object} [options]
	   *        Object of option names and values.
	   *
	   * @param {Component~ReadyCallback} [ready]
	   *        Ready callback function.
	   */
	  function Player(tag, options, ready) {
	    _classCallCheck(this, Player);

	    // Make sure tag ID exists
	    tag.id = tag.id || 'vjs_video_' + Guid.newGUID();

	    // Set Options
	    // The options argument overrides options set in the video tag
	    // which overrides globally set options.
	    // This latter part coincides with the load order
	    // (tag must exist before Player)
	    options = (0, _obj.assign)(Player.getTagSettings(tag), options);

	    // Delay the initialization of children because we need to set up
	    // player properties first, and can't use `this` before `super()`
	    options.initChildren = false;

	    // Same with creating the element
	    options.createEl = false;

	    // we don't want the player to report touch activity on itself
	    // see enableTouchActivity in Component
	    options.reportTouchActivity = false;

	    // If language is not set, get the closest lang attribute
	    if (!options.language) {
	      if (typeof tag.closest === 'function') {
	        var closest = tag.closest('[lang]');

	        if (closest) {
	          options.language = closest.getAttribute('lang');
	        }
	      } else {
	        var element = tag;

	        while (element && element.nodeType === 1) {
	          if (Dom.getElAttributes(element).hasOwnProperty('lang')) {
	            options.language = element.getAttribute('lang');
	            break;
	          }
	          element = element.parentNode;
	        }
	      }
	    }

	    // Run base component initializing with new options

	    // if the global option object was accidentally blown away by
	    // someone, bail early with an informative error
	    var _this = _possibleConstructorReturn(this, _Component.call(this, null, options, ready));

	    if (!_this.options_ || !_this.options_.techOrder || !_this.options_.techOrder.length) {
	      throw new Error('No techOrder specified. Did you overwrite ' + 'videojs.options instead of just changing the ' + 'properties you want to override?');
	    }

	    // Store the original tag used to set options
	    _this.tag = tag;

	    // Store the tag attributes used to restore html5 element
	    _this.tagAttributes = tag && Dom.getElAttributes(tag);

	    // Update current language
	    _this.language(_this.options_.language);

	    // Update Supported Languages
	    if (options.languages) {
	      (function () {
	        // Normalise player option languages to lowercase
	        var languagesToLower = {};

	        Object.getOwnPropertyNames(options.languages).forEach(function (name) {
	          languagesToLower[name.toLowerCase()] = options.languages[name];
	        });
	        _this.languages_ = languagesToLower;
	      })();
	    } else {
	      _this.languages_ = Player.prototype.options_.languages;
	    }

	    // Cache for video property values.
	    _this.cache_ = {};

	    // Set poster
	    _this.poster_ = options.poster || '';

	    // Set controls
	    _this.controls_ = !!options.controls;

	    // Original tag settings stored in options
	    // now remove immediately so native controls don't flash.
	    // May be turned back on by HTML5 tech if nativeControlsForTouch is true
	    tag.controls = false;

	    /*
	     * Store the internal state of scrubbing
	     *
	     * @private
	     * @return {Boolean} True if the user is scrubbing
	     */
	    _this.scrubbing_ = false;

	    _this.el_ = _this.createEl();

	    // We also want to pass the original player options to each component and plugin
	    // as well so they don't need to reach back into the player for options later.
	    // We also need to do another copy of this.options_ so we don't end up with
	    // an infinite loop.
	    var playerOptionsCopy = (0, _mergeOptions2['default'])(_this.options_);

	    // Load plugins
	    if (options.plugins) {
	      (function () {
	        var plugins = options.plugins;

	        Object.getOwnPropertyNames(plugins).forEach(function (name) {
	          if (typeof this[name] === 'function') {
	            this[name](plugins[name]);
	          } else {
	            _log2['default'].error('Unable to find plugin:', name);
	          }
	        }, _this);
	      })();
	    }

	    _this.options_.playerOptions = playerOptionsCopy;

	    _this.initChildren();

	    // Set isAudio based on whether or not an audio tag was used
	    _this.isAudio(tag.nodeName.toLowerCase() === 'audio');

	    // Update controls className. Can't do this when the controls are initially
	    // set because the element doesn't exist yet.
	    if (_this.controls()) {
	      _this.addClass('vjs-controls-enabled');
	    } else {
	      _this.addClass('vjs-controls-disabled');
	    }

	    // Set ARIA label and region role depending on player type
	    _this.el_.setAttribute('role', 'region');
	    if (_this.isAudio()) {
	      _this.el_.setAttribute('aria-label', 'audio player');
	    } else {
	      _this.el_.setAttribute('aria-label', 'video player');
	    }

	    if (_this.isAudio()) {
	      _this.addClass('vjs-audio');
	    }

	    if (_this.flexNotSupported_()) {
	      _this.addClass('vjs-no-flex');
	    }

	    // TODO: Make this smarter. Toggle user state between touching/mousing
	    // using events, since devices can have both touch and mouse events.
	    // if (browser.TOUCH_ENABLED) {
	    //   this.addClass('vjs-touch-enabled');
	    // }

	    // iOS Safari has broken hover handling
	    if (!browser.IS_IOS) {
	      _this.addClass('vjs-workinghover');
	    }

	    // Make player easily findable by ID
	    Player.players[_this.id_] = _this;

	    // When the player is first initialized, trigger activity so components
	    // like the control bar show themselves if needed
	    _this.userActive(true);
	    _this.reportUserActivity();
	    _this.listenForUserActivity_();

	    _this.on('fullscreenchange', _this.handleFullscreenChange_);
	    _this.on('stageclick', _this.handleStageClick_);
	    return _this;
	  }

	  /**
	   * Destroys the video player and does any necessary cleanup.
	   *
	   * This is especially helpful if you are dynamically adding and removing videos
	   * to/from the DOM.
	   *
	   * @fires Player#dispose
	   */


	  Player.prototype.dispose = function dispose() {
	    /**
	     * Called when the player is being disposed of.
	     *
	     * @event Player#dispose
	     * @type {EventTarget~Event}
	     */
	    this.trigger('dispose');
	    // prevent dispose from being called twice
	    this.off('dispose');

	    if (this.styleEl_ && this.styleEl_.parentNode) {
	      this.styleEl_.parentNode.removeChild(this.styleEl_);
	    }

	    // Kill reference to this player
	    Player.players[this.id_] = null;

	    if (this.tag && this.tag.player) {
	      this.tag.player = null;
	    }

	    if (this.el_ && this.el_.player) {
	      this.el_.player = null;
	    }

	    if (this.tech_) {
	      this.tech_.dispose();
	    }

	    _Component.prototype.dispose.call(this);
	  };

	  /**
	   * Create the `Player`'s DOM element.
	   *
	   * @return {Element}
	   *         The DOM element that gets created.
	   */


	  Player.prototype.createEl = function createEl() {
	    var tag = this.tag;
	    var el = void 0;
	    var playerElIngest = this.playerElIngest_ = tag.parentNode && tag.parentNode.hasAttribute('data-vjs-player');

	    if (playerElIngest) {
	      el = this.el_ = tag.parentNode;
	    } else {
	      el = this.el_ = _Component.prototype.createEl.call(this, 'div');
	    }

	    // Remove width/height attrs from tag so CSS can make it 100% width/height
	    tag.removeAttribute('width');
	    tag.removeAttribute('height');

	    // Copy over all the attributes from the tag, including ID and class
	    // ID will now reference player box, not the video tag
	    var attrs = Dom.getElAttributes(tag);

	    Object.getOwnPropertyNames(attrs).forEach(function (attr) {
	      // workaround so we don't totally break IE7
	      // http://stackoverflow.com/questions/3653444/css-styles-not-applied-on-dynamic-elements-in-internet-explorer-7
	      if (attr === 'class') {
	        el.className += ' ' + attrs[attr];
	      } else {
	        el.setAttribute(attr, attrs[attr]);
	      }
	    });

	    // Update tag id/class for use as HTML5 playback tech
	    // Might think we should do this after embedding in container so .vjs-tech class
	    // doesn't flash 100% width/height, but class only applies with .video-js parent
	    tag.playerId = tag.id;
	    tag.id += '_html5_api';
	    tag.className = 'vjs-tech';

	    // Make player findable on elements
	    tag.player = el.player = this;
	    // Default state of video is paused
	    this.addClass('vjs-paused');

	    // Add a style element in the player that we'll use to set the width/height
	    // of the player in a way that's still overrideable by CSS, just like the
	    // video element
	    if (_window2['default'].VIDEOJS_NO_DYNAMIC_STYLE !== true) {
	      this.styleEl_ = stylesheet.createStyleElement('vjs-styles-dimensions');
	      var defaultsStyleEl = Dom.$('.vjs-styles-defaults');
	      var head = Dom.$('head');

	      head.insertBefore(this.styleEl_, defaultsStyleEl ? defaultsStyleEl.nextSibling : head.firstChild);
	    }

	    // Pass in the width/height/aspectRatio options which will update the style el
	    this.width(this.options_.width);
	    this.height(this.options_.height);
	    this.fluid(this.options_.fluid);
	    this.aspectRatio(this.options_.aspectRatio);

	    // Hide any links within the video/audio tag, because IE doesn't hide them completely.
	    var links = tag.getElementsByTagName('a');

	    for (var i = 0; i < links.length; i++) {
	      var linkEl = links.item(i);

	      Dom.addElClass(linkEl, 'vjs-hidden');
	      linkEl.setAttribute('hidden', 'hidden');
	    }

	    // insertElFirst seems to cause the networkState to flicker from 3 to 2, so
	    // keep track of the original for later so we can know if the source originally failed
	    tag.initNetworkState_ = tag.networkState;

	    // Wrap video tag in div (el/box) container
	    if (tag.parentNode && !playerElIngest) {
	      tag.parentNode.insertBefore(el, tag);
	    }

	    // insert the tag as the first child of the player element
	    // then manually add it to the children array so that this.addChild
	    // will work properly for other components
	    //
	    // Breaks iPhone, fixed in HTML5 setup.
	    Dom.insertElFirst(tag, el);
	    this.children_.unshift(tag);

	    this.el_ = el;

	    return el;
	  };

	  /**
	   * A getter/setter for the `Player`'s width.
	   *
	   * @param {number} [value]
	   *        The value to set the `Player's width to.
	   *
	   * @return {number}
	   *         The current width of the `Player`.
	   */


	  Player.prototype.width = function width(value) {
	    return this.dimension('width', value);
	  };

	  /**
	   * A getter/setter for the `Player`'s height.
	   *
	   * @param {number} [value]
	   *        The value to set the `Player's heigth to.
	   *
	   * @return {number}
	   *         The current heigth of the `Player`.
	   */


	  Player.prototype.height = function height(value) {
	    return this.dimension('height', value);
	  };

	  /**
	   * A getter/setter for the `Player`'s width & height.
	   *
	   * @param {string} dimension
	   *        This string can be:
	   *        - 'width'
	   *        - 'height'
	   *
	   * @param {number} [value]
	   *        Value for dimension specified in the first argument.
	   *
	   * @return {Player|number}
	   *         - Returns itself when setting; method can be chained.
	   *         - The dimension arguments value when getting (width/height).
	   */


	  Player.prototype.dimension = function dimension(_dimension, value) {
	    var privDimension = _dimension + '_';

	    if (value === undefined) {
	      return this[privDimension] || 0;
	    }

	    if (value === '') {
	      // If an empty string is given, reset the dimension to be automatic
	      this[privDimension] = undefined;
	    } else {
	      var parsedVal = parseFloat(value);

	      if (isNaN(parsedVal)) {
	        _log2['default'].error('Improper value "' + value + '" supplied for for ' + _dimension);
	        return this;
	      }

	      this[privDimension] = parsedVal;
	    }

	    this.updateStyleEl_();
	    return this;
	  };

	  /**
	   * A getter/setter/toggler for the vjs-fluid `className` on the `Player`.
	   *
	   * @param {boolean} [bool]
	   *        - A value of true adds the class.
	   *        - A value of false removes the class.
	   *        - No value will toggle the fluid class.
	   *
	   * @return {boolean|undefined}
	   *         - The value of fluid when getting.
	   *         - `undefined` when setting.
	   */


	  Player.prototype.fluid = function fluid(bool) {
	    if (bool === undefined) {
	      return !!this.fluid_;
	    }

	    this.fluid_ = !!bool;

	    if (bool) {
	      this.addClass('vjs-fluid');
	    } else {
	      this.removeClass('vjs-fluid');
	    }

	    this.updateStyleEl_();
	  };

	  /**
	   * Get/Set the aspect ratio
	   *
	   * @param {string} [ratio]
	   *        Aspect ratio for player
	   *
	   * @return {string|undefined}
	   *         returns the current aspect ratio when getting
	   */

	  /**
	   * A getter/setter for the `Player`'s aspect ratio.
	   *
	   * @param {string} [ratio]
	   *        The value to set the `Player's aspect ratio to.
	   *
	   * @return {string|undefined}
	   *         - The current aspect ratio of the `Player` when getting.
	   *         - undefined when setting
	   */


	  Player.prototype.aspectRatio = function aspectRatio(ratio) {
	    if (ratio === undefined) {
	      return this.aspectRatio_;
	    }

	    // Check for width:height format
	    if (!/^\d+\:\d+$/.test(ratio)) {
	      throw new Error('Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.');
	    }
	    this.aspectRatio_ = ratio;

	    // We're assuming if you set an aspect ratio you want fluid mode,
	    // because in fixed mode you could calculate width and height yourself.
	    this.fluid(true);

	    this.updateStyleEl_();
	  };

	  /**
	   * Update styles of the `Player` element (height, width and aspect ratio).
	   *
	   * @private
	   * @listens Tech#loadedmetadata
	   */


	  Player.prototype.updateStyleEl_ = function updateStyleEl_() {
	    if (_window2['default'].VIDEOJS_NO_DYNAMIC_STYLE === true) {
	      var _width = typeof this.width_ === 'number' ? this.width_ : this.options_.width;
	      var _height = typeof this.height_ === 'number' ? this.height_ : this.options_.height;
	      var techEl = this.tech_ && this.tech_.el();

	      if (techEl) {
	        if (_width >= 0) {
	          techEl.width = _width;
	        }
	        if (_height >= 0) {
	          techEl.height = _height;
	        }
	      }

	      return;
	    }

	    var width = void 0;
	    var height = void 0;
	    var aspectRatio = void 0;
	    var idClass = void 0;

	    // The aspect ratio is either used directly or to calculate width and height.
	    if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== 'auto') {
	      // Use any aspectRatio that's been specifically set
	      aspectRatio = this.aspectRatio_;
	    } else if (this.videoWidth() > 0) {
	      // Otherwise try to get the aspect ratio from the video metadata
	      aspectRatio = this.videoWidth() + ':' + this.videoHeight();
	    } else {
	      // Or use a default. The video element's is 2:1, but 16:9 is more common.
	      aspectRatio = '16:9';
	    }

	    // Get the ratio as a decimal we can use to calculate dimensions
	    var ratioParts = aspectRatio.split(':');
	    var ratioMultiplier = ratioParts[1] / ratioParts[0];

	    if (this.width_ !== undefined) {
	      // Use any width that's been specifically set
	      width = this.width_;
	    } else if (this.height_ !== undefined) {
	      // Or calulate the width from the aspect ratio if a height has been set
	      width = this.height_ / ratioMultiplier;
	    } else {
	      // Or use the video's metadata, or use the video el's default of 300
	      width = this.videoWidth() || 300;
	    }

	    if (this.height_ !== undefined) {
	      // Use any height that's been specifically set
	      height = this.height_;
	    } else {
	      // Otherwise calculate the height from the ratio and the width
	      height = width * ratioMultiplier;
	    }

	    // Ensure the CSS class is valid by starting with an alpha character
	    if (/^[^a-zA-Z]/.test(this.id())) {
	      idClass = 'dimensions-' + this.id();
	    } else {
	      idClass = this.id() + '-dimensions';
	    }

	    // Ensure the right class is still on the player for the style element
	    this.addClass(idClass);

	    stylesheet.setTextContent(this.styleEl_, '\n      .' + idClass + ' {\n        width: ' + width + 'px;\n        height: ' + height + 'px;\n      }\n\n      .' + idClass + '.vjs-fluid {\n        padding-top: ' + ratioMultiplier * 100 + '%;\n      }\n    ');
	  };

	  /**
	   * Load/Create an instance of playback {@link Tech} including element
	   * and API methods. Then append the `Tech` element in `Player` as a child.
	   *
	   * @param {string} techName
	   *        name of the playback technology
	   *
	   * @param {string} source
	   *        video source
	   *
	   * @private
	   */


	  Player.prototype.loadTech_ = function loadTech_(techName, source) {
	    var _this2 = this;

	    // Pause and remove current playback technology
	    if (this.tech_) {
	      this.unloadTech_();
	    }

	    // get rid of the HTML5 video tag as soon as we are using another tech
	    if (techName !== 'Html5' && this.tag) {
	      _tech2['default'].getTech('Html5').disposeMediaElement(this.tag);
	      this.tag.player = null;
	      this.tag = null;
	    }

	    this.techName_ = techName;

	    // Turn off API access because we're loading a new tech that might load asynchronously
	    this.isReady_ = false;

	    // Grab tech-specific options from player options and add source and parent element to use.
	    var techOptions = (0, _obj.assign)({
	      source: source,
	      'nativeControlsForTouch': this.options_.nativeControlsForTouch,
	      'playerId': this.id(),
	      'techId': this.id() + '_' + techName + '_api',
	      'videoTracks': this.videoTracks_,
	      'textTracks': this.textTracks_,
	      'audioTracks': this.audioTracks_,
	      'autoplay': this.options_.autoplay,
	      'preload': this.options_.preload,
	      'loop': this.options_.loop,
	      'muted': this.options_.muted,
	      'poster': this.poster(),
	      'language': this.language(),
	      'playerElIngest': this.playerElIngest_ || false,
	      'vtt.js': this.options_['vtt.js']
	    }, this.options_[techName.toLowerCase()]);

	    if (this.tag) {
	      techOptions.tag = this.tag;
	    }

	    if (source) {
	      this.currentType_ = source.type;

	      if (source.src === this.cache_.src && this.cache_.currentTime > 0) {
	        techOptions.startTime = this.cache_.currentTime;
	      }

	      this.cache_.sources = null;
	      this.cache_.source = source;
	      this.cache_.src = source.src;
	    }

	    // Initialize tech instance
	    var TechComponent = _tech2['default'].getTech(techName);

	    // Support old behavior of techs being registered as components.
	    // Remove once that deprecated behavior is removed.
	    if (!TechComponent) {
	      TechComponent = _component2['default'].getComponent(techName);
	    }
	    this.tech_ = new TechComponent(techOptions);

	    // player.triggerReady is always async, so don't need this to be async
	    this.tech_.ready(Fn.bind(this, this.handleTechReady_), true);

	    _textTrackListConverter2['default'].jsonToTextTracks(this.textTracksJson_ || [], this.tech_);

	    // Listen to all HTML5-defined events and trigger them on the player
	    TECH_EVENTS_RETRIGGER.forEach(function (event) {
	      _this2.on(_this2.tech_, event, _this2['handleTech' + (0, _toTitleCase2['default'])(event) + '_']);
	    });
	    this.on(this.tech_, 'loadstart', this.handleTechLoadStart_);
	    this.on(this.tech_, 'waiting', this.handleTechWaiting_);
	    this.on(this.tech_, 'canplay', this.handleTechCanPlay_);
	    this.on(this.tech_, 'canplaythrough', this.handleTechCanPlayThrough_);
	    this.on(this.tech_, 'playing', this.handleTechPlaying_);
	    this.on(this.tech_, 'ended', this.handleTechEnded_);
	    this.on(this.tech_, 'seeking', this.handleTechSeeking_);
	    this.on(this.tech_, 'seeked', this.handleTechSeeked_);
	    this.on(this.tech_, 'play', this.handleTechPlay_);
	    this.on(this.tech_, 'firstplay', this.handleTechFirstPlay_);
	    this.on(this.tech_, 'pause', this.handleTechPause_);
	    this.on(this.tech_, 'durationchange', this.handleTechDurationChange_);
	    this.on(this.tech_, 'fullscreenchange', this.handleTechFullscreenChange_);
	    this.on(this.tech_, 'error', this.handleTechError_);
	    this.on(this.tech_, 'loadedmetadata', this.updateStyleEl_);
	    this.on(this.tech_, 'posterchange', this.handleTechPosterChange_);
	    this.on(this.tech_, 'textdata', this.handleTechTextData_);

	    this.usingNativeControls(this.techGet_('controls'));

	    if (this.controls() && !this.usingNativeControls()) {
	      this.addTechControlsListeners_();
	    }

	    // Add the tech element in the DOM if it was not already there
	    // Make sure to not insert the original video element if using Html5
	    if (this.tech_.el().parentNode !== this.el() && (techName !== 'Html5' || !this.tag)) {
	      Dom.insertElFirst(this.tech_.el(), this.el());
	    }

	    // Get rid of the original video tag reference after the first tech is loaded
	    if (this.tag) {
	      this.tag.player = null;
	      this.tag = null;
	    }
	  };

	  /**
	   * Unload and dispose of the current playback {@link Tech}.
	   *
	   * @private
	   */


	  Player.prototype.unloadTech_ = function unloadTech_() {
	    // Save the current text tracks so that we can reuse the same text tracks with the next tech
	    this.videoTracks_ = this.videoTracks();
	    this.textTracks_ = this.textTracks();
	    this.audioTracks_ = this.audioTracks();
	    this.textTracksJson_ = _textTrackListConverter2['default'].textTracksToJson(this.tech_);

	    this.isReady_ = false;

	    this.tech_.dispose();

	    this.tech_ = false;
	  };

	  /**
	   * Return a reference to the current {@link Tech}, but only if given an object with the
	   * `IWillNotUseThisInPlugins` property having a true value. This is try and prevent misuse
	   * of techs by plugins.
	   *
	   * @param {Object} safety
	   *        An object that must contain `{IWillNotUseThisInPlugins: true}`
	   *
	   * @param {boolean} safety.IWillNotUseThisInPlugins
	   *        Must be set to true or else this function will throw an error.
	   *
	   * @return {Tech}
	   *         The Tech
	   */


	  Player.prototype.tech = function tech(safety) {
	    if (safety && safety.IWillNotUseThisInPlugins) {
	      return this.tech_;
	    }
	    var errorText = '\n      Please make sure that you are not using this inside of a plugin.\n      To disable this alert and error, please pass in an object with\n      `IWillNotUseThisInPlugins` to the `tech` method. See\n      https://github.com/videojs/video.js/issues/2617 for more info.\n    ';

	    _window2['default'].alert(errorText);
	    throw new Error(errorText);
	  };

	  /**
	   * Set up click and touch listeners for the playback element
	   *
	   * - On desktops: a click on the video itself will toggle playback
	   * - On mobile devices: a click on the video toggles controls
	   *   which is done by toggling the user state between active and
	   *   inactive
	   * - A tap can signal that a user has become active or has become inactive
	   *   e.g. a quick tap on an iPhone movie should reveal the controls. Another
	   *   quick tap should hide them again (signaling the user is in an inactive
	   *   viewing state)
	   * - In addition to this, we still want the user to be considered inactive after
	   *   a few seconds of inactivity.
	   *
	   * > Note: the only part of iOS interaction we can't mimic with this setup
	   * is a touch and hold on the video element counting as activity in order to
	   * keep the controls showing, but that shouldn't be an issue. A touch and hold
	   * on any controls will still keep the user active
	   *
	   * @private
	   */


	  Player.prototype.addTechControlsListeners_ = function addTechControlsListeners_() {
	    // Make sure to remove all the previous listeners in case we are called multiple times.
	    this.removeTechControlsListeners_();

	    // Some browsers (Chrome & IE) don't trigger a click on a flash swf, but do
	    // trigger mousedown/up.
	    // http://stackoverflow.com/questions/1444562/javascript-onclick-event-over-flash-object
	    // Any touch events are set to block the mousedown event from happening
	    this.on(this.tech_, 'mousedown', this.handleTechClick_);

	    // If the controls were hidden we don't want that to change without a tap event
	    // so we'll check if the controls were already showing before reporting user
	    // activity
	    this.on(this.tech_, 'touchstart', this.handleTechTouchStart_);
	    this.on(this.tech_, 'touchmove', this.handleTechTouchMove_);
	    this.on(this.tech_, 'touchend', this.handleTechTouchEnd_);

	    // The tap listener needs to come after the touchend listener because the tap
	    // listener cancels out any reportedUserActivity when setting userActive(false)
	    this.on(this.tech_, 'tap', this.handleTechTap_);
	  };

	  /**
	   * Remove the listeners used for click and tap controls. This is needed for
	   * toggling to controls disabled, where a tap/touch should do nothing.
	   *
	   * @private
	   */


	  Player.prototype.removeTechControlsListeners_ = function removeTechControlsListeners_() {
	    // We don't want to just use `this.off()` because there might be other needed
	    // listeners added by techs that extend this.
	    this.off(this.tech_, 'tap', this.handleTechTap_);
	    this.off(this.tech_, 'touchstart', this.handleTechTouchStart_);
	    this.off(this.tech_, 'touchmove', this.handleTechTouchMove_);
	    this.off(this.tech_, 'touchend', this.handleTechTouchEnd_);
	    this.off(this.tech_, 'mousedown', this.handleTechClick_);
	  };

	  /**
	   * Player waits for the tech to be ready
	   *
	   * @private
	   */


	  Player.prototype.handleTechReady_ = function handleTechReady_() {
	    this.triggerReady();

	    // Keep the same volume as before
	    if (this.cache_.volume) {
	      this.techCall_('setVolume', this.cache_.volume);
	    }

	    // Look if the tech found a higher resolution poster while loading
	    this.handleTechPosterChange_();

	    // Update the duration if available
	    this.handleTechDurationChange_();

	    // Chrome and Safari both have issues with autoplay.
	    // In Safari (5.1.1), when we move the video element into the container div, autoplay doesn't work.
	    // In Chrome (15), if you have autoplay + a poster + no controls, the video gets hidden (but audio plays)
	    // This fixes both issues. Need to wait for API, so it updates displays correctly
	    if ((this.src() || this.currentSrc()) && this.tag && this.options_.autoplay && this.paused()) {
	      try {
	        // Chrome Fix. Fixed in Chrome v16.
	        delete this.tag.poster;
	      } catch (e) {
	        (0, _log2['default'])('deleting tag.poster throws in some browsers', e);
	      }
	      this.play();
	    }
	  };

	  /**
	   * Retrigger the `loadstart` event that was triggered by the {@link Tech}. This
	   * function will also trigger {@link Player#firstplay} if it is the first loadstart
	   * for a video.
	   *
	   * @fires Player#loadstart
	   * @fires Player#firstplay
	   * @listens Tech#loadstart
	   * @private
	   */


	  Player.prototype.handleTechLoadStart_ = function handleTechLoadStart_() {
	    // TODO: Update to use `emptied` event instead. See #1277.

	    this.removeClass('vjs-ended');
	    this.removeClass('vjs-seeking');

	    // reset the error state
	    this.error(null);

	    // If it's already playing we want to trigger a firstplay event now.
	    // The firstplay event relies on both the play and loadstart events
	    // which can happen in any order for a new source
	    if (!this.paused()) {
	      /**
	       * Fired when the user agent begins looking for media data
	       *
	       * @event Player#loadstart
	       * @type {EventTarget~Event}
	       */
	      this.trigger('loadstart');
	      this.trigger('firstplay');
	    } else {
	      // reset the hasStarted state
	      this.hasStarted(false);
	      this.trigger('loadstart');
	    }
	  };

	  /**
	   * Add/remove the vjs-has-started class
	   *
	   * @fires Player#firstplay
	   *
	   * @param {boolean} hasStarted
	   *        - true: adds the class
	   *        - false: remove the class
	   *
	   * @return {boolean}
	   *         the boolean value of hasStarted
	   */


	  Player.prototype.hasStarted = function hasStarted(_hasStarted) {
	    if (_hasStarted !== undefined) {
	      // only update if this is a new value
	      if (this.hasStarted_ !== _hasStarted) {
	        this.hasStarted_ = _hasStarted;
	        if (_hasStarted) {
	          this.addClass('vjs-has-started');
	          // trigger the firstplay event if this newly has played
	          this.trigger('firstplay');
	        } else {
	          this.removeClass('vjs-has-started');
	        }
	      }
	      return this;
	    }
	    return !!this.hasStarted_;
	  };

	  /**
	   * Fired whenever the media begins or resumes playback
	   *
	   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play}
	   * @fires Player#play
	   * @listens Tech#play
	   * @private
	   */


	  Player.prototype.handleTechPlay_ = function handleTechPlay_() {
	    this.removeClass('vjs-ended');
	    this.removeClass('vjs-paused');
	    this.addClass('vjs-playing');

	    // hide the poster when the user hits play
	    this.hasStarted(true);
	    /**
	     * Triggered whenever an {@link Tech#play} event happens. Indicates that
	     * playback has started or resumed.
	     *
	     * @event Player#play
	     * @type {EventTarget~Event}
	     */
	    this.trigger('play');
	  };

	  /**
	   * Retrigger the `waiting` event that was triggered by the {@link Tech}.
	   *
	   * @fires Player#waiting
	   * @listens Tech#waiting
	   * @private
	   */


	  Player.prototype.handleTechWaiting_ = function handleTechWaiting_() {
	    var _this3 = this;

	    this.addClass('vjs-waiting');
	    /**
	     * A readyState change on the DOM element has caused playback to stop.
	     *
	     * @event Player#waiting
	     * @type {EventTarget~Event}
	     */
	    this.trigger('waiting');
	    this.one('timeupdate', function () {
	      return _this3.removeClass('vjs-waiting');
	    });
	  };

	  /**
	   * Retrigger the `canplay` event that was triggered by the {@link Tech}.
	   * > Note: This is not consistent between browsers. See #1351
	   *
	   * @fires Player#canplay
	   * @listens Tech#canplay
	   * @private
	   */


	  Player.prototype.handleTechCanPlay_ = function handleTechCanPlay_() {
	    this.removeClass('vjs-waiting');
	    /**
	     * The media has a readyState of HAVE_FUTURE_DATA or greater.
	     *
	     * @event Player#canplay
	     * @type {EventTarget~Event}
	     */
	    this.trigger('canplay');
	  };

	  /**
	   * Retrigger the `canplaythrough` event that was triggered by the {@link Tech}.
	   *
	   * @fires Player#canplaythrough
	   * @listens Tech#canplaythrough
	   * @private
	   */


	  Player.prototype.handleTechCanPlayThrough_ = function handleTechCanPlayThrough_() {
	    this.removeClass('vjs-waiting');
	    /**
	     * The media has a readyState of HAVE_ENOUGH_DATA or greater. This means that the
	     * entire media file can be played without buffering.
	     *
	     * @event Player#canplaythrough
	     * @type {EventTarget~Event}
	     */
	    this.trigger('canplaythrough');
	  };

	  /**
	   * Retrigger the `playing` event that was triggered by the {@link Tech}.
	   *
	   * @fires Player#playing
	   * @listens Tech#playing
	   * @private
	   */


	  Player.prototype.handleTechPlaying_ = function handleTechPlaying_() {
	    this.removeClass('vjs-waiting');
	    /**
	     * The media is no longer blocked from playback, and has started playing.
	     *
	     * @event Player#playing
	     * @type {EventTarget~Event}
	     */
	    this.trigger('playing');
	  };

	  /**
	   * Retrigger the `seeking` event that was triggered by the {@link Tech}.
	   *
	   * @fires Player#seeking
	   * @listens Tech#seeking
	   * @private
	   */


	  Player.prototype.handleTechSeeking_ = function handleTechSeeking_() {
	    this.addClass('vjs-seeking');
	    /**
	     * Fired whenever the player is jumping to a new time
	     *
	     * @event Player#seeking
	     * @type {EventTarget~Event}
	     */
	    this.trigger('seeking');
	  };

	  /**
	   * Retrigger the `seeked` event that was triggered by the {@link Tech}.
	   *
	   * @fires Player#seeked
	   * @listens Tech#seeked
	   * @private
	   */


	  Player.prototype.handleTechSeeked_ = function handleTechSeeked_() {
	    this.removeClass('vjs-seeking');
	    /**
	     * Fired when the player has finished jumping to a new time
	     *
	     * @event Player#seeked
	     * @type {EventTarget~Event}
	     */
	    this.trigger('seeked');
	  };

	  /**
	   * Retrigger the `firstplay` event that was triggered by the {@link Tech}.
	   *
	   * @fires Player#firstplay
	   * @listens Tech#firstplay
	   * @deprecated As of 6.0 passing the `starttime` option to the player will be deprecated
	   * @private
	   */


	  Player.prototype.handleTechFirstPlay_ = function handleTechFirstPlay_() {
	    // If the first starttime attribute is specified
	    // then we will start at the given offset in seconds
	    if (this.options_.starttime) {
	      _log2['default'].warn('Passing the `starttime` option to the player will be deprecated in 6.0');
	      this.currentTime(this.options_.starttime);
	    }

	    this.addClass('vjs-has-started');
	    /**
	     * Fired the first time a video is played. Not part of the HLS spec, and this is
	     * probably not the best implementation yet, so use sparingly. If you don't have a
	     * reason to prevent playback, use `myPlayer.one('play');` instead.
	     *
	     * @event Player#firstplay
	     * @type {EventTarget~Event}
	     */
	    this.trigger('firstplay');
	  };

	  /**
	   * Retrigger the `pause` event that was triggered by the {@link Tech}.
	   *
	   * @fires Player#pause
	   * @listens Tech#pause
	   * @private
	   */


	  Player.prototype.handleTechPause_ = function handleTechPause_() {
	    this.removeClass('vjs-playing');
	    this.addClass('vjs-paused');
	    /**
	     * Fired whenever the media has been paused
	     *
	     * @event Player#pause
	     * @type {EventTarget~Event}
	     */
	    this.trigger('pause');
	  };

	  /**
	   * Retrigger the `ended` event that was triggered by the {@link Tech}.
	   *
	   * @fires Player#ended
	   * @listens Tech#ended
	   * @private
	   */


	  Player.prototype.handleTechEnded_ = function handleTechEnded_() {
	    this.addClass('vjs-ended');
	    if (this.options_.loop) {
	      this.currentTime(0);
	      this.play();
	    } else if (!this.paused()) {
	      this.pause();
	    }

	    /**
	     * Fired when the end of the media resource is reached (currentTime == duration)
	     *
	     * @event Player#ended
	     * @type {EventTarget~Event}
	     */
	    this.trigger('ended');
	  };

	  /**
	   * Fired when the duration of the media resource is first known or changed
	   *
	   * @listens Tech#durationchange
	   * @private
	   */


	  Player.prototype.handleTechDurationChange_ = function handleTechDurationChange_() {
	    this.duration(this.techGet_('duration'));
	  };

	  /**
	   * Handle a click on the media element to play/pause
	   *
	   * @param {EventTarget~Event} event
	   *        the event that caused this function to trigger
	   *
	   * @listens Tech#mousedown
	   * @private
	   */


	  Player.prototype.handleTechClick_ = function handleTechClick_(event) {
	    // We're using mousedown to detect clicks thanks to Flash, but mousedown
	    // will also be triggered with right-clicks, so we need to prevent that
	    if (event.button !== 0) {
	      return;
	    }

	    // When controls are disabled a click should not toggle playback because
	    // the click is considered a control
	    if (this.controls()) {
	      if (this.paused()) {
	        this.play();
	      } else {
	        this.pause();
	      }
	    }
	  };

	  /**
	   * Handle a tap on the media element. It will toggle the user
	   * activity state, which hides and shows the controls.
	   *
	   * @listens Tech#tap
	   * @private
	   */


	  Player.prototype.handleTechTap_ = function handleTechTap_() {
	    this.userActive(!this.userActive());
	  };

	  /**
	   * Handle touch to start
	   *
	   * @listens Tech#touchstart
	   * @private
	   */


	  Player.prototype.handleTechTouchStart_ = function handleTechTouchStart_() {
	    this.userWasActive = this.userActive();
	  };

	  /**
	   * Handle touch to move
	   *
	   * @listens Tech#touchmove
	   * @private
	   */


	  Player.prototype.handleTechTouchMove_ = function handleTechTouchMove_() {
	    if (this.userWasActive) {
	      this.reportUserActivity();
	    }
	  };

	  /**
	   * Handle touch to end
	   *
	   * @param {EventTarget~Event} event
	   *        the touchend event that triggered
	   *        this function
	   *
	   * @listens Tech#touchend
	   * @private
	   */


	  Player.prototype.handleTechTouchEnd_ = function handleTechTouchEnd_(event) {
	    // Stop the mouse events from also happening
	    event.preventDefault();
	  };

	  /**
	   * Fired when the player switches in or out of fullscreen mode
	   *
	   * @private
	   * @listens Player#fullscreenchange
	   */


	  Player.prototype.handleFullscreenChange_ = function handleFullscreenChange_() {
	    if (this.isFullscreen()) {
	      this.addClass('vjs-fullscreen');
	    } else {
	      this.removeClass('vjs-fullscreen');
	    }
	  };

	  /**
	   * native click events on the SWF aren't triggered on IE11, Win8.1RT
	   * use stageclick events triggered from inside the SWF instead
	   *
	   * @private
	   * @listens stageclick
	   */


	  Player.prototype.handleStageClick_ = function handleStageClick_() {
	    this.reportUserActivity();
	  };

	  /**
	   * Handle Tech Fullscreen Change
	   *
	   * @param {EventTarget~Event} event
	   *        the fullscreenchange event that triggered this function
	   *
	   * @param {Object} data
	   *        the data that was sent with the event
	   *
	   * @private
	   * @listens Tech#fullscreenchange
	   * @fires Player#fullscreenchange
	   */


	  Player.prototype.handleTechFullscreenChange_ = function handleTechFullscreenChange_(event, data) {
	    if (data) {
	      this.isFullscreen(data.isFullscreen);
	    }
	    /**
	     * Fired when going in and out of fullscreen.
	     *
	     * @event Player#fullscreenchange
	     * @type {EventTarget~Event}
	     */
	    this.trigger('fullscreenchange');
	  };

	  /**
	   * Fires when an error occurred during the loading of an audio/video.
	   *
	   * @private
	   * @listens Tech#error
	   */


	  Player.prototype.handleTechError_ = function handleTechError_() {
	    var error = this.tech_.error();

	    this.error(error);
	  };

	  /**
	   * Retrigger the `textdata` event that was triggered by the {@link Tech}.
	   *
	   * @fires Player#textdata
	   * @listens Tech#textdata
	   * @private
	   */


	  Player.prototype.handleTechTextData_ = function handleTechTextData_() {
	    var data = null;

	    if (arguments.length > 1) {
	      data = arguments[1];
	    }

	    /**
	     * Fires when we get a textdata event from tech
	     *
	     * @event Player#textdata
	     * @type {EventTarget~Event}
	     */
	    this.trigger('textdata', data);
	  };

	  /**
	   * Get object for cached values.
	   *
	   * @return {Object}
	   *         get the current object cache
	   */


	  Player.prototype.getCache = function getCache() {
	    return this.cache_;
	  };

	  /**
	   * Pass values to the playback tech
	   *
	   * @param {string} [method]
	   *        the method to call
	   *
	   * @param {Object} arg
	   *        the argument to pass
	   *
	   * @private
	   */


	  Player.prototype.techCall_ = function techCall_(method, arg) {
	    // If it's not ready yet, call method when it is
	    if (this.tech_ && !this.tech_.isReady_) {
	      this.tech_.ready(function () {
	        this[method](arg);
	      }, true);

	      // Otherwise call method now
	    } else {
	      try {
	        if (this.tech_) {
	          this.tech_[method](arg);
	        }
	      } catch (e) {
	        (0, _log2['default'])(e);
	        throw e;
	      }
	    }
	  };

	  /**
	   * Get calls can't wait for the tech, and sometimes don't need to.
	   *
	   * @param {string} method
	   *        Tech method
	   *
	   * @return {Function|undefined}
	   *         the method or undefined
	   *
	   * @private
	   */


	  Player.prototype.techGet_ = function techGet_(method) {
	    if (this.tech_ && this.tech_.isReady_) {

	      // Flash likes to die and reload when you hide or reposition it.
	      // In these cases the object methods go away and we get errors.
	      // When that happens we'll catch the errors and inform tech that it's not ready any more.
	      try {
	        return this.tech_[method]();
	      } catch (e) {
	        // When building additional tech libs, an expected method may not be defined yet
	        if (this.tech_[method] === undefined) {
	          (0, _log2['default'])('Video.js: ' + method + ' method not defined for ' + this.techName_ + ' playback technology.', e);

	          // When a method isn't available on the object it throws a TypeError
	        } else if (e.name === 'TypeError') {
	          (0, _log2['default'])('Video.js: ' + method + ' unavailable on ' + this.techName_ + ' playback technology element.', e);
	          this.tech_.isReady_ = false;
	        } else {
	          (0, _log2['default'])(e);
	        }
	        throw e;
	      }
	    }

	    return;
	  };

	  /**
	   * start media playback
	   *
	   * @return {Player}
	   *         A reference to the player object this function was called on
	   */


	  Player.prototype.play = function play() {
	    // Only calls the tech's play if we already have a src loaded
	    if (this.src() || this.currentSrc()) {
	      this.techCall_('play');
	    } else {
	      this.tech_.one('loadstart', function () {
	        this.play();
	      });
	    }

	    return this;
	  };

	  /**
	   * Pause the video playback
	   *
	   * @return {Player}
	   *         A reference to the player object this function was called on
	   */


	  Player.prototype.pause = function pause() {
	    this.techCall_('pause');
	    return this;
	  };

	  /**
	   * Check if the player is paused or has yet to play
	   *
	   * @return {boolean}
	   *         - false: if the media is currently playing
	   *         - true: if media is not currently playing
	   */


	  Player.prototype.paused = function paused() {
	    // The initial state of paused should be true (in Safari it's actually false)
	    return this.techGet_('paused') === false ? false : true;
	  };

	  /**
	   * Returns whether or not the user is "scrubbing". Scrubbing is
	   * when the user has clicked the progress bar handle and is
	   * dragging it along the progress bar.
	   *
	   * @param {boolean} [isScrubbing]
	   *        wether the user is or is not scrubbing
	   *
	   * @return {boolean|Player}
	   *         A instance of the player that called this function when setting,
	   *         and the value of scrubbing when getting
	   */


	  Player.prototype.scrubbing = function scrubbing(isScrubbing) {
	    if (isScrubbing !== undefined) {
	      this.scrubbing_ = !!isScrubbing;

	      if (isScrubbing) {
	        this.addClass('vjs-scrubbing');
	      } else {
	        this.removeClass('vjs-scrubbing');
	      }

	      return this;
	    }

	    return this.scrubbing_;
	  };

	  /**
	   * Get or set the current time (in seconds)
	   *
	   * @param {number|string} [seconds]
	   *        The time to seek to in seconds
	   *
	   * @return {Player|number}
	   *         - the current time in seconds when getting
	   *         - a reference to the current player object when
	   *           getting
	   */


	  Player.prototype.currentTime = function currentTime(seconds) {
	    if (seconds !== undefined) {

	      this.techCall_('setCurrentTime', seconds);

	      return this;
	    }

	    // cache last currentTime and return. default to 0 seconds
	    //
	    // Caching the currentTime is meant to prevent a massive amount of reads on the tech's
	    // currentTime when scrubbing, but may not provide much performance benefit afterall.
	    // Should be tested. Also something has to read the actual current time or the cache will
	    // never get updated.
	    this.cache_.currentTime = this.techGet_('currentTime') || 0;
	    return this.cache_.currentTime;
	  };

	  /**
	   * Normally gets the length in time of the video in seconds;
	   * in all but the rarest use cases an argument will NOT be passed to the method
	   *
	   * > **NOTE**: The video must have started loading before the duration can be
	   * known, and in the case of Flash, may not be known until the video starts
	   * playing.
	   *
	   * @fires Player#durationchange
	   *
	   * @param {number} [seconds]
	   *        The duration of the video to set in seconds
	   *
	   * @return {number|Player}
	   *         - The duration of the video in seconds when getting
	   *         - A reference to the player that called this function
	   *           when setting
	   */


	  Player.prototype.duration = function duration(seconds) {
	    if (seconds === undefined) {
	      return this.cache_.duration || 0;
	    }

	    seconds = parseFloat(seconds) || 0;

	    // Standardize on Inifity for signaling video is live
	    if (seconds < 0) {
	      seconds = Infinity;
	    }

	    if (seconds !== this.cache_.duration) {
	      // Cache the last set value for optimized scrubbing (esp. Flash)
	      this.cache_.duration = seconds;

	      if (seconds === Infinity) {
	        this.addClass('vjs-live');
	      } else {
	        this.removeClass('vjs-live');
	      }
	      /**
	       * @event Player#durationchange
	       * @type {EventTarget~Event}
	       */
	      this.trigger('durationchange');
	    }

	    return this;
	  };

	  /**
	   * Calculates how much time is left in the video. Not part
	   * of the native video API.
	   *
	   * @return {number}
	   *         The time remaining in seconds
	   */


	  Player.prototype.remainingTime = function remainingTime() {
	    return this.duration() - this.currentTime();
	  };

	  //
	  // Kind of like an array of portions of the video that have been downloaded.

	  /**
	   * Get a TimeRange object with an array of the times of the video
	   * that have been downloaded. If you just want the percent of the
	   * video that's been downloaded, use bufferedPercent.
	   *
	   * @see [Buffered Spec]{@link http://dev.w3.org/html5/spec/video.html#dom-media-buffered}
	   *
	   * @return {TimeRange}
	   *         A mock TimeRange object (following HTML spec)
	   */


	  Player.prototype.buffered = function buffered() {
	    var buffered = this.techGet_('buffered');

	    if (!buffered || !buffered.length) {
	      buffered = (0, _timeRanges.createTimeRange)(0, 0);
	    }

	    return buffered;
	  };

	  /**
	   * Get the percent (as a decimal) of the video that's been downloaded.
	   * This method is not a part of the native HTML video API.
	   *
	   * @return {number}
	   *         A decimal between 0 and 1 representing the percent
	   *         that is bufferred 0 being 0% and 1 being 100%
	   */


	  Player.prototype.bufferedPercent = function bufferedPercent() {
	    return (0, _buffer.bufferedPercent)(this.buffered(), this.duration());
	  };

	  /**
	   * Get the ending time of the last buffered time range
	   * This is used in the progress bar to encapsulate all time ranges.
	   *
	   * @return {number}
	   *         The end of the last buffered time range
	   */


	  Player.prototype.bufferedEnd = function bufferedEnd() {
	    var buffered = this.buffered();
	    var duration = this.duration();
	    var end = buffered.end(buffered.length - 1);

	    if (end > duration) {
	      end = duration;
	    }

	    return end;
	  };

	  /**
	   * Get or set the current volume of the media
	   *
	   * @param  {number} [percentAsDecimal]
	   *         The new volume as a decimal percent:
	   *         - 0 is muted/0%/off
	   *         - 1.0 is 100%/full
	   *         - 0.5 is half volume or 50%
	   *
	   * @return {Player|number}
	   *         a reference to the calling player when setting and the
	   *         current volume as a percent when getting
	   */


	  Player.prototype.volume = function volume(percentAsDecimal) {
	    var vol = void 0;

	    if (percentAsDecimal !== undefined) {
	      // Force value to between 0 and 1
	      vol = Math.max(0, Math.min(1, parseFloat(percentAsDecimal)));
	      this.cache_.volume = vol;
	      this.techCall_('setVolume', vol);

	      return this;
	    }

	    // Default to 1 when returning current volume.
	    vol = parseFloat(this.techGet_('volume'));
	    return isNaN(vol) ? 1 : vol;
	  };

	  /**
	   * Get the current muted state, or turn mute on or off
	   *
	   * @param {boolean} [muted]
	   *        - true to mute
	   *        - false to unmute
	   *
	   * @return {boolean|Player}
	   *         - true if mute is on and getting
	   *         - false if mute is off and getting
	   *         - A reference to the current player when setting
	   */


	  Player.prototype.muted = function muted(_muted) {
	    if (_muted !== undefined) {
	      this.techCall_('setMuted', _muted);
	      return this;
	    }
	    return this.techGet_('muted') || false;
	  };

	  /**
	   * Check if current tech can support native fullscreen
	   * (e.g. with built in controls like iOS, so not our flash swf)
	   *
	   * @return {boolean}
	   *         if native fullscreen is supported
	   */


	  Player.prototype.supportsFullScreen = function supportsFullScreen() {
	    return this.techGet_('supportsFullScreen') || false;
	  };

	  /**
	   * Check if the player is in fullscreen mode or tell the player that it
	   * is or is not in fullscreen mode.
	   *
	   * > NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official
	   * property and instead document.fullscreenElement is used. But isFullscreen is
	   * still a valuable property for internal player workings.
	   *
	   * @param  {boolean} [isFS]
	   *         Set the players current fullscreen state
	   *
	   * @return {boolean|Player}
	   *         - true if fullscreen is on and getting
	   *         - false if fullscreen is off and getting
	   *         - A reference to the current player when setting
	   */


	  Player.prototype.isFullscreen = function isFullscreen(isFS) {
	    if (isFS !== undefined) {
	      this.isFullscreen_ = !!isFS;
	      return this;
	    }
	    return !!this.isFullscreen_;
	  };

	  /**
	   * Increase the size of the video to full screen
	   * In some browsers, full screen is not supported natively, so it enters
	   * "full window mode", where the video fills the browser window.
	   * In browsers and devices that support native full screen, sometimes the
	   * browser's default controls will be shown, and not the Video.js custom skin.
	   * This includes most mobile devices (iOS, Android) and older versions of
	   * Safari.
	   *
	   * @fires Player#fullscreenchange
	   * @return {Player}
	   *         A reference to the current player
	   */


	  Player.prototype.requestFullscreen = function requestFullscreen() {
	    var fsApi = _fullscreenApi2['default'];

	    this.isFullscreen(true);

	    if (fsApi.requestFullscreen) {
	      // the browser supports going fullscreen at the element level so we can
	      // take the controls fullscreen as well as the video

	      // Trigger fullscreenchange event after change
	      // We have to specifically add this each time, and remove
	      // when canceling fullscreen. Otherwise if there's multiple
	      // players on a page, they would all be reacting to the same fullscreen
	      // events
	      Events.on(_document2['default'], fsApi.fullscreenchange, Fn.bind(this, function documentFullscreenChange(e) {
	        this.isFullscreen(_document2['default'][fsApi.fullscreenElement]);

	        // If cancelling fullscreen, remove event listener.
	        if (this.isFullscreen() === false) {
	          Events.off(_document2['default'], fsApi.fullscreenchange, documentFullscreenChange);
	        }
	        /**
	         * @event Player#fullscreenchange
	         * @type {EventTarget~Event}
	         */
	        this.trigger('fullscreenchange');
	      }));

	      this.el_[fsApi.requestFullscreen]();
	    } else if (this.tech_.supportsFullScreen()) {
	      // we can't take the video.js controls fullscreen but we can go fullscreen
	      // with native controls
	      this.techCall_('enterFullScreen');
	    } else {
	      // fullscreen isn't supported so we'll just stretch the video element to
	      // fill the viewport
	      this.enterFullWindow();
	      /**
	       * @event Player#fullscreenchange
	       * @type {EventTarget~Event}
	       */
	      this.trigger('fullscreenchange');
	    }

	    return this;
	  };

	  /**
	   * Return the video to its normal size after having been in full screen mode
	   *
	   * @fires Player#fullscreenchange
	   *
	   * @return {Player}
	   *         A reference to the current player
	   */


	  Player.prototype.exitFullscreen = function exitFullscreen() {
	    var fsApi = _fullscreenApi2['default'];

	    this.isFullscreen(false);

	    // Check for browser element fullscreen support
	    if (fsApi.requestFullscreen) {
	      _document2['default'][fsApi.exitFullscreen]();
	    } else if (this.tech_.supportsFullScreen()) {
	      this.techCall_('exitFullScreen');
	    } else {
	      this.exitFullWindow();
	      /**
	       * @event Player#fullscreenchange
	       * @type {EventTarget~Event}
	       */
	      this.trigger('fullscreenchange');
	    }

	    return this;
	  };

	  /**
	   * When fullscreen isn't supported we can stretch the
	   * video container to as wide as the browser will let us.
	   *
	   * @fires Player#enterFullWindow
	   */


	  Player.prototype.enterFullWindow = function enterFullWindow() {
	    this.isFullWindow = true;

	    // Storing original doc overflow value to return to when fullscreen is off
	    this.docOrigOverflow = _document2['default'].documentElement.style.overflow;

	    // Add listener for esc key to exit fullscreen
	    Events.on(_document2['default'], 'keydown', Fn.bind(this, this.fullWindowOnEscKey));

	    // Hide any scroll bars
	    _document2['default'].documentElement.style.overflow = 'hidden';

	    // Apply fullscreen styles
	    Dom.addElClass(_document2['default'].body, 'vjs-full-window');

	    /**
	     * @event Player#enterFullWindow
	     * @type {EventTarget~Event}
	     */
	    this.trigger('enterFullWindow');
	  };

	  /**
	   * Check for call to either exit full window or
	   * full screen on ESC key
	   *
	   * @param {string} event
	   *        Event to check for key press
	   */


	  Player.prototype.fullWindowOnEscKey = function fullWindowOnEscKey(event) {
	    if (event.keyCode === 27) {
	      if (this.isFullscreen() === true) {
	        this.exitFullscreen();
	      } else {
	        this.exitFullWindow();
	      }
	    }
	  };

	  /**
	   * Exit full window
	   *
	   * @fires Player#exitFullWindow
	   */


	  Player.prototype.exitFullWindow = function exitFullWindow() {
	    this.isFullWindow = false;
	    Events.off(_document2['default'], 'keydown', this.fullWindowOnEscKey);

	    // Unhide scroll bars.
	    _document2['default'].documentElement.style.overflow = this.docOrigOverflow;

	    // Remove fullscreen styles
	    Dom.removeElClass(_document2['default'].body, 'vjs-full-window');

	    // Resize the box, controller, and poster to original sizes
	    // this.positionAll();
	    /**
	     * @event Player#exitFullWindow
	     * @type {EventTarget~Event}
	     */
	    this.trigger('exitFullWindow');
	  };

	  /**
	   * Check whether the player can play a given mimetype
	   *
	   * @see https://www.w3.org/TR/2011/WD-html5-20110113/video.html#dom-navigator-canplaytype
	   *
	   * @param {string} type
	   *        The mimetype to check
	   *
	   * @return {string}
	   *         'probably', 'maybe', or '' (empty string)
	   */


	  Player.prototype.canPlayType = function canPlayType(type) {
	    var can = void 0;

	    // Loop through each playback technology in the options order
	    for (var i = 0, j = this.options_.techOrder; i < j.length; i++) {
	      var techName = (0, _toTitleCase2['default'])(j[i]);
	      var tech = _tech2['default'].getTech(techName);

	      // Support old behavior of techs being registered as components.
	      // Remove once that deprecated behavior is removed.
	      if (!tech) {
	        tech = _component2['default'].getComponent(techName);
	      }

	      // Check if the current tech is defined before continuing
	      if (!tech) {
	        _log2['default'].error('The "' + techName + '" tech is undefined. Skipped browser support check for that tech.');
	        continue;
	      }

	      // Check if the browser supports this technology
	      if (tech.isSupported()) {
	        can = tech.canPlayType(type);

	        if (can) {
	          return can;
	        }
	      }
	    }

	    return '';
	  };

	  /**
	   * Select source based on tech-order or source-order
	   * Uses source-order selection if `options.sourceOrder` is truthy. Otherwise,
	   * defaults to tech-order selection
	   *
	   * @param {Array} sources
	   *        The sources for a media asset
	   *
	   * @return {Object|boolean}
	   *         Object of source and tech order or false
	   */


	  Player.prototype.selectSource = function selectSource(sources) {
	    var _this4 = this;

	    // Get only the techs specified in `techOrder` that exist and are supported by the
	    // current platform
	    var techs = this.options_.techOrder.map(_toTitleCase2['default']).map(function (techName) {
	      // `Component.getComponent(...)` is for support of old behavior of techs
	      // being registered as components.
	      // Remove once that deprecated behavior is removed.
	      return [techName, _tech2['default'].getTech(techName) || _component2['default'].getComponent(techName)];
	    }).filter(function (_ref) {
	      var techName = _ref[0],
	          tech = _ref[1];

	      // Check if the current tech is defined before continuing
	      if (tech) {
	        // Check if the browser supports this technology
	        return tech.isSupported();
	      }

	      _log2['default'].error('The "' + techName + '" tech is undefined. Skipped browser support check for that tech.');
	      return false;
	    });

	    // Iterate over each `innerArray` element once per `outerArray` element and execute
	    // `tester` with both. If `tester` returns a non-falsy value, exit early and return
	    // that value.
	    var findFirstPassingTechSourcePair = function findFirstPassingTechSourcePair(outerArray, innerArray, tester) {
	      var found = void 0;

	      outerArray.some(function (outerChoice) {
	        return innerArray.some(function (innerChoice) {
	          found = tester(outerChoice, innerChoice);

	          if (found) {
	            return true;
	          }
	        });
	      });

	      return found;
	    };

	    var foundSourceAndTech = void 0;
	    var flip = function flip(fn) {
	      return function (a, b) {
	        return fn(b, a);
	      };
	    };
	    var finder = function finder(_ref2, source) {
	      var techName = _ref2[0],
	          tech = _ref2[1];

	      if (tech.canPlaySource(source, _this4.options_[techName.toLowerCase()])) {
	        return { source: source, tech: techName };
	      }
	    };

	    // Depending on the truthiness of `options.sourceOrder`, we swap the order of techs and sources
	    // to select from them based on their priority.
	    if (this.options_.sourceOrder) {
	      // Source-first ordering
	      foundSourceAndTech = findFirstPassingTechSourcePair(sources, techs, flip(finder));
	    } else {
	      // Tech-first ordering
	      foundSourceAndTech = findFirstPassingTechSourcePair(techs, sources, finder);
	    }

	    return foundSourceAndTech || false;
	  };

	  /**
	   * The source function updates the video source
	   * There are three types of variables you can pass as the argument.
	   * **URL string**: A URL to the the video file. Use this method if you are sure
	   * the current playback technology (HTML5/Flash) can support the source you
	   * provide. Currently only MP4 files can be used in both HTML5 and Flash.
	   *
	   * @param {Tech~SourceObject|Tech~SourceObject[]} [source]
	   *        One SourceObject or an array of SourceObjects
	   *
	   * @return {string|Player}
	   *         - The current video source when getting
	   *         - The player when setting
	   */


	  Player.prototype.src = function src(source) {
	    if (source === undefined) {
	      return this.techGet_('src');
	    }

	    var currentTech = _tech2['default'].getTech(this.techName_);

	    // Support old behavior of techs being registered as components.
	    // Remove once that deprecated behavior is removed.
	    if (!currentTech) {
	      currentTech = _component2['default'].getComponent(this.techName_);
	    }

	    // case: Array of source objects to choose from and pick the best to play
	    if (Array.isArray(source)) {
	      this.sourceList_(source);

	      // case: URL String (http://myvideo...)
	    } else if (typeof source === 'string') {
	      // create a source object from the string
	      this.src({ src: source });

	      // case: Source object { src: '', type: '' ... }
	    } else if (source instanceof Object) {
	      // check if the source has a type and the loaded tech cannot play the source
	      // if there's no type we'll just try the current tech
	      if (source.type && !currentTech.canPlaySource(source, this.options_[this.techName_.toLowerCase()])) {
	        // create a source list with the current source and send through
	        // the tech loop to check for a compatible technology
	        this.sourceList_([source]);
	      } else {
	        this.cache_.sources = null;
	        this.cache_.source = source;
	        this.cache_.src = source.src;

	        this.currentType_ = source.type || '';

	        // wait until the tech is ready to set the source
	        this.ready(function () {

	          // The setSource tech method was added with source handlers
	          // so older techs won't support it
	          // We need to check the direct prototype for the case where subclasses
	          // of the tech do not support source handlers
	          if (currentTech.prototype.hasOwnProperty('setSource')) {
	            this.techCall_('setSource', source);
	          } else {
	            this.techCall_('src', source.src);
	          }

	          if (this.options_.preload === 'auto') {
	            this.load();
	          }

	          if (this.options_.autoplay) {
	            this.play();
	          }

	          // Set the source synchronously if possible (#2326)
	        }, true);
	      }
	    }

	    return this;
	  };

	  /**
	   * Handle an array of source objects
	   *
	   * @param  {Tech~SourceObject[]} sources
	   *         Array of source objects
	   *
	   * @private
	   */


	  Player.prototype.sourceList_ = function sourceList_(sources) {
	    var sourceTech = this.selectSource(sources);

	    if (sourceTech) {
	      if (sourceTech.tech === this.techName_) {
	        // if this technology is already loaded, set the source
	        this.src(sourceTech.source);
	      } else {
	        // load this technology with the chosen source
	        this.loadTech_(sourceTech.tech, sourceTech.source);
	      }

	      this.cache_.sources = sources;
	    } else {
	      // We need to wrap this in a timeout to give folks a chance to add error event handlers
	      this.setTimeout(function () {
	        this.error({ code: 4, message: this.localize(this.options_.notSupportedMessage) });
	      }, 0);

	      // we could not find an appropriate tech, but let's still notify the delegate that this is it
	      // this needs a better comment about why this is needed
	      this.triggerReady();
	    }
	  };

	  /**
	   * Begin loading the src data.
	   *
	   * @return {Player}
	   *         A reference to the player
	   */


	  Player.prototype.load = function load() {
	    this.techCall_('load');
	    return this;
	  };

	  /**
	   * Reset the player. Loads the first tech in the techOrder,
	   * and calls `reset` on the tech`.
	   *
	   * @return {Player}
	   *         A reference to the player
	   */


	  Player.prototype.reset = function reset() {
	    this.loadTech_((0, _toTitleCase2['default'])(this.options_.techOrder[0]), null);
	    this.techCall_('reset');
	    return this;
	  };

	  /**
	   * Returns all of the current source objects.
	   *
	   * @return {Tech~SourceObject[]}
	   *         The current source objects
	   */


	  Player.prototype.currentSources = function currentSources() {
	    var source = this.currentSource();
	    var sources = [];

	    // assume `{}` or `{ src }`
	    if (Object.keys(source).length !== 0) {
	      sources.push(source);
	    }

	    return this.cache_.sources || sources;
	  };

	  /**
	   * Returns the current source object.
	   *
	   * @return {Tech~SourceObject}
	   *         The current source object
	   */


	  Player.prototype.currentSource = function currentSource() {
	    var source = {};
	    var src = this.currentSrc();

	    if (src) {
	      source.src = src;
	    }

	    return this.cache_.source || source;
	  };

	  /**
	   * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4
	   * Can be used in conjuction with `currentType` to assist in rebuilding the current source object.
	   *
	   * @return {string}
	   *         The current source
	   */


	  Player.prototype.currentSrc = function currentSrc() {
	    return this.techGet_('currentSrc') || this.cache_.src || '';
	  };

	  /**
	   * Get the current source type e.g. video/mp4
	   * This can allow you rebuild the current source object so that you could load the same
	   * source and tech later
	   *
	   * @return {string}
	   *         The source MIME type
	   */


	  Player.prototype.currentType = function currentType() {
	    return this.currentType_ || '';
	  };

	  /**
	   * Get or set the preload attribute
	   *
	   * @param {boolean} [value]
	   *        - true means that we should preload
	   *        - false maens that we should not preload
	   *
	   * @return {string|Player}
	   *         - the preload attribute value when getting
	   *         - the player when setting
	   */


	  Player.prototype.preload = function preload(value) {
	    if (value !== undefined) {
	      this.techCall_('setPreload', value);
	      this.options_.preload = value;
	      return this;
	    }
	    return this.techGet_('preload');
	  };

	  /**
	   * Get or set the autoplay attribute.
	   *
	   * @param {boolean} [value]
	   *        - true means that we should autoplay
	   *        - false maens that we should not autoplay
	   *
	   * @return {string|Player}
	   *         - the current value of autoplay
	   *         - the player when setting
	   */


	  Player.prototype.autoplay = function autoplay(value) {
	    if (value !== undefined) {
	      this.techCall_('setAutoplay', value);
	      this.options_.autoplay = value;
	      return this;
	    }
	    return this.techGet_('autoplay', value);
	  };

	  /**
	   * Get or set the loop attribute on the video element.
	   *
	   * @param {boolean} [value]
	   *        - true means that we should loop the video
	   *        - false means that we should not loop the video
	   *
	   * @return {string|Player}
	   *         - the current value of loop when getting
	   *         - the player when setting
	   */


	  Player.prototype.loop = function loop(value) {
	    if (value !== undefined) {
	      this.techCall_('setLoop', value);
	      this.options_.loop = value;
	      return this;
	    }
	    return this.techGet_('loop');
	  };

	  /**
	   * Get or set the poster image source url
	   *
	   * @fires Player#posterchange
	   *
	   * @param {string} [src]
	   *        Poster image source URL
	   *
	   * @return {string|Player}
	   *         - the current value of poster when getting
	   *         - the player when setting
	   */


	  Player.prototype.poster = function poster(src) {
	    if (src === undefined) {
	      return this.poster_;
	    }

	    // The correct way to remove a poster is to set as an empty string
	    // other falsey values will throw errors
	    if (!src) {
	      src = '';
	    }

	    // update the internal poster variable
	    this.poster_ = src;

	    // update the tech's poster
	    this.techCall_('setPoster', src);

	    // alert components that the poster has been set
	    /**
	     * This event fires when the poster image is changed on the player.
	     *
	     * @event Player#posterchange
	     * @type {EventTarget~Event}
	     */
	    this.trigger('posterchange');

	    return this;
	  };

	  /**
	   * Some techs (e.g. YouTube) can provide a poster source in an
	   * asynchronous way. We want the poster component to use this
	   * poster source so that it covers up the tech's controls.
	   * (YouTube's play button). However we only want to use this
	   * soruce if the player user hasn't set a poster through
	   * the normal APIs.
	   *
	   * @fires Player#posterchange
	   * @listens Tech#posterchange
	   * @private
	   */


	  Player.prototype.handleTechPosterChange_ = function handleTechPosterChange_() {
	    if (!this.poster_ && this.tech_ && this.tech_.poster) {
	      this.poster_ = this.tech_.poster() || '';

	      // Let components know the poster has changed
	      this.trigger('posterchange');
	    }
	  };

	  /**
	   * Get or set whether or not the controls are showing.
	   *
	   * @fires Player#controlsenabled
	   *
	   * @param {boolean} [bool]
	   *        - true to turn controls on
	   *        - false to turn controls off
	   *
	   * @return {boolean|Player}
	   *         - the current value of controls when getting
	   *         - the player when setting
	   */


	  Player.prototype.controls = function controls(bool) {
	    if (bool !== undefined) {
	      bool = !!bool;

	      // Don't trigger a change event unless it actually changed
	      if (this.controls_ !== bool) {
	        this.controls_ = bool;

	        if (this.usingNativeControls()) {
	          this.techCall_('setControls', bool);
	        }

	        if (bool) {
	          this.removeClass('vjs-controls-disabled');
	          this.addClass('vjs-controls-enabled');
	          /**
	           * @event Player#controlsenabled
	           * @type {EventTarget~Event}
	           */
	          this.trigger('controlsenabled');

	          if (!this.usingNativeControls()) {
	            this.addTechControlsListeners_();
	          }
	        } else {
	          this.removeClass('vjs-controls-enabled');
	          this.addClass('vjs-controls-disabled');
	          /**
	           * @event Player#controlsdisabled
	           * @type {EventTarget~Event}
	           */
	          this.trigger('controlsdisabled');

	          if (!this.usingNativeControls()) {
	            this.removeTechControlsListeners_();
	          }
	        }
	      }
	      return this;
	    }
	    return !!this.controls_;
	  };

	  /**
	   * Toggle native controls on/off. Native controls are the controls built into
	   * devices (e.g. default iPhone controls), Flash, or other techs
	   * (e.g. Vimeo Controls)
	   * **This should only be set by the current tech, because only the tech knows
	   * if it can support native controls**
	   *
	   * @fires Player#usingnativecontrols
	   * @fires Player#usingcustomcontrols
	   *
	   * @param {boolean} [bool]
	   *        - true to turn native controls on
	   *        - false to turn native controls off
	   *
	   * @return {boolean|Player}
	   *         - the current value of native controls when getting
	   *         - the player when setting
	   */


	  Player.prototype.usingNativeControls = function usingNativeControls(bool) {
	    if (bool !== undefined) {
	      bool = !!bool;

	      // Don't trigger a change event unless it actually changed
	      if (this.usingNativeControls_ !== bool) {
	        this.usingNativeControls_ = bool;
	        if (bool) {
	          this.addClass('vjs-using-native-controls');

	          /**
	           * player is using the native device controls
	           *
	           * @event Player#usingnativecontrols
	           * @type {EventTarget~Event}
	           */
	          this.trigger('usingnativecontrols');
	        } else {
	          this.removeClass('vjs-using-native-controls');

	          /**
	           * player is using the custom HTML controls
	           *
	           * @event Player#usingcustomcontrols
	           * @type {EventTarget~Event}
	           */
	          this.trigger('usingcustomcontrols');
	        }
	      }
	      return this;
	    }
	    return !!this.usingNativeControls_;
	  };

	  /**
	   * Set or get the current MediaError
	   *
	   * @fires Player#error
	   *
	   * @param  {MediaError|string|number} [err]
	   *         A MediaError or a string/number to be turned
	   *         into a MediaError
	   *
	   * @return {MediaError|null|Player}
	   *         - The current MediaError when getting (or null)
	   *         - The player when setting
	   */


	  Player.prototype.error = function error(err) {
	    if (err === undefined) {
	      return this.error_ || null;
	    }

	    // restoring to default
	    if (err === null) {
	      this.error_ = err;
	      this.removeClass('vjs-error');
	      if (this.errorDisplay) {
	        this.errorDisplay.close();
	      }
	      return this;
	    }

	    this.error_ = new _mediaError2['default'](err);

	    // add the vjs-error classname to the player
	    this.addClass('vjs-error');

	    // log the name of the error type and any message
	    // ie8 just logs "[object object]" if you just log the error object
	    _log2['default'].error('(CODE:' + this.error_.code + ' ' + _mediaError2['default'].errorTypes[this.error_.code] + ')', this.error_.message, this.error_);

	    /**
	     * @event Player#error
	     * @type {EventTarget~Event}
	     */
	    this.trigger('error');

	    return this;
	  };

	  /**
	   * Report user activity
	   *
	   * @param {Object} event
	   *        Event object
	   */


	  Player.prototype.reportUserActivity = function reportUserActivity(event) {
	    this.userActivity_ = true;
	  };

	  /**
	   * Get/set if user is active
	   *
	   * @fires Player#useractive
	   * @fires Player#userinactive
	   *
	   * @param {boolean} [bool]
	   *        - true if the user is active
	   *        - false if the user is inactive
	   * @return {boolean|Player}
	   *         - the current value of userActive when getting
	   *         - the player when setting
	   */


	  Player.prototype.userActive = function userActive(bool) {
	    if (bool !== undefined) {
	      bool = !!bool;
	      if (bool !== this.userActive_) {
	        this.userActive_ = bool;
	        if (bool) {
	          // If the user was inactive and is now active we want to reset the
	          // inactivity timer
	          this.userActivity_ = true;
	          this.removeClass('vjs-user-inactive');
	          this.addClass('vjs-user-active');
	          /**
	           * @event Player#useractive
	           * @type {EventTarget~Event}
	           */
	          this.trigger('useractive');
	        } else {
	          // We're switching the state to inactive manually, so erase any other
	          // activity
	          this.userActivity_ = false;

	          // Chrome/Safari/IE have bugs where when you change the cursor it can
	          // trigger a mousemove event. This causes an issue when you're hiding
	          // the cursor when the user is inactive, and a mousemove signals user
	          // activity. Making it impossible to go into inactive mode. Specifically
	          // this happens in fullscreen when we really need to hide the cursor.
	          //
	          // When this gets resolved in ALL browsers it can be removed
	          // https://code.google.com/p/chromium/issues/detail?id=103041
	          if (this.tech_) {
	            this.tech_.one('mousemove', function (e) {
	              e.stopPropagation();
	              e.preventDefault();
	            });
	          }

	          this.removeClass('vjs-user-active');
	          this.addClass('vjs-user-inactive');
	          /**
	           * @event Player#userinactive
	           * @type {EventTarget~Event}
	           */
	          this.trigger('userinactive');
	        }
	      }
	      return this;
	    }
	    return this.userActive_;
	  };

	  /**
	   * Listen for user activity based on timeout value
	   *
	   * @private
	   */


	  Player.prototype.listenForUserActivity_ = function listenForUserActivity_() {
	    var mouseInProgress = void 0;
	    var lastMoveX = void 0;
	    var lastMoveY = void 0;
	    var handleActivity = Fn.bind(this, this.reportUserActivity);

	    var handleMouseMove = function handleMouseMove(e) {
	      // #1068 - Prevent mousemove spamming
	      // Chrome Bug: https://code.google.com/p/chromium/issues/detail?id=366970
	      if (e.screenX !== lastMoveX || e.screenY !== lastMoveY) {
	        lastMoveX = e.screenX;
	        lastMoveY = e.screenY;
	        handleActivity();
	      }
	    };

	    var handleMouseDown = function handleMouseDown() {
	      handleActivity();
	      // For as long as the they are touching the device or have their mouse down,
	      // we consider them active even if they're not moving their finger or mouse.
	      // So we want to continue to update that they are active
	      this.clearInterval(mouseInProgress);
	      // Setting userActivity=true now and setting the interval to the same time
	      // as the activityCheck interval (250) should ensure we never miss the
	      // next activityCheck
	      mouseInProgress = this.setInterval(handleActivity, 250);
	    };

	    var handleMouseUp = function handleMouseUp(event) {
	      handleActivity();
	      // Stop the interval that maintains activity if the mouse/touch is down
	      this.clearInterval(mouseInProgress);
	    };

	    // Any mouse movement will be considered user activity
	    this.on('mousedown', handleMouseDown);
	    this.on('mousemove', handleMouseMove);
	    this.on('mouseup', handleMouseUp);

	    // Listen for keyboard navigation
	    // Shouldn't need to use inProgress interval because of key repeat
	    this.on('keydown', handleActivity);
	    this.on('keyup', handleActivity);

	    // Run an interval every 250 milliseconds instead of stuffing everything into
	    // the mousemove/touchmove function itself, to prevent performance degradation.
	    // `this.reportUserActivity` simply sets this.userActivity_ to true, which
	    // then gets picked up by this loop
	    // http://ejohn.org/blog/learning-from-twitter/
	    var inactivityTimeout = void 0;

	    this.setInterval(function () {
	      // Check to see if mouse/touch activity has happened
	      if (this.userActivity_) {
	        // Reset the activity tracker
	        this.userActivity_ = false;

	        // If the user state was inactive, set the state to active
	        this.userActive(true);

	        // Clear any existing inactivity timeout to start the timer over
	        this.clearTimeout(inactivityTimeout);

	        var timeout = this.options_.inactivityTimeout;

	        if (timeout > 0) {
	          // In <timeout> milliseconds, if no more activity has occurred the
	          // user will be considered inactive
	          inactivityTimeout = this.setTimeout(function () {
	            // Protect against the case where the inactivityTimeout can trigger just
	            // before the next user activity is picked up by the activity check loop
	            // causing a flicker
	            if (!this.userActivity_) {
	              this.userActive(false);
	            }
	          }, timeout);
	        }
	      }
	    }, 250);
	  };

	  /**
	   * Gets or sets the current playback rate. A playback rate of
	   * 1.0 represents normal speed and 0.5 would indicate half-speed
	   * playback, for instance.
	   *
	   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate
	   *
	   * @param {number} [rate]
	   *       New playback rate to set.
	   *
	   * @return {number|Player}
	   *         - The current playback rate when getting or 1.0
	   *         - the player when setting
	   */


	  Player.prototype.playbackRate = function playbackRate(rate) {
	    if (rate !== undefined) {
	      this.techCall_('setPlaybackRate', rate);
	      return this;
	    }

	    if (this.tech_ && this.tech_.featuresPlaybackRate) {
	      return this.techGet_('playbackRate');
	    }
	    return 1.0;
	  };

	  /**
	   * Gets or sets the audio flag
	   *
	   * @param {boolean} bool
	   *        - true signals that this is an audio player
	   *        - false signals that this is not an audio player
	   *
	   * @return {Player|boolean}
	   *         - the current value of isAudio when getting
	   *         - the player if setting
	   */


	  Player.prototype.isAudio = function isAudio(bool) {
	    if (bool !== undefined) {
	      this.isAudio_ = !!bool;
	      return this;
	    }

	    return !!this.isAudio_;
	  };

	  /**
	   * Get the {@link VideoTrackList}
	   *
	   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist
	   *
	   * @return {VideoTrackList}
	   *         the current video track list
	   */


	  Player.prototype.videoTracks = function videoTracks() {
	    // if we have not yet loadTech_, we create videoTracks_
	    // these will be passed to the tech during loading
	    if (!this.tech_) {
	      this.videoTracks_ = this.videoTracks_ || new _videoTrackList2['default']();
	      return this.videoTracks_;
	    }

	    return this.tech_.videoTracks();
	  };

	  /**
	   * Get the {@link AudioTrackList}
	   *
	   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist
	   *
	   * @return {AudioTrackList}
	   *         the current audio track list
	   */


	  Player.prototype.audioTracks = function audioTracks() {
	    // if we have not yet loadTech_, we create videoTracks_
	    // these will be passed to the tech during loading
	    if (!this.tech_) {
	      this.audioTracks_ = this.audioTracks_ || new _audioTrackList2['default']();
	      return this.audioTracks_;
	    }

	    return this.tech_.audioTracks();
	  };

	  /**
	   * Get the {@link TextTrackList}
	   *
	   * Text tracks are tracks of timed text events.
	   * - Captions: text displayed over the video
	   *             for the hearing impaired
	   * - Subtitles: text displayed over the video for
	   *              those who don't understand language in the video
	   * - Chapters: text displayed in a menu allowing the user to jump
	   *             to particular points (chapters) in the video
	   * - Descriptions: (not yet implemented) audio descriptions that are read back to
	   *                 the user by a screen reading device
	   *
	   * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks
	   *
	   * @return {TextTrackList|undefined}
	   *         The current TextTrackList or undefined if
	   *         or undefined if we don't have a tech
	   */


	  Player.prototype.textTracks = function textTracks() {
	    // cannot use techGet_ directly because it checks to see whether the tech is ready.
	    // Flash is unlikely to be ready in time but textTracks should still work.
	    if (this.tech_) {
	      return this.tech_.textTracks();
	    }
	  };

	  /**
	   * Get the "remote" {@link TextTrackList}. Remote Text Tracks
	   * are tracks that were added to the HTML video element and can
	   * be removed, whereas normal texttracks cannot be removed.
	   *
	   *
	   * @return {TextTrackList|undefined}
	   *         The current remote text track list or undefined
	   *         if we don't have a tech
	   */


	  Player.prototype.remoteTextTracks = function remoteTextTracks() {
	    if (this.tech_) {
	      return this.tech_.remoteTextTracks();
	    }
	  };

	  /**
	   * Get the "remote" {@link HTMLTrackElementList}.
	   * This gives the user all of the DOM elements that match up
	   * with the remote {@link TextTrackList}.
	   *
	   * @return {HTMLTrackElementList}
	   *         The current remote text track list elements
	   *         or undefined if we don't have a tech
	   */


	  Player.prototype.remoteTextTrackEls = function remoteTextTrackEls() {
	    if (this.tech_) {
	      return this.tech_.remoteTextTrackEls();
	    }
	  };

	  /**
	   * A helper method for adding a {@link TextTrack} to our
	   * {@link TextTrackList}.
	   *
	   * In addition to the W3C settings we allow adding additional info through options.
	   *
	   * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack
	   *
	   * @param {string} [kind]
	   *        the kind of TextTrack you are adding
	   *
	   * @param {string} [label]
	   *        the label to give the TextTrack label
	   *
	   * @param {string} [language]
	   *        the language to set on the TextTrack
	   *
	   * @return {TextTrack|undefined}
	   *         the TextTrack that was added or undefined
	   *         if there is no tech
	   */


	  Player.prototype.addTextTrack = function addTextTrack(kind, label, language) {
	    if (this.tech_) {
	      return this.tech_.addTextTrack(kind, label, language);
	    }
	  };

	  /**
	   * Create a remote {@link TextTrack} and an {@link HTMLTrackElement}. It will
	   * automatically removed from the video element whenever the source changes, unless
	   * manualCleanup is set to false.
	   *
	   * @param {Object} options
	   *        Options to pass to {@link HTMLTrackElement} during creation. See
	   *        {@link HTMLTrackElement} for object properties that you should use.
	   *
	   * @param {boolean} [manualCleanup=true] if set to false, the TextTrack will be
	   *
	   * @return {HTMLTrackElement}
	   *         the HTMLTrackElement that was created and added
	   *         to the HTMLTrackElementList and the remote
	   *         TextTrackList
	   *
	   * @deprecated The default value of the "manualCleanup" parameter will default
	   *             to "false" in upcoming versions of Video.js
	   */


	  Player.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {
	    if (this.tech_) {
	      return this.tech_.addRemoteTextTrack(options, manualCleanup);
	    }
	  };

	  /**
	   * Remove a remote {@link TextTrack} from the respective
	   * {@link TextTrackList} and {@link HTMLTrackElementList}.
	   *
	   * @param {Object} track
	   *        Remote {@link TextTrack} to remove
	   *
	   * @return {undefined}
	   *         does not return anything
	   */


	  Player.prototype.removeRemoteTextTrack = function removeRemoteTextTrack() {
	    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	        _ref3$track = _ref3.track,
	        track = _ref3$track === undefined ? arguments[0] : _ref3$track;

	    // destructure the input into an object with a track argument, defaulting to arguments[0]
	    // default the whole argument to an empty object if nothing was passed in

	    if (this.tech_) {
	      return this.tech_.removeRemoteTextTrack(track);
	    }
	  };

	  /**
	   * Get video width
	   *
	   * @return {number}
	   *         current video width
	   */


	  Player.prototype.videoWidth = function videoWidth() {
	    return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;
	  };

	  /**
	   * Get video height
	   *
	   * @return {number}
	   *         current video height
	   */


	  Player.prototype.videoHeight = function videoHeight() {
	    return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;
	  };

	  // Methods to add support for
	  // initialTime: function() { return this.techCall_('initialTime'); },
	  // startOffsetTime: function() { return this.techCall_('startOffsetTime'); },
	  // played: function() { return this.techCall_('played'); },
	  // defaultPlaybackRate: function() { return this.techCall_('defaultPlaybackRate'); },
	  // defaultMuted: function() { return this.techCall_('defaultMuted'); }

	  /**
	   * The player's language code
	   * NOTE: The language should be set in the player options if you want the
	   * the controls to be built with a specific language. Changing the lanugage
	   * later will not update controls text.
	   *
	   * @param {string} [code]
	   *        the language code to set the player to
	   *
	   * @return {string|Player}
	   *         - The current language code when getting
	   *         - A reference to the player when setting
	   */


	  Player.prototype.language = function language(code) {
	    if (code === undefined) {
	      return this.language_;
	    }

	    this.language_ = String(code).toLowerCase();
	    return this;
	  };

	  /**
	   * Get the player's language dictionary
	   * Merge every time, because a newly added plugin might call videojs.addLanguage() at any time
	   * Languages specified directly in the player options have precedence
	   *
	   * @return {Array}
	   *         An array of of supported languages
	   */


	  Player.prototype.languages = function languages() {
	    return (0, _mergeOptions2['default'])(Player.prototype.options_.languages, this.languages_);
	  };

	  /**
	   * returns a JavaScript object reperesenting the current track
	   * information. **DOES not return it as JSON**
	   *
	   * @return {Object}
	   *         Object representing the current of track info
	   */


	  Player.prototype.toJSON = function toJSON() {
	    var options = (0, _mergeOptions2['default'])(this.options_);
	    var tracks = options.tracks;

	    options.tracks = [];

	    for (var i = 0; i < tracks.length; i++) {
	      var track = tracks[i];

	      // deep merge tracks and null out player so no circular references
	      track = (0, _mergeOptions2['default'])(track);
	      track.player = undefined;
	      options.tracks[i] = track;
	    }

	    return options;
	  };

	  /**
	   * Creates a simple modal dialog (an instance of the {@link ModalDialog}
	   * component) that immediately overlays the player with arbitrary
	   * content and removes itself when closed.
	   *
	   * @param {string|Function|Element|Array|null} content
	   *        Same as {@link ModalDialog#content}'s param of the same name.
	   *        The most straight-forward usage is to provide a string or DOM
	   *        element.
	   *
	   * @param {Object} [options]
	   *        Extra options which will be passed on to the {@link ModalDialog}.
	   *
	   * @return {ModalDialog}
	   *         the {@link ModalDialog} that was created
	   */


	  Player.prototype.createModal = function createModal(content, options) {
	    var _this5 = this;

	    options = options || {};
	    options.content = content || '';

	    var modal = new _modalDialog2['default'](this, options);

	    this.addChild(modal);
	    modal.on('dispose', function () {
	      _this5.removeChild(modal);
	    });

	    return modal.open();
	  };

	  /**
	   * Gets tag settings
	   *
	   * @param {Element} tag
	   *        The player tag
	   *
	   * @return {Object}
	   *         An object containing all of the settings
	   *         for a player tag
	   */


	  Player.getTagSettings = function getTagSettings(tag) {
	    var baseOptions = {
	      sources: [],
	      tracks: []
	    };

	    var tagOptions = Dom.getElAttributes(tag);
	    var dataSetup = tagOptions['data-setup'];

	    if (Dom.hasElClass(tag, 'vjs-fluid')) {
	      tagOptions.fluid = true;
	    }

	    // Check if data-setup attr exists.
	    if (dataSetup !== null) {
	      // Parse options JSON
	      // If empty string, make it a parsable json object.
	      var _safeParseTuple = (0, _tuple2['default'])(dataSetup || '{}'),
	          err = _safeParseTuple[0],
	          data = _safeParseTuple[1];

	      if (err) {
	        _log2['default'].error(err);
	      }
	      (0, _obj.assign)(tagOptions, data);
	    }

	    (0, _obj.assign)(baseOptions, tagOptions);

	    // Get tag children settings
	    if (tag.hasChildNodes()) {
	      var children = tag.childNodes;

	      for (var i = 0, j = children.length; i < j; i++) {
	        var child = children[i];
	        // Change case needed: http://ejohn.org/blog/nodename-case-sensitivity/
	        var childName = child.nodeName.toLowerCase();

	        if (childName === 'source') {
	          baseOptions.sources.push(Dom.getElAttributes(child));
	        } else if (childName === 'track') {
	          baseOptions.tracks.push(Dom.getElAttributes(child));
	        }
	      }
	    }

	    return baseOptions;
	  };

	  /**
	   * Determine wether or not flexbox is supported
	   *
	   * @return {boolean}
	   *         - true if flexbox is supported
	   *         - false if flexbox is not supported
	   */


	  Player.prototype.flexNotSupported_ = function flexNotSupported_() {
	    var elem = _document2['default'].createElement('i');

	    // Note: We don't actually use flexBasis (or flexOrder), but it's one of the more
	    // common flex features that we can rely on when checking for flex support.
	    return !('flexBasis' in elem.style || 'webkitFlexBasis' in elem.style || 'mozFlexBasis' in elem.style || 'msFlexBasis' in elem.style ||
	    // IE10-specific (2012 flex spec)
	    'msFlexOrder' in elem.style);
	  };

	  return Player;
	}(_component2['default']);

	/**
	 * Global player list
	 *
	 * @type {Object}
	 */


	Player.players = {};

	var navigator = _window2['default'].navigator;

	/*
	 * Player instance options, surfaced using options
	 * options = Player.prototype.options_
	 * Make changes in options, not here.
	 *
	 * @type {Object}
	 * @private
	 */
	Player.prototype.options_ = {
	  // Default order of fallback technology
	  techOrder: ['html5', 'flash'],
	  // techOrder: ['flash','html5'],

	  html5: {},
	  flash: {},

	  // defaultVolume: 0.85,
	  defaultVolume: 0.00,

	  // default inactivity timeout
	  inactivityTimeout: 2000,

	  // default playback rates
	  playbackRates: [],
	  // Add playback rate selection by adding rates
	  // 'playbackRates': [0.5, 1, 1.5, 2],

	  // Included control sets
	  children: ['mediaLoader', 'posterImage', 'textTrackDisplay', 'loadingSpinner', 'bigPlayButton', 'controlBar', 'errorDisplay', 'textTrackSettings'],

	  language: navigator && (navigator.languages && navigator.languages[0] || navigator.userLanguage || navigator.language) || 'en',

	  // locales and their language translations
	  languages: {},

	  // Default message to show when a video cannot be played.
	  notSupportedMessage: 'No compatible source was found for this media.'
	};

	[
	/**
	 * Returns whether or not the player is in the "ended" state.
	 *
	 * @return {Boolean} True if the player is in the ended state, false if not.
	 * @method Player#ended
	 */
	'ended',
	/**
	 * Returns whether or not the player is in the "seeking" state.
	 *
	 * @return {Boolean} True if the player is in the seeking state, false if not.
	 * @method Player#seeking
	 */
	'seeking',
	/**
	 * Returns the TimeRanges of the media that are currently available
	 * for seeking to.
	 *
	 * @return {TimeRanges} the seekable intervals of the media timeline
	 * @method Player#seekable
	 */
	'seekable',
	/**
	 * Returns the current state of network activity for the element, from
	 * the codes in the list below.
	 * - NETWORK_EMPTY (numeric value 0)
	 *   The element has not yet been initialised. All attributes are in
	 *   their initial states.
	 * - NETWORK_IDLE (numeric value 1)
	 *   The element's resource selection algorithm is active and has
	 *   selected a resource, but it is not actually using the network at
	 *   this time.
	 * - NETWORK_LOADING (numeric value 2)
	 *   The user agent is actively trying to download data.
	 * - NETWORK_NO_SOURCE (numeric value 3)
	 *   The element's resource selection algorithm is active, but it has
	 *   not yet found a resource to use.
	 *
	 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states
	 * @return {number} the current network activity state
	 * @method Player#networkState
	 */
	'networkState',
	/**
	 * Returns a value that expresses the current state of the element
	 * with respect to rendering the current playback position, from the
	 * codes in the list below.
	 * - HAVE_NOTHING (numeric value 0)
	 *   No information regarding the media resource is available.
	 * - HAVE_METADATA (numeric value 1)
	 *   Enough of the resource has been obtained that the duration of the
	 *   resource is available.
	 * - HAVE_CURRENT_DATA (numeric value 2)
	 *   Data for the immediate current playback position is available.
	 * - HAVE_FUTURE_DATA (numeric value 3)
	 *   Data for the immediate current playback position is available, as
	 *   well as enough data for the user agent to advance the current
	 *   playback position in the direction of playback.
	 * - HAVE_ENOUGH_DATA (numeric value 4)
	 *   The user agent estimates that enough data is available for
	 *   playback to proceed uninterrupted.
	 *
	 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate
	 * @return {number} the current playback rendering state
	 * @method Player#readyState
	 */
	'readyState'].forEach(function (fn) {
	  Player.prototype[fn] = function () {
	    return this.techGet_(fn);
	  };
	});

	TECH_EVENTS_RETRIGGER.forEach(function (event) {
	  Player.prototype['handleTech' + (0, _toTitleCase2['default'])(event) + '_'] = function () {
	    return this.trigger(event);
	  };
	});

	/**
	 * Fired when the player has initial duration and dimension information
	 *
	 * @event Player#loadedmetadata
	 * @type {EventTarget~Event}
	 */

	/**
	 * Fired when the player has downloaded data at the current playback position
	 *
	 * @event Player#loadeddata
	 * @type {EventTarget~Event}
	 */

	/**
	 * Fired when the current playback position has changed *
	 * During playback this is fired every 15-250 milliseconds, depending on the
	 * playback technology in use.
	 *
	 * @event Player#timeupdate
	 * @type {EventTarget~Event}
	 */

	/**
	 * Fired when the volume changes
	 *
	 * @event Player#volumechange
	 * @type {EventTarget~Event}
	 */

	_component2['default'].registerComponent('Player', Player);
	exports['default'] = Player;


/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.createTimeRange = undefined;
	exports.createTimeRanges = createTimeRanges;

	var _log = __webpack_require__(261);

	var _log2 = _interopRequireDefault(_log);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * Returns the time for the specified index at the start or end
	 * of a TimeRange object.
	 *
	 * @function time-ranges:indexFunction
	 *
	 * @param {number} [index=0]
	 *        The range number to return the time for.
	 *
	 * @return {number}
	 *         The time that offset at the specified index.
	 *
	 * @depricated index must be set to a value, in the future this will throw an error.
	 */

	/**
	 * An object that contains ranges of time for various reasons.
	 *
	 * @typedef {Object} TimeRange
	 *
	 * @property {number} length
	 *           The number of time ranges represented by this Object
	 *
	 * @property {time-ranges:indexFunction} start
	 *           Returns the time offset at which a specified time range begins.
	 *
	 * @property {time-ranges:indexFunction} end
	 *           Returns the time offset at which a specified time range begins.
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges
	 */

	/**
	 * Check if any of the time ranges are over the maximum index.
	 *
	 * @param {string} fnName
	 *        The function name to use for logging
	 *
	 * @param {number} index
	 *        The index to check
	 *
	 * @param {number} maxIndex
	 *        The maximum possible index
	 *
	 * @throws {Error} if the timeRanges provided are over the maxIndex
	 */
	function rangeCheck(fnName, index, maxIndex) {
	  if (index < 0 || index > maxIndex) {
	    throw new Error('Failed to execute \'' + fnName + '\' on \'TimeRanges\': The index provided (' + index + ') is greater than or equal to the maximum bound (' + maxIndex + ').');
	  }
	}

	/**
	 * Check if any of the time ranges are over the maximum index.
	 *
	 * @param {string} fnName
	 *        The function name to use for logging
	 *
	 * @param {string} valueIndex
	 *        The proprety that should be used to get the time. should be 'start' or 'end'
	 *
	 * @param {Array} ranges
	 *        An array of time ranges
	 *
	 * @param {Array} [rangeIndex=0]
	 *        The index to start the search at
	 *
	 * @return {number}
	 *         The time that offset at the specified index.
	 *
	 *
	 * @depricated rangeIndex must be set to a value, in the future this will throw an error.
	 * @throws {Error} if rangeIndex is more than the length of ranges
	 */
	/**
	 * @file time-ranges.js
	 * @module time-ranges
	 */
	function getRange(fnName, valueIndex, ranges, rangeIndex) {
	  if (rangeIndex === undefined) {
	    _log2['default'].warn('DEPRECATED: Function \'' + fnName + '\' on \'TimeRanges\' called without an index argument.');
	    rangeIndex = 0;
	  }
	  rangeCheck(fnName, rangeIndex, ranges.length - 1);
	  return ranges[rangeIndex][valueIndex];
	}

	/**
	 * Create a time range object givent ranges of time.
	 *
	 * @param {Array} [ranges]
	 *        An array of time ranges.
	 */
	function createTimeRangesObj(ranges) {
	  if (ranges === undefined || ranges.length === 0) {
	    return {
	      length: 0,
	      start: function start() {
	        throw new Error('This TimeRanges object is empty');
	      },
	      end: function end() {
	        throw new Error('This TimeRanges object is empty');
	      }
	    };
	  }
	  return {
	    length: ranges.length,
	    start: getRange.bind(null, 'start', 0, ranges),
	    end: getRange.bind(null, 'end', 1, ranges)
	  };
	}

	/**
	 * Should create a fake `TimeRange` object which mimics an HTML5 time range instance.
	 *
	 * @param {number|Array} start
	 *        The start of a single range or an array of ranges
	 *
	 * @param {number} end
	 *        The end of a single range.
	 *
	 * @private
	 */
	function createTimeRanges(start, end) {
	  if (Array.isArray(start)) {
	    return createTimeRangesObj(start);
	  } else if (start === undefined || end === undefined) {
	    return createTimeRangesObj();
	  }
	  return createTimeRangesObj([[start, end]]);
	}

	exports.createTimeRange = createTimeRanges;


/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.bufferedPercent = bufferedPercent;

	var _timeRanges = __webpack_require__(273);

	/**
	 * Compute the percentage of the media that has been buffered.
	 *
	 * @param {TimeRange} buffered
	 *        The current `TimeRange` object representing buffered time ranges
	 *
	 * @param {number} duration
	 *        Total duration of the media
	 *
	 * @return {number}
	 *         Percent buffered of the total duration in decimal form.
	 */
	function bufferedPercent(buffered, duration) {
	  var bufferedDuration = 0;
	  var start = void 0;
	  var end = void 0;

	  if (!duration) {
	    return 0;
	  }

	  if (!buffered || !buffered.length) {
	    buffered = (0, _timeRanges.createTimeRange)(0, 0);
	  }

	  for (var i = 0; i < buffered.length; i++) {
	    start = buffered.start(i);
	    end = buffered.end(i);

	    // buffered end can be bigger than duration by a very small fraction
	    if (end > duration) {
	      end = duration;
	    }

	    bufferedDuration += end - start;
	  }

	  return bufferedDuration / duration;
	} /**
	   * @file buffer.js
	   * @module buffer
	   */


/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _document = __webpack_require__(256);

	var _document2 = _interopRequireDefault(_document);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * Store the browser-specific methods for the fullscreen API.
	 *
	 * @type {Object}
	 * @see [Specification]{@link https://fullscreen.spec.whatwg.org}
	 * @see [Map Approach From Screenfull.js]{@link https://github.com/sindresorhus/screenfull.js}
	 */
	var FullscreenApi = {};

	// browser API methods
	/**
	 * @file fullscreen-api.js
	 * @module fullscreen-api
	 * @private
	 */
	var apiMap = [['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror'],
	// WebKit
	['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror'],
	// Old WebKit (Safari 5.1)
	['webkitRequestFullScreen', 'webkitCancelFullScreen', 'webkitCurrentFullScreenElement', 'webkitCancelFullScreen', 'webkitfullscreenchange', 'webkitfullscreenerror'],
	// Mozilla
	['mozRequestFullScreen', 'mozCancelFullScreen', 'mozFullScreenElement', 'mozFullScreenEnabled', 'mozfullscreenchange', 'mozfullscreenerror'],
	// Microsoft
	['msRequestFullscreen', 'msExitFullscreen', 'msFullscreenElement', 'msFullscreenEnabled', 'MSFullscreenChange', 'MSFullscreenError']];

	var specApi = apiMap[0];
	var browserApi = void 0;

	// determine the supported set of functions
	for (var i = 0; i < apiMap.length; i++) {
	  // check for exitFullscreen function
	  if (apiMap[i][1] in _document2['default']) {
	    browserApi = apiMap[i];
	    break;
	  }
	}

	// map the browser API names to the spec API names
	if (browserApi) {
	  for (var _i = 0; _i < browserApi.length; _i++) {
	    FullscreenApi[specApi[_i]] = browserApi[_i];
	  }
	}

	exports['default'] = FullscreenApi;


/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _obj = __webpack_require__(263);

	/**
	 * A Custom `MediaError` class which mimics the standard HTML5 `MediaError` class.
	 *
	 * @param {number|string|Object|MediaError} value
	 *        This can be of multiple types:
	 *        - number: should be a standard error code
	 *        - string: an error message (the code will be 0)
	 *        - Object: arbitrary properties
	 *        - `MediaError` (native): used to populate a video.js `MediaError` object
	 *        - `MediaError` (video.js): will return itself if it's already a
	 *          video.js `MediaError` object.
	 *
	 * @see [MediaError Spec]{@link https://dev.w3.org/html5/spec-author-view/video.html#mediaerror}
	 * @see [Encrypted MediaError Spec]{@link https://www.w3.org/TR/2013/WD-encrypted-media-20130510/#error-codes}
	 *
	 * @class MediaError
	 */
	function MediaError(value) {

	  // Allow redundant calls to this constructor to avoid having `instanceof`
	  // checks peppered around the code.
	  if (value instanceof MediaError) {
	    return value;
	  }

	  if (typeof value === 'number') {
	    this.code = value;
	  } else if (typeof value === 'string') {
	    // default code is zero, so this is a custom error
	    this.message = value;
	  } else if ((0, _obj.isObject)(value)) {

	    // We assign the `code` property manually because native `MediaError` objects
	    // do not expose it as an own/enumerable property of the object.
	    if (typeof value.code === 'number') {
	      this.code = value.code;
	    }

	    (0, _obj.assign)(this, value);
	  }

	  if (!this.message) {
	    this.message = MediaError.defaultMessages[this.code] || '';
	  }
	}

	/**
	 * The error code that refers two one of the defined `MediaError` types
	 *
	 * @type {Number}
	 */
	/**
	 * @file media-error.js
	 */
	MediaError.prototype.code = 0;

	/**
	 * An optional message that to show with the error. Message is not part of the HTML5
	 * video spec but allows for more informative custom errors.
	 *
	 * @type {String}
	 */
	MediaError.prototype.message = '';

	/**
	 * An optional status code that can be set by plugins to allow even more detail about
	 * the error. For example a plugin might provide a specific HTTP status code and an
	 * error message for that code. Then when the plugin gets that error this class will
	 * know how to display an error message for it. This allows a custom message to show
	 * up on the `Player` error overlay.
	 *
	 * @type {Array}
	 */
	MediaError.prototype.status = null;

	/**
	 * Errors indexed by the W3C standard. The order **CANNOT CHANGE**! See the
	 * specification listed under {@link MediaError} for more information.
	 *
	 * @enum {array}
	 * @readonly
	 * @property {string} 0 - MEDIA_ERR_CUSTOM
	 * @property {string} 1 - MEDIA_ERR_CUSTOM
	 * @property {string} 2 - MEDIA_ERR_ABORTED
	 * @property {string} 3 - MEDIA_ERR_NETWORK
	 * @property {string} 4 - MEDIA_ERR_SRC_NOT_SUPPORTED
	 * @property {string} 5 - MEDIA_ERR_ENCRYPTED
	 */
	MediaError.errorTypes = ['MEDIA_ERR_CUSTOM', 'MEDIA_ERR_ABORTED', 'MEDIA_ERR_NETWORK', 'MEDIA_ERR_DECODE', 'MEDIA_ERR_SRC_NOT_SUPPORTED', 'MEDIA_ERR_ENCRYPTED'];

	/**
	 * The default `MediaError` messages based on the {@link MediaError.errorTypes}.
	 *
	 * @type {Array}
	 * @constant
	 */
	MediaError.defaultMessages = {
	  1: 'You aborted the media playback',
	  2: 'A network error caused the media download to fail part-way.',
	  3: 'The media playback was aborted due to a corruption problem or because the media used features your browser did not support.',
	  4: 'The media could not be loaded, either because the server or network failed or because the format is not supported.',
	  5: 'The media is encrypted and we do not have the keys to decrypt it.'
	};

	// Add types as properties on MediaError
	// e.g. MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED = 4;
	for (var errNum = 0; errNum < MediaError.errorTypes.length; errNum++) {
	  MediaError[MediaError.errorTypes[errNum]] = errNum;
	  // values should be accessible on both the class and instance
	  MediaError.prototype[MediaError.errorTypes[errNum]] = errNum;
	}

	// jsdocs for instance/static members added above
	// instance methods use `#` and static methods use `.`
	/**
	 * W3C error code for any custom error.
	 *
	 * @member MediaError#MEDIA_ERR_CUSTOM
	 * @constant {number}
	 * @default 0
	 */
	/**
	 * W3C error code for any custom error.
	 *
	 * @member MediaError.MEDIA_ERR_CUSTOM
	 * @constant {number}
	 * @default 0
	 */

	/**
	 * W3C error code for media error aborted.
	 *
	 * @member MediaError#MEDIA_ERR_ABORTED
	 * @constant {number}
	 * @default 1
	 */
	/**
	 * W3C error code for media error aborted.
	 *
	 * @member MediaError.MEDIA_ERR_ABORTED
	 * @constant {number}
	 * @default 1
	 */

	/**
	 * W3C error code for any network error.
	 *
	 * @member MediaError#MEDIA_ERR_NETWORK
	 * @constant {number}
	 * @default 2
	 */
	/**
	 * W3C error code for any network error.
	 *
	 * @member MediaError.MEDIA_ERR_NETWORK
	 * @constant {number}
	 * @default 2
	 */

	/**
	 * W3C error code for any decoding error.
	 *
	 * @member MediaError#MEDIA_ERR_DECODE
	 * @constant {number}
	 * @default 3
	 */
	/**
	 * W3C error code for any decoding error.
	 *
	 * @member MediaError.MEDIA_ERR_DECODE
	 * @constant {number}
	 * @default 3
	 */

	/**
	 * W3C error code for any time that a source is not supported.
	 *
	 * @member MediaError#MEDIA_ERR_SRC_NOT_SUPPORTED
	 * @constant {number}
	 * @default 4
	 */
	/**
	 * W3C error code for any time that a source is not supported.
	 *
	 * @member MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED
	 * @constant {number}
	 * @default 4
	 */

	/**
	 * W3C error code for any time that a source is encrypted.
	 *
	 * @member MediaError#MEDIA_ERR_ENCRYPTED
	 * @constant {number}
	 * @default 5
	 */
	/**
	 * W3C error code for any time that a source is encrypted.
	 *
	 * @member MediaError.MEDIA_ERR_ENCRYPTED
	 * @constant {number}
	 * @default 5
	 */

	exports['default'] = MediaError;


/***/ },
/* 277 */
/***/ function(module, exports) {

	module.exports = SafeParseTuple

	function SafeParseTuple(obj, reviver) {
	    var json
	    var error = null

	    try {
	        json = JSON.parse(obj, reviver)
	    } catch (err) {
	        error = err
	    }

	    return [error, json]
	}


/***/ },
/* 278 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	/**
	 * @file text-track-list-converter.js Utilities for capturing text track state and
	 * re-creating tracks based on a capture.
	 *
	 * @module text-track-list-converter
	 */

	/**
	 * Examine a single {@link TextTrack} and return a JSON-compatible javascript object that
	 * represents the {@link TextTrack}'s state.
	 *
	 * @param {TextTrack} track
	 *        The text track to query.
	 *
	 * @return {Object}
	 *         A serializable javascript representation of the TextTrack.
	 * @private
	 */
	var trackToJson_ = function trackToJson_(track) {
	  var ret = ['kind', 'label', 'language', 'id', 'inBandMetadataTrackDispatchType', 'mode', 'src'].reduce(function (acc, prop, i) {

	    if (track[prop]) {
	      acc[prop] = track[prop];
	    }

	    return acc;
	  }, {
	    cues: track.cues && Array.prototype.map.call(track.cues, function (cue) {
	      return {
	        startTime: cue.startTime,
	        endTime: cue.endTime,
	        text: cue.text,
	        id: cue.id
	      };
	    })
	  });

	  return ret;
	};

	/**
	 * Examine a {@link Tech} and return a JSON-compatible javascript array that represents the
	 * state of all {@link TextTrack}s currently configured. The return array is compatible with
	 * {@link text-track-list-converter:jsonToTextTracks}.
	 *
	 * @param {Tech} tech
	 *        The tech object to query
	 *
	 * @return {Array}
	 *         A serializable javascript representation of the {@link Tech}s
	 *         {@link TextTrackList}.
	 */
	var textTracksToJson = function textTracksToJson(tech) {

	  var trackEls = tech.$$('track');

	  var trackObjs = Array.prototype.map.call(trackEls, function (t) {
	    return t.track;
	  });
	  var tracks = Array.prototype.map.call(trackEls, function (trackEl) {
	    var json = trackToJson_(trackEl.track);

	    if (trackEl.src) {
	      json.src = trackEl.src;
	    }
	    return json;
	  });

	  return tracks.concat(Array.prototype.filter.call(tech.textTracks(), function (track) {
	    return trackObjs.indexOf(track) === -1;
	  }).map(trackToJson_));
	};

	/**
	 * Create a set of remote {@link TextTrack}s on a {@link Tech} based on an array of javascript
	 * object {@link TextTrack} representations.
	 *
	 * @param {Array} json
	 *        An array of `TextTrack` representation objects, like those that would be
	 *        produced by `textTracksToJson`.
	 *
	 * @param {Tech} tech
	 *        The `Tech` to create the `TextTrack`s on.
	 */
	var jsonToTextTracks = function jsonToTextTracks(json, tech) {
	  json.forEach(function (track) {
	    var addedTrack = tech.addRemoteTextTrack(track).track;

	    if (!track.src && track.cues) {
	      track.cues.forEach(function (cue) {
	        return addedTrack.addCue(cue);
	      });
	    }
	  });

	  return tech.textTracks();
	};

	exports['default'] = { textTracksToJson: textTracksToJson, jsonToTextTracks: jsonToTextTracks, trackToJson_: trackToJson_ };


/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _dom = __webpack_require__(259);

	var Dom = _interopRequireWildcard(_dom);

	var _fn = __webpack_require__(268);

	var Fn = _interopRequireWildcard(_fn);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file modal-dialog.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	var MODAL_CLASS_NAME = 'vjs-modal-dialog';
	var ESC = 27;

	/**
	 * The `ModalDialog` displays over the video and its controls, which blocks
	 * interaction with the player until it is closed.
	 *
	 * Modal dialogs include a "Close" button and will close when that button
	 * is activated - or when ESC is pressed anywhere.
	 *
	 * @extends Component
	 */

	var ModalDialog = function (_Component) {
	  _inherits(ModalDialog, _Component);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   *
	   * @param {Mixed} [options.content=undefined]
	   *        Provide customized content for this modal.
	   *
	   * @param {string} [options.description]
	   *        A text description for the modal, primarily for accessibility.
	   *
	   * @param {boolean} [options.fillAlways=false]
	   *        Normally, modals are automatically filled only the first time
	   *        they open. This tells the modal to refresh its content
	   *        every time it opens.
	   *
	   * @param {string} [options.label]
	   *        A text label for the modal, primarily for accessibility.
	   *
	   * @param {boolean} [options.temporary=true]
	   *        If `true`, the modal can only be opened once; it will be
	   *        disposed as soon as it's closed.
	   *
	   * @param {boolean} [options.uncloseable=false]
	   *        If `true`, the user will not be able to close the modal
	   *        through the UI in the normal ways. Programmatic closing is
	   *        still possible.
	   */
	  function ModalDialog(player, options) {
	    _classCallCheck(this, ModalDialog);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.opened_ = _this.hasBeenOpened_ = _this.hasBeenFilled_ = false;

	    _this.closeable(!_this.options_.uncloseable);
	    _this.content(_this.options_.content);

	    // Make sure the contentEl is defined AFTER any children are initialized
	    // because we only want the contents of the modal in the contentEl
	    // (not the UI elements like the close button).
	    _this.contentEl_ = Dom.createEl('div', {
	      className: MODAL_CLASS_NAME + '-content'
	    }, {
	      role: 'document'
	    });

	    _this.descEl_ = Dom.createEl('p', {
	      className: MODAL_CLASS_NAME + '-description vjs-offscreen',
	      id: _this.el().getAttribute('aria-describedby')
	    });

	    Dom.textContent(_this.descEl_, _this.description());
	    _this.el_.appendChild(_this.descEl_);
	    _this.el_.appendChild(_this.contentEl_);
	    return _this;
	  }

	  /**
	   * Create the `ModalDialog`'s DOM element
	   *
	   * @return {Element}
	   *         The DOM element that gets created.
	   */


	  ModalDialog.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: this.buildCSSClass(),
	      tabIndex: -1
	    }, {
	      'aria-describedby': this.id() + '_description',
	      'aria-hidden': 'true',
	      'aria-label': this.label(),
	      'role': 'dialog'
	    });
	  };

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  ModalDialog.prototype.buildCSSClass = function buildCSSClass() {
	    return MODAL_CLASS_NAME + ' vjs-hidden ' + _Component.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Handles `keydown` events on the document, looking for ESC, which closes
	   * the modal.
	   *
	   * @param {EventTarget~Event} e
	   *        The keypress that triggered this event.
	   *
	   * @listens keydown
	   */


	  ModalDialog.prototype.handleKeyPress = function handleKeyPress(e) {
	    if (e.which === ESC && this.closeable()) {
	      this.close();
	    }
	  };

	  /**
	   * Returns the label string for this modal. Primarily used for accessibility.
	   *
	   * @return {string}
	   *         the localized or raw label of this modal.
	   */


	  ModalDialog.prototype.label = function label() {
	    return this.options_.label || this.localize('Modal Window');
	  };

	  /**
	   * Returns the description string for this modal. Primarily used for
	   * accessibility.
	   *
	   * @return {string}
	   *         The localized or raw description of this modal.
	   */


	  ModalDialog.prototype.description = function description() {
	    var desc = this.options_.description || this.localize('This is a modal window.');

	    // Append a universal closeability message if the modal is closeable.
	    if (this.closeable()) {
	      desc += ' ' + this.localize('This modal can be closed by pressing the Escape key or activating the close button.');
	    }

	    return desc;
	  };

	  /**
	   * Opens the modal.
	   *
	   * @fires ModalDialog#beforemodalopen
	   * @fires ModalDialog#modalopen
	   *
	   * @return {ModalDialog}
	   *         Returns itself; method can be chained.
	   */


	  ModalDialog.prototype.open = function open() {
	    if (!this.opened_) {
	      var player = this.player();

	      /**
	       * Fired just before a `ModalDialog` is opened.
	       *
	       * @event ModalDialog#beforemodalopen
	       * @type {EventTarget~Event}
	       */
	      this.trigger('beforemodalopen');
	      this.opened_ = true;

	      // Fill content if the modal has never opened before and
	      // never been filled.
	      if (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) {
	        this.fill();
	      }

	      // If the player was playing, pause it and take note of its previously
	      // playing state.
	      this.wasPlaying_ = !player.paused();

	      if (this.wasPlaying_) {
	        player.pause();
	      }

	      if (this.closeable()) {
	        this.on(this.el_.ownerDocument, 'keydown', Fn.bind(this, this.handleKeyPress));
	      }

	      player.controls(false);
	      this.show();
	      this.el().setAttribute('aria-hidden', 'false');

	      /**
	       * Fired just after a `ModalDialog` is opened.
	       *
	       * @event ModalDialog#modalopen
	       * @type {EventTarget~Event}
	       */
	      this.trigger('modalopen');
	      this.hasBeenOpened_ = true;
	    }
	    return this;
	  };

	  /**
	   * If the `ModalDialog` is currently open or closed.
	   *
	   * @param  {boolean} [value]
	   *         If given, it will open (`true`) or close (`false`) the modal.
	   *
	   * @return {boolean}
	   *         the current open state of the modaldialog
	   */


	  ModalDialog.prototype.opened = function opened(value) {
	    if (typeof value === 'boolean') {
	      this[value ? 'open' : 'close']();
	    }
	    return this.opened_;
	  };

	  /**
	   * Closes the modal, does nothing if the `ModalDialog` is
	   * not open.
	   *
	   * @fires ModalDialog#beforemodalclose
	   * @fires ModalDialog#modalclose
	   *
	   * @return {ModalDialog}
	   *         Returns itself; method can be chained.
	   */


	  ModalDialog.prototype.close = function close() {
	    if (this.opened_) {
	      var player = this.player();

	      /**
	       * Fired just before a `ModalDialog` is closed.
	       *
	       * @event ModalDialog#beforemodalclose
	       * @type {EventTarget~Event}
	       */
	      this.trigger('beforemodalclose');
	      this.opened_ = false;

	      if (this.wasPlaying_) {
	        player.play();
	      }

	      if (this.closeable()) {
	        this.off(this.el_.ownerDocument, 'keydown', Fn.bind(this, this.handleKeyPress));
	      }

	      player.controls(true);
	      this.hide();
	      this.el().setAttribute('aria-hidden', 'true');

	      /**
	       * Fired just after a `ModalDialog` is closed.
	       *
	       * @event ModalDialog#modalclose
	       * @type {EventTarget~Event}
	       */
	      this.trigger('modalclose');

	      if (this.options_.temporary) {
	        this.dispose();
	      }
	    }
	    return this;
	  };

	  /**
	   * Check to see if the `ModalDialog` is closeable via the UI.
	   *
	   * @param  {boolean} [value]
	   *         If given as a boolean, it will set the `closeable` option.
	   *
	   * @return {boolean}
	   *         Returns the final value of the closable option.
	   */


	  ModalDialog.prototype.closeable = function closeable(value) {
	    if (typeof value === 'boolean') {
	      var closeable = this.closeable_ = !!value;
	      var close = this.getChild('closeButton');

	      // If this is being made closeable and has no close button, add one.
	      if (closeable && !close) {

	        // The close button should be a child of the modal - not its
	        // content element, so temporarily change the content element.
	        var temp = this.contentEl_;

	        this.contentEl_ = this.el_;
	        close = this.addChild('closeButton', { controlText: 'Close Modal Dialog' });
	        this.contentEl_ = temp;
	        this.on(close, 'close', this.close);
	      }

	      // If this is being made uncloseable and has a close button, remove it.
	      if (!closeable && close) {
	        this.off(close, 'close', this.close);
	        this.removeChild(close);
	        close.dispose();
	      }
	    }
	    return this.closeable_;
	  };

	  /**
	   * Fill the modal's content element with the modal's "content" option.
	   * The content element will be emptied before this change takes place.
	   *
	   * @return {ModalDialog}
	   *         Returns itself; method can be chained.
	   */


	  ModalDialog.prototype.fill = function fill() {
	    return this.fillWith(this.content());
	  };

	  /**
	   * Fill the modal's content element with arbitrary content.
	   * The content element will be emptied before this change takes place.
	   *
	   * @fires ModalDialog#beforemodalfill
	   * @fires ModalDialog#modalfill
	   *
	   * @param  {Mixed} [content]
	   *         The same rules apply to this as apply to the `content` option.
	   *
	   * @return {ModalDialog}
	   *         Returns itself; method can be chained.
	   */


	  ModalDialog.prototype.fillWith = function fillWith(content) {
	    var contentEl = this.contentEl();
	    var parentEl = contentEl.parentNode;
	    var nextSiblingEl = contentEl.nextSibling;

	    /**
	     * Fired just before a `ModalDialog` is filled with content.
	     *
	     * @event ModalDialog#beforemodalfill
	     * @type {EventTarget~Event}
	     */
	    this.trigger('beforemodalfill');
	    this.hasBeenFilled_ = true;

	    // Detach the content element from the DOM before performing
	    // manipulation to avoid modifying the live DOM multiple times.
	    parentEl.removeChild(contentEl);
	    this.empty();
	    Dom.insertContent(contentEl, content);
	    /**
	     * Fired just after a `ModalDialog` is filled with content.
	     *
	     * @event ModalDialog#modalfill
	     * @type {EventTarget~Event}
	     */
	    this.trigger('modalfill');

	    // Re-inject the re-filled content element.
	    if (nextSiblingEl) {
	      parentEl.insertBefore(contentEl, nextSiblingEl);
	    } else {
	      parentEl.appendChild(contentEl);
	    }

	    return this;
	  };

	  /**
	   * Empties the content element. This happens anytime the modal is filled.
	   *
	   * @fires ModalDialog#beforemodalempty
	   * @fires ModalDialog#modalempty
	   *
	   * @return {ModalDialog}
	   *         Returns itself; method can be chained.
	   */


	  ModalDialog.prototype.empty = function empty() {
	    /**
	     * Fired just before a `ModalDialog` is emptied.
	     *
	     * @event ModalDialog#beforemodalempty
	     * @type {EventTarget~Event}
	     */
	    this.trigger('beforemodalempty');
	    Dom.emptyEl(this.contentEl());

	    /**
	     * Fired just after a `ModalDialog` is emptied.
	     *
	     * @event ModalDialog#modalempty
	     * @type {EventTarget~Event}
	     */
	    this.trigger('modalempty');
	    return this;
	  };

	  /**
	   * Gets or sets the modal content, which gets normalized before being
	   * rendered into the DOM.
	   *
	   * This does not update the DOM or fill the modal, but it is called during
	   * that process.
	   *
	   * @param  {Mixed} [value]
	   *         If defined, sets the internal content value to be used on the
	   *         next call(s) to `fill`. This value is normalized before being
	   *         inserted. To "clear" the internal content value, pass `null`.
	   *
	   * @return {Mixed}
	   *         The current content of the modal dialog
	   */


	  ModalDialog.prototype.content = function content(value) {
	    if (typeof value !== 'undefined') {
	      this.content_ = value;
	    }
	    return this.content_;
	  };

	  return ModalDialog;
	}(_component2['default']);

	/**
	 * Default options for `ModalDialog` default options.
	 *
	 * @type {Object}
	 * @private
	 */


	ModalDialog.prototype.options_ = {
	  temporary: true
	};

	_component2['default'].registerComponent('ModalDialog', ModalDialog);
	exports['default'] = ModalDialog;


/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _htmlTrackElement = __webpack_require__(281);

	var _htmlTrackElement2 = _interopRequireDefault(_htmlTrackElement);

	var _htmlTrackElementList = __webpack_require__(293);

	var _htmlTrackElementList2 = _interopRequireDefault(_htmlTrackElementList);

	var _mergeOptions = __webpack_require__(270);

	var _mergeOptions2 = _interopRequireDefault(_mergeOptions);

	var _textTrack = __webpack_require__(282);

	var _textTrack2 = _interopRequireDefault(_textTrack);

	var _textTrackList = __webpack_require__(294);

	var _textTrackList2 = _interopRequireDefault(_textTrackList);

	var _videoTrackList = __webpack_require__(296);

	var _videoTrackList2 = _interopRequireDefault(_videoTrackList);

	var _audioTrackList = __webpack_require__(297);

	var _audioTrackList2 = _interopRequireDefault(_audioTrackList);

	var _fn = __webpack_require__(268);

	var Fn = _interopRequireWildcard(_fn);

	var _log = __webpack_require__(261);

	var _log2 = _interopRequireDefault(_log);

	var _timeRanges = __webpack_require__(273);

	var _buffer = __webpack_require__(274);

	var _mediaError = __webpack_require__(276);

	var _mediaError2 = _interopRequireDefault(_mediaError);

	var _window = __webpack_require__(255);

	var _window2 = _interopRequireDefault(_window);

	var _document = __webpack_require__(256);

	var _document2 = _interopRequireDefault(_document);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file tech.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	/**
	 * An Object containing a structure like: `{src: 'url', type: 'mimetype'}` or string
	 * that just contains the src url alone.
	 * * `var SourceObject = {src: 'http://ex.com/video.mp4', type: 'video/mp4'};`
	   * `var SourceString = 'http://example.com/some-video.mp4';`
	 *
	 * @typedef {Object|string} Tech~SourceObject
	 *
	 * @property {string} src
	 *           The url to the source
	 *
	 * @property {string} type
	 *           The mime type of the source
	 */

	/**
	 * A function used by {@link Tech} to create a new {@link TextTrack}.
	 *
	 * @param {Tech} self
	 *        An instance of the Tech class.
	 *
	 * @param {string} kind
	 *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
	 *
	 * @param {string} [label]
	 *        Label to identify the text track
	 *
	 * @param {string} [language]
	 *        Two letter language abbreviation
	 *
	 * @param {Object} [options={}]
	 *        An object with additional text track options
	 *
	 * @return {TextTrack}
	 *          The text track that was created.
	 */
	function createTrackHelper(self, kind, label, language) {
	  var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

	  var tracks = self.textTracks();

	  options.kind = kind;

	  if (label) {
	    options.label = label;
	  }
	  if (language) {
	    options.language = language;
	  }
	  options.tech = self;

	  var track = new _textTrack2['default'](options);

	  tracks.addTrack_(track);

	  return track;
	}

	/**
	 * This is the base class for media playback technology controllers, such as
	 * {@link Flash} and {@link HTML5}
	 *
	 * @extends Component
	 */

	var Tech = function (_Component) {
	  _inherits(Tech, _Component);

	  /**
	   * Create an instance of this Tech.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   *
	   * @param {Component~ReadyCallback} ready
	   *        Callback function to call when the `HTML5` Tech is ready.
	   */
	  function Tech() {
	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var ready = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};

	    _classCallCheck(this, Tech);

	    // we don't want the tech to report user activity automatically.
	    // This is done manually in addControlsListeners
	    options.reportTouchActivity = false;

	    // keep track of whether the current source has played at all to
	    // implement a very limited played()
	    var _this = _possibleConstructorReturn(this, _Component.call(this, null, options, ready));

	    _this.hasStarted_ = false;
	    _this.on('playing', function () {
	      this.hasStarted_ = true;
	    });
	    _this.on('loadstart', function () {
	      this.hasStarted_ = false;
	    });

	    _this.textTracks_ = options.textTracks;
	    _this.videoTracks_ = options.videoTracks;
	    _this.audioTracks_ = options.audioTracks;

	    // Manually track progress in cases where the browser/flash player doesn't report it.
	    if (!_this.featuresProgressEvents) {
	      _this.manualProgressOn();
	    }

	    // Manually track timeupdates in cases where the browser/flash player doesn't report it.
	    if (!_this.featuresTimeupdateEvents) {
	      _this.manualTimeUpdatesOn();
	    }

	    ['Text', 'Audio', 'Video'].forEach(function (track) {
	      if (options['native' + track + 'Tracks'] === false) {
	        _this['featuresNative' + track + 'Tracks'] = false;
	      }
	    });

	    if (options.nativeCaptions === false) {
	      _this.featuresNativeTextTracks = false;
	    }

	    if (!_this.featuresNativeTextTracks) {
	      _this.emulateTextTracks();
	    }

	    _this.autoRemoteTextTracks_ = new _textTrackList2['default']();

	    _this.initTextTrackListeners();
	    _this.initTrackListeners();

	    // Turn on component tap events only if not using native controls
	    if (!options.nativeControlsForTouch) {
	      _this.emitTapEvents();
	    }
	    return _this;
	  }

	  /* Fallbacks for unsupported event types
	  ================================================================================ */

	  /**
	   * Polyfill the `progress` event for browsers that don't support it natively.
	   *
	   * @see {@link Tech#trackProgress}
	   */


	  Tech.prototype.manualProgressOn = function manualProgressOn() {
	    this.on('durationchange', this.onDurationChange);

	    this.manualProgress = true;

	    // Trigger progress watching when a source begins loading
	    this.one('ready', this.trackProgress);
	  };

	  /**
	   * Turn off the polyfill for `progress` events that was created in
	   * {@link Tech#manualProgressOn}
	   */


	  Tech.prototype.manualProgressOff = function manualProgressOff() {
	    this.manualProgress = false;
	    this.stopTrackingProgress();

	    this.off('durationchange', this.onDurationChange);
	  };

	  /**
	   * This is used to trigger a `progress` event when the buffered percent changes. It
	   * sets an interval function that will be called every 500 milliseconds to check if the
	   * buffer end percent has changed.
	   *
	   * > This function is called by {@link Tech#manualProgressOn}
	   *
	   * @param {EventTarget~Event} event
	   *        The `ready` event that caused this to run.
	   *
	   * @listens Tech#ready
	   * @fires Tech#progress
	   */


	  Tech.prototype.trackProgress = function trackProgress(event) {
	    this.stopTrackingProgress();
	    this.progressInterval = this.setInterval(Fn.bind(this, function () {
	      // Don't trigger unless buffered amount is greater than last time

	      var numBufferedPercent = this.bufferedPercent();

	      if (this.bufferedPercent_ !== numBufferedPercent) {
	        /**
	         * See {@link Player#progress}
	         *
	         * @event Tech#progress
	         * @type {EventTarget~Event}
	         */
	        this.trigger('progress');
	      }

	      this.bufferedPercent_ = numBufferedPercent;

	      if (numBufferedPercent === 1) {
	        this.stopTrackingProgress();
	      }
	    }), 500);
	  };

	  /**
	   * Update our internal duration on a `durationchange` event by calling
	   * {@link Tech#duration}.
	   *
	   * @param {EventTarget~Event} event
	   *        The `durationchange` event that caused this to run.
	   *
	   * @listens Tech#durationchange
	   */


	  Tech.prototype.onDurationChange = function onDurationChange(event) {
	    this.duration_ = this.duration();
	  };

	  /**
	   * Get and create a `TimeRange` object for buffering.
	   *
	   * @return {TimeRange}
	   *         The time range object that was created.
	   */


	  Tech.prototype.buffered = function buffered() {
	    return (0, _timeRanges.createTimeRange)(0, 0);
	  };

	  /**
	   * Get the percentage of the current video that is currently buffered.
	   *
	   * @return {number}
	   *         A number from 0 to 1 that represents the decimal percentage of the
	   *         video that is buffered.
	   *
	   */


	  Tech.prototype.bufferedPercent = function bufferedPercent() {
	    return (0, _buffer.bufferedPercent)(this.buffered(), this.duration_);
	  };

	  /**
	   * Turn off the polyfill for `progress` events that was created in
	   * {@link Tech#manualProgressOn}
	   * Stop manually tracking progress events by clearing the interval that was set in
	   * {@link Tech#trackProgress}.
	   */


	  Tech.prototype.stopTrackingProgress = function stopTrackingProgress() {
	    this.clearInterval(this.progressInterval);
	  };

	  /**
	   * Polyfill the `timeupdate` event for browsers that don't support it.
	   *
	   * @see {@link Tech#trackCurrentTime}
	   */


	  Tech.prototype.manualTimeUpdatesOn = function manualTimeUpdatesOn() {
	    this.manualTimeUpdates = true;

	    this.on('play', this.trackCurrentTime);
	    this.on('pause', this.stopTrackingCurrentTime);
	  };

	  /**
	   * Turn off the polyfill for `timeupdate` events that was created in
	   * {@link Tech#manualTimeUpdatesOn}
	   */


	  Tech.prototype.manualTimeUpdatesOff = function manualTimeUpdatesOff() {
	    this.manualTimeUpdates = false;
	    this.stopTrackingCurrentTime();
	    this.off('play', this.trackCurrentTime);
	    this.off('pause', this.stopTrackingCurrentTime);
	  };

	  /**
	   * Sets up an interval function to track current time and trigger `timeupdate` every
	   * 250 milliseconds.
	   *
	   * @listens Tech#play
	   * @triggers Tech#timeupdate
	   */


	  Tech.prototype.trackCurrentTime = function trackCurrentTime() {
	    if (this.currentTimeInterval) {
	      this.stopTrackingCurrentTime();
	    }
	    this.currentTimeInterval = this.setInterval(function () {
	      /**
	       * Triggered at an interval of 250ms to indicated that time is passing in the video.
	       *
	       * @event Tech#timeupdate
	       * @type {EventTarget~Event}
	       */
	      this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });

	      // 42 = 24 fps // 250 is what Webkit uses // FF uses 15
	    }, 250);
	  };

	  /**
	   * Stop the interval function created in {@link Tech#trackCurrentTime} so that the
	   * `timeupdate` event is no longer triggered.
	   *
	   * @listens {Tech#pause}
	   */


	  Tech.prototype.stopTrackingCurrentTime = function stopTrackingCurrentTime() {
	    this.clearInterval(this.currentTimeInterval);

	    // #1002 - if the video ends right before the next timeupdate would happen,
	    // the progress bar won't make it all the way to the end
	    this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
	  };

	  /**
	   * Turn off all event polyfills, clear the `Tech`s {@link AudioTrackList},
	   * {@link VideoTrackList}, and {@link TextTrackList}, and dispose of this Tech.
	   *
	   * @fires Component#dispose
	   */


	  Tech.prototype.dispose = function dispose() {

	    // clear out all tracks because we can't reuse them between techs
	    this.clearTracks(['audio', 'video', 'text']);

	    // Turn off any manual progress or timeupdate tracking
	    if (this.manualProgress) {
	      this.manualProgressOff();
	    }

	    if (this.manualTimeUpdates) {
	      this.manualTimeUpdatesOff();
	    }

	    _Component.prototype.dispose.call(this);
	  };

	  /**
	   * Clear out a single `TrackList` or an array of `TrackLists` given their names.
	   *
	   * > Note: Techs without source handlers should call this between sources for `video`
	   *         & `audio` tracks. You don't want to use them between tracks!
	   *
	   * @param {string[]|string} types
	   *        TrackList names to clear, valid names are `video`, `audio`, and
	   *        `text`.
	   */


	  Tech.prototype.clearTracks = function clearTracks(types) {
	    var _this2 = this;

	    types = [].concat(types);
	    // clear out all tracks because we can't reuse them between techs
	    types.forEach(function (type) {
	      var list = _this2[type + 'Tracks']() || [];
	      var i = list.length;

	      while (i--) {
	        var track = list[i];

	        if (type === 'text') {
	          _this2.removeRemoteTextTrack(track);
	        }
	        list.removeTrack_(track);
	      }
	    });
	  };

	  /**
	   * Remove any TextTracks added via addRemoteTextTrack that are
	   * flagged for automatic garbage collection
	   */


	  Tech.prototype.cleanupAutoTextTracks = function cleanupAutoTextTracks() {
	    var list = this.autoRemoteTextTracks_ || [];
	    var i = list.length;

	    while (i--) {
	      var track = list[i];

	      this.removeRemoteTextTrack(track);
	    }
	  };

	  /**
	   * Reset the tech, which will removes all sources and reset the internal readyState.
	   *
	   * @abstract
	   */


	  Tech.prototype.reset = function reset() {};

	  /**
	   * Get or set an error on the Tech.
	   *
	   * @param {MediaError} [err]
	   *        Error to set on the Tech
	   *
	   * @return {MediaError|null}
	   *         The current error object on the tech, or null if there isn't one.
	   */


	  Tech.prototype.error = function error(err) {
	    if (err !== undefined) {
	      this.error_ = new _mediaError2['default'](err);
	      this.trigger('error');
	    }
	    return this.error_;
	  };

	  /**
	   * Returns the `TimeRange`s that have been played through for the current source.
	   *
	   * > NOTE: This implementation is incomplete. It does not track the played `TimeRange`.
	   *         It only checks wether the source has played at all or not.
	   *
	   * @return {TimeRange}
	   *         - A single time range if this video has played
	   *         - An empty set of ranges if not.
	   */


	  Tech.prototype.played = function played() {
	    if (this.hasStarted_) {
	      return (0, _timeRanges.createTimeRange)(0, 0);
	    }
	    return (0, _timeRanges.createTimeRange)();
	  };

	  /**
	   * Causes a manual time update to occur if {@link Tech#manualTimeUpdatesOn} was
	   * previously called.
	   *
	   * @fires Tech#timeupdate
	   */


	  Tech.prototype.setCurrentTime = function setCurrentTime() {
	    // improve the accuracy of manual timeupdates
	    if (this.manualTimeUpdates) {
	      /**
	       * A manual `timeupdate` event.
	       *
	       * @event Tech#timeupdate
	       * @type {EventTarget~Event}
	       */
	      this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
	    }
	  };

	  /**
	   * Turn on listeners for {@link TextTrackList} events. This adds
	   * {@link EventTarget~EventListeners} for `texttrackchange`, `addtrack` and
	   * `removetrack`.
	   *
	   * @fires Tech#texttrackchange
	   */


	  Tech.prototype.initTextTrackListeners = function initTextTrackListeners() {
	    var textTrackListChanges = Fn.bind(this, function () {
	      /**
	       * Triggered when tracks are added or removed on the Tech {@link TextTrackList}
	       *
	       * @event Tech#texttrackchange
	       * @type {EventTarget~Event}
	       */
	      this.trigger('texttrackchange');
	    });

	    var tracks = this.textTracks();

	    if (!tracks) {
	      return;
	    }

	    tracks.addEventListener('removetrack', textTrackListChanges);
	    tracks.addEventListener('addtrack', textTrackListChanges);

	    this.on('dispose', Fn.bind(this, function () {
	      tracks.removeEventListener('removetrack', textTrackListChanges);
	      tracks.removeEventListener('addtrack', textTrackListChanges);
	    }));
	  };

	  /**
	   * Turn on listeners for {@link VideoTrackList} and {@link {AudioTrackList} events.
	   * This adds {@link EventTarget~EventListeners} for `addtrack`, and  `removetrack`.
	   *
	   * @fires Tech#audiotrackchange
	   * @fires Tech#videotrackchange
	   */


	  Tech.prototype.initTrackListeners = function initTrackListeners() {
	    var _this3 = this;

	    var trackTypes = ['video', 'audio'];

	    trackTypes.forEach(function (type) {
	      /**
	       * Triggered when tracks are added or removed on the Tech {@link AudioTrackList}
	       *
	       * @event Tech#audiotrackchange
	       * @type {EventTarget~Event}
	       */

	      /**
	       * Triggered when tracks are added or removed on the Tech {@link VideoTrackList}
	       *
	       * @event Tech#videotrackchange
	       * @type {EventTarget~Event}
	       */
	      var trackListChanges = function trackListChanges() {
	        _this3.trigger(type + 'trackchange');
	      };

	      var tracks = _this3[type + 'Tracks']();

	      tracks.addEventListener('removetrack', trackListChanges);
	      tracks.addEventListener('addtrack', trackListChanges);

	      _this3.on('dispose', function () {
	        tracks.removeEventListener('removetrack', trackListChanges);
	        tracks.removeEventListener('addtrack', trackListChanges);
	      });
	    });
	  };

	  /**
	   * Emulate TextTracks using vtt.js if necessary
	   *
	   * @fires Tech#vttjsloaded
	   * @fires Tech#vttjserror
	   * @fires Tech#texttrackchange
	   */


	  Tech.prototype.addWebVttScript_ = function addWebVttScript_() {
	    var _this4 = this;

	    if (!_window2['default'].WebVTT && this.el().parentNode !== null && this.el().parentNode !== undefined) {
	      (function () {
	        var script = _document2['default'].createElement('script');

	        script.src = _this4.options_['vtt.js'] || '../node_modules/videojs-vtt.js/dist/vtt.js';
	        script.onload = function () {
	          /**
	           * Fired when vtt.js is loaded.
	           *
	           * @event Tech#vttjsloaded
	           * @type {EventTarget~Event}
	           */
	          _this4.trigger('vttjsloaded');
	        };
	        script.onerror = function () {
	          /**
	           * Fired when vtt.js was not loaded due to an error
	           *
	           * @event Tech#vttjsloaded
	           * @type {EventTarget~Event}
	           */
	          _this4.trigger('vttjserror');
	        };
	        _this4.on('dispose', function () {
	          script.onload = null;
	          script.onerror = null;
	        });
	        // but have not loaded yet and we set it to true before the inject so that
	        // we don't overwrite the injected window.WebVTT if it loads right away
	        _window2['default'].WebVTT = true;
	        _this4.el().parentNode.appendChild(script);
	      })();
	    }
	  };

	  /**
	   * Emulate texttracks
	   *
	   * @method emulateTextTracks
	   */


	  Tech.prototype.emulateTextTracks = function emulateTextTracks() {
	    var _this5 = this;

	    var tracks = this.textTracks();

	    if (!tracks) {
	      return;
	    }

	    this.remoteTextTracks().on('addtrack', function (e) {
	      _this5.textTracks().addTrack_(e.track);
	    });

	    this.remoteTextTracks().on('removetrack', function (e) {
	      _this5.textTracks().removeTrack_(e.track);
	    });

	    // Initially, Tech.el_ is a child of a dummy-div wait until the Component system
	    // signals that the Tech is ready at which point Tech.el_ is part of the DOM
	    // before inserting the WebVTT script
	    this.on('ready', this.addWebVttScript_);

	    var updateDisplay = function updateDisplay() {
	      return _this5.trigger('texttrackchange');
	    };
	    var textTracksChanges = function textTracksChanges() {
	      updateDisplay();

	      for (var i = 0; i < tracks.length; i++) {
	        var track = tracks[i];

	        track.removeEventListener('cuechange', updateDisplay);
	        if (track.mode === 'showing') {
	          track.addEventListener('cuechange', updateDisplay);
	        }
	      }
	    };

	    textTracksChanges();
	    tracks.addEventListener('change', textTracksChanges);

	    this.on('dispose', function () {
	      tracks.removeEventListener('change', textTracksChanges);
	    });
	  };

	  /**
	   * Get the `Tech`s {@link VideoTrackList}.
	   *
	   * @return {VideoTrackList}
	   *          The video track list that the Tech is currently using.
	   */


	  Tech.prototype.videoTracks = function videoTracks() {
	    this.videoTracks_ = this.videoTracks_ || new _videoTrackList2['default']();
	    return this.videoTracks_;
	  };

	  /**
	   * Get the `Tech`s {@link AudioTrackList}.
	   *
	   * @return {AudioTrackList}
	   *          The audio track list that the Tech is currently using.
	   */


	  Tech.prototype.audioTracks = function audioTracks() {
	    this.audioTracks_ = this.audioTracks_ || new _audioTrackList2['default']();
	    return this.audioTracks_;
	  };

	  /**
	   * Get the `Tech`s {@link TextTrackList}.
	   *
	   * @return {TextTrackList}
	   *          The text track list that the Tech is currently using.
	   */


	  Tech.prototype.textTracks = function textTracks() {
	    this.textTracks_ = this.textTracks_ || new _textTrackList2['default']();
	    return this.textTracks_;
	  };

	  /**
	   * Get the `Tech`s remote {@link TextTrackList}, which is created from elements
	   * that were added to the DOM.
	   *
	   * @return {TextTrackList}
	   *          The remote text track list that the Tech is currently using.
	   */


	  Tech.prototype.remoteTextTracks = function remoteTextTracks() {
	    this.remoteTextTracks_ = this.remoteTextTracks_ || new _textTrackList2['default']();
	    return this.remoteTextTracks_;
	  };

	  /**
	   * Get The `Tech`s  {HTMLTrackElementList}, which are the elements in the DOM that are
	   * being used as TextTracks.
	   *
	   * @return {HTMLTrackElementList}
	   *          The current HTML track elements that exist for the tech.
	   */


	  Tech.prototype.remoteTextTrackEls = function remoteTextTrackEls() {
	    this.remoteTextTrackEls_ = this.remoteTextTrackEls_ || new _htmlTrackElementList2['default']();
	    return this.remoteTextTrackEls_;
	  };

	  /**
	   * Create and returns a remote {@link TextTrack} object.
	   *
	   * @param {string} kind
	   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
	   *
	   * @param {string} [label]
	   *        Label to identify the text track
	   *
	   * @param {string} [language]
	   *        Two letter language abbreviation
	   *
	   * @return {TextTrack}
	   *         The TextTrack that gets created.
	   */


	  Tech.prototype.addTextTrack = function addTextTrack(kind, label, language) {
	    if (!kind) {
	      throw new Error('TextTrack kind is required but was not provided');
	    }

	    return createTrackHelper(this, kind, label, language);
	  };

	  /**
	   * Create an emulated TextTrack for use by addRemoteTextTrack
	   *
	   * This is intended to be overridden by classes that inherit from
	   * Tech in order to create native or custom TextTracks.
	   *
	   * @param {Object} options
	   *        The object should contain the options to initialize the TextTrack with.
	   *
	   * @param {string} [options.kind]
	   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).
	   *
	   * @param {string} [options.label].
	   *        Label to identify the text track
	   *
	   * @param {string} [options.language]
	   *        Two letter language abbreviation.
	   *
	   * @return {HTMLTrackElement}
	   *         The track element that gets created.
	   */


	  Tech.prototype.createRemoteTextTrack = function createRemoteTextTrack(options) {
	    var track = (0, _mergeOptions2['default'])(options, {
	      tech: this
	    });

	    return new _htmlTrackElement2['default'](track);
	  };

	  /**
	   * Creates a remote text track object and returns an html track element.
	   *
	   * > Note: This can be an emulated {@link HTMLTrackElement} or a native one.
	   *
	   * @param {Object} options
	   *        See {@link Tech#createRemoteTextTrack} for more detailed properties.
	   *
	   * @param {boolean} [manualCleanup=true]
	   *        - When false: the TextTrack will be automatically removed from the video
	   *          element whenever the source changes
	   *        - When True: The TextTrack will have to be cleaned up manually
	   *
	   * @return {HTMLTrackElement}
	   *         An Html Track Element.
	   *
	   * @deprecated The default functionality for this function will be equivalent
	   *             to "manualCleanup=false" in the future. The manualCleanup parameter will
	   *             also be removed.
	   */


	  Tech.prototype.addRemoteTextTrack = function addRemoteTextTrack() {
	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var manualCleanup = arguments[1];

	    var htmlTrackElement = this.createRemoteTextTrack(options);

	    if (manualCleanup !== true && manualCleanup !== false) {
	      // deprecation warning
	      _log2['default'].warn('Calling addRemoteTextTrack without explicitly setting the "manualCleanup" parameter to `true` is deprecated and default to `false` in future version of video.js');
	      manualCleanup = true;
	    }

	    // store HTMLTrackElement and TextTrack to remote list
	    this.remoteTextTrackEls().addTrackElement_(htmlTrackElement);
	    this.remoteTextTracks().addTrack_(htmlTrackElement.track);

	    if (manualCleanup !== true) {
	      // create the TextTrackList if it doesn't exist
	      this.autoRemoteTextTracks_.addTrack_(htmlTrackElement.track);
	    }

	    return htmlTrackElement;
	  };

	  /**
	   * Remove a remote text track from the remote `TextTrackList`.
	   *
	   * @param {TextTrack} track
	   *        `TextTrack` to remove from the `TextTrackList`
	   */


	  Tech.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {
	    var trackElement = this.remoteTextTrackEls().getTrackElementByTrack_(track);

	    // remove HTMLTrackElement and TextTrack from remote list
	    this.remoteTextTrackEls().removeTrackElement_(trackElement);
	    this.remoteTextTracks().removeTrack_(track);
	    this.autoRemoteTextTracks_.removeTrack_(track);
	  };

	  /**
	   * A method to set a poster from a `Tech`.
	   *
	   * @abstract
	   */


	  Tech.prototype.setPoster = function setPoster() {};

	  /*
	   * Check if the tech can support the given mime-type.
	   *
	   * The base tech does not support any type, but source handlers might
	   * overwrite this.
	   *
	   * @param  {string} type
	   *         The mimetype to check for support
	   *
	   * @return {string}
	   *         'probably', 'maybe', or empty string
	   *
	   * @see [Spec]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType}
	   *
	   * @abstract
	   */


	  Tech.prototype.canPlayType = function canPlayType() {
	    return '';
	  };

	  /*
	   * Return whether the argument is a Tech or not.
	   * Can be passed either a Class like `Html5` or a instance like `player.tech_`
	   *
	   * @param {Object} component
	   *        The item to check
	   *
	   * @return {boolean}
	   *         Whether it is a tech or not
	   *         - True if it is a tech
	   *         - False if it is not
	   */


	  Tech.isTech = function isTech(component) {
	    return component.prototype instanceof Tech || component instanceof Tech || component === Tech;
	  };

	  /**
	   * Registers a `Tech` into a shared list for videojs.
	   *
	   * @param {string} name
	   *        Name of the `Tech` to register.
	   *
	   * @param {Object} tech
	   *        The `Tech` class to register.
	   */


	  Tech.registerTech = function registerTech(name, tech) {
	    if (!Tech.techs_) {
	      Tech.techs_ = {};
	    }

	    if (!Tech.isTech(tech)) {
	      throw new Error('Tech ' + name + ' must be a Tech');
	    }

	    Tech.techs_[name] = tech;
	    return tech;
	  };

	  /**
	   * Get a `Tech` from the shared list by name.
	   *
	   * @param {string} name
	   *        Name of the component to get
	   *
	   * @return {Tech|undefined}
	   *         The `Tech` or undefined if there was no tech with the name requsted.
	   */


	  Tech.getTech = function getTech(name) {
	    if (Tech.techs_ && Tech.techs_[name]) {
	      return Tech.techs_[name];
	    }

	    if (_window2['default'] && _window2['default'].videojs && _window2['default'].videojs[name]) {
	      _log2['default'].warn('The ' + name + ' tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)');
	      return _window2['default'].videojs[name];
	    }
	  };

	  return Tech;
	}(_component2['default']);

	/**
	 * List of associated text tracks.
	 *
	 * @type {TextTrackList}
	 * @private
	 */


	Tech.prototype.textTracks_; // eslint-disable-line

	/**
	 * List of associated audio tracks.
	 *
	 * @type {AudioTrackList}
	 * @private
	 */
	Tech.prototype.audioTracks_; // eslint-disable-line

	/**
	 * List of associated video tracks.
	 *
	 * @type {VideoTrackList}
	 * @private
	 */
	Tech.prototype.videoTracks_; // eslint-disable-line

	/**
	 * Boolean indicating wether the `Tech` supports volume control.
	 *
	 * @type {boolean}
	 * @default
	 */
	Tech.prototype.featuresVolumeControl = true;

	/**
	 * Boolean indicating wether the `Tech` support fullscreen resize control.
	 * Resizing plugins using request fullscreen reloads the plugin
	 *
	 * @type {boolean}
	 * @default
	 */
	Tech.prototype.featuresFullscreenResize = false;

	/**
	 * Boolean indicating wether the `Tech` supports changing the speed at which the video
	 * plays. Examples:
	 *   - Set player to play 2x (twice) as fast
	 *   - Set player to play 0.5x (half) as fast
	 *
	 * @type {boolean}
	 * @default
	 */
	Tech.prototype.featuresPlaybackRate = false;

	/**
	 * Boolean indicating wether the `Tech` supports the `progress` event. This is currently
	 * not triggered by video-js-swf. This will be used to determine if
	 * {@link Tech#manualProgressOn} should be called.
	 *
	 * @type {boolean}
	 * @default
	 */
	Tech.prototype.featuresProgressEvents = false;

	/**
	 * Boolean indicating wether the `Tech` supports the `timeupdate` event. This is currently
	 * not triggered by video-js-swf. This will be used to determine if
	 * {@link Tech#manualTimeUpdates} should be called.
	 *
	 * @type {boolean}
	 * @default
	 */
	Tech.prototype.featuresTimeupdateEvents = false;

	/**
	 * Boolean indicating wether the `Tech` supports the native `TextTrack`s.
	 * This will help us integrate with native `TextTrack`s if the browser supports them.
	 *
	 * @type {boolean}
	 * @default
	 */
	Tech.prototype.featuresNativeTextTracks = false;

	/**
	 * A functional mixin for techs that want to use the Source Handler pattern.
	 * Source handlers are scripts for handling specific formats.
	 * The source handler pattern is used for adaptive formats (HLS, DASH) that
	 * manually load video data and feed it into a Source Buffer (Media Source Extensions)
	 * Example: `Tech.withSourceHandlers.call(MyTech);`
	 *
	 * @param {Tech} _Tech
	 *        The tech to add source handler functions to.
	 *
	 * @mixes Tech~SourceHandlerAdditions
	 */
	Tech.withSourceHandlers = function (_Tech) {

	  /**
	   * Register a source handler
	   *
	   * @param {Function} handler
	   *        The source handler class
	   *
	   * @param {number} [index]
	   *        Register it at the following index
	   */
	  _Tech.registerSourceHandler = function (handler, index) {
	    var handlers = _Tech.sourceHandlers;

	    if (!handlers) {
	      handlers = _Tech.sourceHandlers = [];
	    }

	    if (index === undefined) {
	      // add to the end of the list
	      index = handlers.length;
	    }

	    handlers.splice(index, 0, handler);
	  };

	  /**
	   * Check if the tech can support the given type. Also checks the
	   * Techs sourceHandlers.
	   *
	   * @param {string} type
	   *         The mimetype to check.
	   *
	   * @return {string}
	   *         'probably', 'maybe', or '' (empty string)
	   */
	  _Tech.canPlayType = function (type) {
	    var handlers = _Tech.sourceHandlers || [];
	    var can = void 0;

	    for (var i = 0; i < handlers.length; i++) {
	      can = handlers[i].canPlayType(type);

	      if (can) {
	        return can;
	      }
	    }

	    return '';
	  };

	  /**
	   * Returns the first source handler that supports the source.
	   *
	   * TODO: Answer question: should 'probably' be prioritized over 'maybe'
	   *
	   * @param {Tech~SourceObject} source
	   *        The source object
	   *
	   * @param {Object} options
	   *        The options passed to the tech
	   *
	   * @return {SourceHandler|null}
	   *          The first source handler that supports the source or null if
	   *          no SourceHandler supports the source
	   */
	  _Tech.selectSourceHandler = function (source, options) {
	    var handlers = _Tech.sourceHandlers || [];
	    var can = void 0;

	    for (var i = 0; i < handlers.length; i++) {
	      can = handlers[i].canHandleSource(source, options);

	      if (can) {
	        return handlers[i];
	      }
	    }

	    return null;
	  };

	  /**
	   * Check if the tech can support the given source.
	   *
	   * @param {Tech~SourceObject} srcObj
	   *        The source object
	   *
	   * @param {Object} options
	   *        The options passed to the tech
	   *
	   * @return {string}
	   *         'probably', 'maybe', or '' (empty string)
	   */
	  _Tech.canPlaySource = function (srcObj, options) {
	    var sh = _Tech.selectSourceHandler(srcObj, options);

	    if (sh) {
	      return sh.canHandleSource(srcObj, options);
	    }

	    return '';
	  };

	  /**
	   * When using a source handler, prefer its implementation of
	   * any function normally provided by the tech.
	   */
	  var deferrable = ['seekable', 'duration'];

	  /**
	   * A wrapper around {@link Tech#seekable} that will call a `SourceHandler`s seekable
	   * function if it exists, with a fallback to the Techs seekable function.
	   *
	   * @method _Tech.seekable
	   */

	  /**
	   * A wrapper around {@link Tech#duration} that will call a `SourceHandler`s duration
	   * function if it exists, otherwise it will fallback to the techs duration function.
	   *
	   * @method _Tech.duration
	   */

	  deferrable.forEach(function (fnName) {
	    var originalFn = this[fnName];

	    if (typeof originalFn !== 'function') {
	      return;
	    }

	    this[fnName] = function () {
	      if (this.sourceHandler_ && this.sourceHandler_[fnName]) {
	        return this.sourceHandler_[fnName].apply(this.sourceHandler_, arguments);
	      }
	      return originalFn.apply(this, arguments);
	    };
	  }, _Tech.prototype);

	  /**
	   * Create a function for setting the source using a source object
	   * and source handlers.
	   * Should never be called unless a source handler was found.
	   *
	   * @param {Tech~SourceObject} source
	   *        A source object with src and type keys
	   *
	   * @return {Tech}
	   *         Returns itself; this method is chainable
	   */
	  _Tech.prototype.setSource = function (source) {
	    var sh = _Tech.selectSourceHandler(source, this.options_);

	    if (!sh) {
	      // Fall back to a native source hander when unsupported sources are
	      // deliberately set
	      if (_Tech.nativeSourceHandler) {
	        sh = _Tech.nativeSourceHandler;
	      } else {
	        _log2['default'].error('No source hander found for the current source.');
	      }
	    }

	    // Dispose any existing source handler
	    this.disposeSourceHandler();
	    this.off('dispose', this.disposeSourceHandler);

	    if (sh !== _Tech.nativeSourceHandler) {
	      this.currentSource_ = source;

	      // Catch if someone replaced the src without calling setSource.
	      // If they do, set currentSource_ to null and dispose our source handler.
	      this.off(this.el_, 'loadstart', _Tech.prototype.firstLoadStartListener_);
	      this.off(this.el_, 'loadstart', _Tech.prototype.successiveLoadStartListener_);
	      this.one(this.el_, 'loadstart', _Tech.prototype.firstLoadStartListener_);
	    }

	    this.sourceHandler_ = sh.handleSource(source, this, this.options_);
	    this.on('dispose', this.disposeSourceHandler);

	    return this;
	  };

	  /**
	   * Called once for the first loadstart of a video.
	   *
	   * @listens Tech#loadstart
	   */
	  _Tech.prototype.firstLoadStartListener_ = function () {
	    this.one(this.el_, 'loadstart', _Tech.prototype.successiveLoadStartListener_);
	  };

	  // On successive loadstarts when setSource has not been called again
	  /**
	   * Called after the first loadstart for a video occurs.
	   *
	   * @listens Tech#loadstart
	   */
	  _Tech.prototype.successiveLoadStartListener_ = function () {
	    this.disposeSourceHandler();
	    this.one(this.el_, 'loadstart', _Tech.prototype.successiveLoadStartListener_);
	  };

	  /**
	   * Clean up any existing SourceHandlers and listeners when the Tech is disposed.
	   *
	   * @listens Tech#dispose
	   */
	  _Tech.prototype.disposeSourceHandler = function () {
	    // if we have a source and get another one
	    // then we are loading something new
	    // than clear all of our current tracks
	    if (this.currentSource_) {
	      this.clearTracks(['audio', 'video']);
	      this.currentSource_ = null;
	    }

	    // always clean up auto-text tracks
	    this.cleanupAutoTextTracks();

	    if (this.sourceHandler_) {
	      this.off(this.el_, 'loadstart', _Tech.prototype.firstLoadStartListener_);
	      this.off(this.el_, 'loadstart', _Tech.prototype.successiveLoadStartListener_);

	      if (this.sourceHandler_.dispose) {
	        this.sourceHandler_.dispose();
	      }

	      this.sourceHandler_ = null;
	    }
	  };
	};

	_component2['default'].registerComponent('Tech', Tech);
	// Old name for Tech
	// @deprecated
	_component2['default'].registerComponent('MediaTechController', Tech);
	Tech.registerTech('Tech', Tech);
	exports['default'] = Tech;


/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _browser = __webpack_require__(262);

	var browser = _interopRequireWildcard(_browser);

	var _document = __webpack_require__(256);

	var _document2 = _interopRequireDefault(_document);

	var _eventTarget = __webpack_require__(271);

	var _eventTarget2 = _interopRequireDefault(_eventTarget);

	var _textTrack = __webpack_require__(282);

	var _textTrack2 = _interopRequireDefault(_textTrack);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file html-track-element.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	/**
	 * @typedef {HTMLTrackElement~ReadyState}
	 * @enum {number}
	 */
	var NONE = 0;
	var LOADING = 1;
	var LOADED = 2;
	var ERROR = 3;

	/**
	 * A single track represented in the DOM.
	 *
	 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#htmltrackelement}
	 * @extends EventTarget
	 */

	var HTMLTrackElement = function (_EventTarget) {
	  _inherits(HTMLTrackElement, _EventTarget);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Object} options={}
	   *        Object of option names and values
	   *
	   * @param {Tech} options.tech
	   *        A reference to the tech that owns this HTMLTrackElement.
	   *
	   * @param {TextTrack~Kind} [options.kind='subtitles']
	   *        A valid text track kind.
	   *
	   * @param {TextTrack~Mode} [options.mode='disabled']
	   *        A valid text track mode.
	   *
	   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
	   *        A unique id for this TextTrack.
	   *
	   * @param {string} [options.label='']
	   *        The menu label for this track.
	   *
	   * @param {string} [options.language='']
	   *        A valid two character language code.
	   *
	   * @param {string} [options.srclang='']
	   *        A valid two character language code. An alternative, but deprioritized
	   *        vesion of `options.language`
	   *
	   * @param {string} [options.src]
	   *        A url to TextTrack cues.
	   *
	   * @param {boolean} [options.default]
	   *        If this track should default to on or off.
	   */
	  function HTMLTrackElement() {
	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    _classCallCheck(this, HTMLTrackElement);

	    var _this = _possibleConstructorReturn(this, _EventTarget.call(this));

	    var readyState = void 0;
	    var trackElement = _this; // eslint-disable-line

	    if (browser.IS_IE8) {
	      trackElement = _document2['default'].createElement('custom');

	      for (var prop in HTMLTrackElement.prototype) {
	        if (prop !== 'constructor') {
	          trackElement[prop] = HTMLTrackElement.prototype[prop];
	        }
	      }
	    }

	    var track = new _textTrack2['default'](options);

	    trackElement.kind = track.kind;
	    trackElement.src = track.src;
	    trackElement.srclang = track.language;
	    trackElement.label = track.label;
	    trackElement['default'] = track['default'];

	    /**
	     * @member {HTMLTrackElement~ReadyState} readyState
	     *         The current ready state of the track element.
	     */
	    Object.defineProperty(trackElement, 'readyState', {
	      get: function get() {
	        return readyState;
	      }
	    });

	    /**
	     * @member {TextTrack} track
	     *         The underlying TextTrack object.
	     */
	    Object.defineProperty(trackElement, 'track', {
	      get: function get() {
	        return track;
	      }
	    });

	    readyState = NONE;

	    /**
	     * @listens TextTrack#loadeddata
	     * @fires HTMLTrackElement#load
	     */
	    track.addEventListener('loadeddata', function () {
	      readyState = LOADED;

	      trackElement.trigger({
	        type: 'load',
	        target: trackElement
	      });
	    });

	    if (browser.IS_IE8) {
	      var _ret;

	      return _ret = trackElement, _possibleConstructorReturn(_this, _ret);
	    }
	    return _this;
	  }

	  return HTMLTrackElement;
	}(_eventTarget2['default']);

	HTMLTrackElement.prototype.allowedEvents_ = {
	  load: 'load'
	};

	HTMLTrackElement.NONE = NONE;
	HTMLTrackElement.LOADING = LOADING;
	HTMLTrackElement.LOADED = LOADED;
	HTMLTrackElement.ERROR = ERROR;

	exports['default'] = HTMLTrackElement;


/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _textTrackCueList = __webpack_require__(283);

	var _textTrackCueList2 = _interopRequireDefault(_textTrackCueList);

	var _fn = __webpack_require__(268);

	var Fn = _interopRequireWildcard(_fn);

	var _trackEnums = __webpack_require__(284);

	var _log = __webpack_require__(261);

	var _log2 = _interopRequireDefault(_log);

	var _window = __webpack_require__(255);

	var _window2 = _interopRequireDefault(_window);

	var _track = __webpack_require__(285);

	var _track2 = _interopRequireDefault(_track);

	var _url = __webpack_require__(286);

	var _xhr = __webpack_require__(287);

	var _xhr2 = _interopRequireDefault(_xhr);

	var _mergeOptions = __webpack_require__(270);

	var _mergeOptions2 = _interopRequireDefault(_mergeOptions);

	var _browser = __webpack_require__(262);

	var browser = _interopRequireWildcard(_browser);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file text-track.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Takes a webvtt file contents and parses it into cues
	 *
	 * @param {string} srcContent
	 *        webVTT file contents
	 *
	 * @param {TextTrack} track
	 *        TextTrack to add cues to. Cues come from the srcContent.
	 *
	 * @private
	 */
	var parseCues = function parseCues(srcContent, track) {
	  var parser = new _window2['default'].WebVTT.Parser(_window2['default'], _window2['default'].vttjs, _window2['default'].WebVTT.StringDecoder());
	  var errors = [];

	  parser.oncue = function (cue) {
	    track.addCue(cue);
	  };

	  parser.onparsingerror = function (error) {
	    errors.push(error);
	  };

	  parser.onflush = function () {
	    track.trigger({
	      type: 'loadeddata',
	      target: track
	    });
	  };

	  parser.parse(srcContent);
	  if (errors.length > 0) {
	    if (_window2['default'].console && _window2['default'].console.groupCollapsed) {
	      _window2['default'].console.groupCollapsed('Text Track parsing errors for ' + track.src);
	    }
	    errors.forEach(function (error) {
	      return _log2['default'].error(error);
	    });
	    if (_window2['default'].console && _window2['default'].console.groupEnd) {
	      _window2['default'].console.groupEnd();
	    }
	  }

	  parser.flush();
	};

	/**
	 * Load a `TextTrack` from a specifed url.
	 *
	 * @param {string} src
	 *        Url to load track from.
	 *
	 * @param {TextTrack} track
	 *        Track to add cues to. Comes from the content at the end of `url`.
	 *
	 * @private
	 */
	var loadTrack = function loadTrack(src, track) {
	  var opts = {
	    uri: src
	  };
	  var crossOrigin = (0, _url.isCrossOrigin)(src);

	  if (crossOrigin) {
	    opts.cors = crossOrigin;
	  }

	  (0, _xhr2['default'])(opts, Fn.bind(this, function (err, response, responseBody) {
	    if (err) {
	      return _log2['default'].error(err, response);
	    }

	    track.loaded_ = true;

	    // Make sure that vttjs has loaded, otherwise, wait till it finished loading
	    // NOTE: this is only used for the alt/video.novtt.js build
	    if (typeof _window2['default'].WebVTT !== 'function') {
	      if (track.tech_) {
	        (function () {
	          var loadHandler = function loadHandler() {
	            return parseCues(responseBody, track);
	          };

	          track.tech_.on('vttjsloaded', loadHandler);
	          track.tech_.on('vttjserror', function () {
	            _log2['default'].error('vttjs failed to load, stopping trying to process ' + track.src);
	            track.tech_.off('vttjsloaded', loadHandler);
	          });
	        })();
	      }
	    } else {
	      parseCues(responseBody, track);
	    }
	  }));
	};

	/**
	 * A representation of a single `TextTrack`.
	 *
	 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrack}
	 * @extends Track
	 */

	var TextTrack = function (_Track) {
	  _inherits(TextTrack, _Track);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Object} options={}
	   *        Object of option names and values
	   *
	   * @param {Tech} options.tech
	   *        A reference to the tech that owns this TextTrack.
	   *
	   * @param {TextTrack~Kind} [options.kind='subtitles']
	   *        A valid text track kind.
	   *
	   * @param {TextTrack~Mode} [options.mode='disabled']
	   *        A valid text track mode.
	   *
	   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
	   *        A unique id for this TextTrack.
	   *
	   * @param {string} [options.label='']
	   *        The menu label for this track.
	   *
	   * @param {string} [options.language='']
	   *        A valid two character language code.
	   *
	   * @param {string} [options.srclang='']
	   *        A valid two character language code. An alternative, but deprioritized
	   *        vesion of `options.language`
	   *
	   * @param {string} [options.src]
	   *        A url to TextTrack cues.
	   *
	   * @param {boolean} [options.default]
	   *        If this track should default to on or off.
	   */
	  function TextTrack() {
	    var _this, _ret2;

	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    _classCallCheck(this, TextTrack);

	    if (!options.tech) {
	      throw new Error('A tech was not provided.');
	    }

	    var settings = (0, _mergeOptions2['default'])(options, {
	      kind: _trackEnums.TextTrackKind[options.kind] || 'subtitles',
	      language: options.language || options.srclang || ''
	    });
	    var mode = _trackEnums.TextTrackMode[settings.mode] || 'disabled';
	    var default_ = settings['default'];

	    if (settings.kind === 'metadata' || settings.kind === 'chapters') {
	      mode = 'hidden';
	    }
	    // on IE8 this will be a document element
	    // for every other browser this will be a normal object
	    var tt = (_this = _possibleConstructorReturn(this, _Track.call(this, settings)), _this);

	    tt.tech_ = settings.tech;

	    if (browser.IS_IE8) {
	      for (var prop in TextTrack.prototype) {
	        if (prop !== 'constructor') {
	          tt[prop] = TextTrack.prototype[prop];
	        }
	      }
	    }

	    tt.cues_ = [];
	    tt.activeCues_ = [];

	    var cues = new _textTrackCueList2['default'](tt.cues_);
	    var activeCues = new _textTrackCueList2['default'](tt.activeCues_);
	    var changed = false;
	    var timeupdateHandler = Fn.bind(tt, function () {

	      // Accessing this.activeCues for the side-effects of updating itself
	      // due to it's nature as a getter function. Do not remove or cues will
	      // stop updating!
	      /* eslint-disable no-unused-expressions */
	      this.activeCues;
	      /* eslint-enable no-unused-expressions */
	      if (changed) {
	        this.trigger('cuechange');
	        changed = false;
	      }
	    });

	    if (mode !== 'disabled') {
	      tt.tech_.on('timeupdate', timeupdateHandler);
	    }

	    /**
	     * @member {boolean} default
	     *         If this track was set to be on or off by default. Cannot be changed after
	     *         creation.
	     *
	     * @readonly
	     */
	    Object.defineProperty(tt, 'default', {
	      get: function get() {
	        return default_;
	      },
	      set: function set() {}
	    });

	    /**
	     * @member {string} mode
	     *         Set the mode of this TextTrack to a valid {@link TextTrack~Mode}. Will
	     *         not be set if setting to an invalid mode.
	     *
	     * @fires TextTrack#modechange
	     */
	    Object.defineProperty(tt, 'mode', {
	      get: function get() {
	        return mode;
	      },
	      set: function set(newMode) {
	        if (!_trackEnums.TextTrackMode[newMode]) {
	          return;
	        }
	        mode = newMode;
	        if (mode === 'showing') {
	          this.tech_.on('timeupdate', timeupdateHandler);
	        }
	        /**
	         * An event that fires when mode changes on this track. This allows
	         * the TextTrackList that holds this track to act accordingly.
	         *
	         * > Note: This is not part of the spec!
	         *
	         * @event TextTrack#modechange
	         * @type {EventTarget~Event}
	         */
	        this.trigger('modechange');
	      }
	    });

	    /**
	     * @member {TextTrackCueList} cues
	     *         The text track cue list for this TextTrack.
	     */
	    Object.defineProperty(tt, 'cues', {
	      get: function get() {
	        if (!this.loaded_) {
	          return null;
	        }

	        return cues;
	      },
	      set: function set() {}
	    });

	    /**
	     * @member {TextTrackCueList} activeCues
	     *         The list text track cues that are currently active for this TextTrack.
	     */
	    Object.defineProperty(tt, 'activeCues', {
	      get: function get() {
	        if (!this.loaded_) {
	          return null;
	        }

	        // nothing to do
	        if (this.cues.length === 0) {
	          return activeCues;
	        }

	        var ct = this.tech_.currentTime();
	        var active = [];

	        for (var i = 0, l = this.cues.length; i < l; i++) {
	          var cue = this.cues[i];

	          if (cue.startTime <= ct && cue.endTime >= ct) {
	            active.push(cue);
	          } else if (cue.startTime === cue.endTime && cue.startTime <= ct && cue.startTime + 0.5 >= ct) {
	            active.push(cue);
	          }
	        }

	        changed = false;

	        if (active.length !== this.activeCues_.length) {
	          changed = true;
	        } else {
	          for (var _i = 0; _i < active.length; _i++) {
	            if (this.activeCues_.indexOf(active[_i]) === -1) {
	              changed = true;
	            }
	          }
	        }

	        this.activeCues_ = active;
	        activeCues.setCues_(this.activeCues_);

	        return activeCues;
	      },
	      set: function set() {}
	    });

	    if (settings.src) {
	      tt.src = settings.src;
	      loadTrack(settings.src, tt);
	    } else {
	      tt.loaded_ = true;
	    }

	    return _ret2 = tt, _possibleConstructorReturn(_this, _ret2);
	  }

	  /**
	   * Add a cue to the internal list of cues.
	   *
	   * @param {TextTrack~Cue} cue
	   *        The cue to add to our internal list
	   */


	  TextTrack.prototype.addCue = function addCue(cue) {
	    var tracks = this.tech_.textTracks();

	    if (tracks) {
	      for (var i = 0; i < tracks.length; i++) {
	        if (tracks[i] !== this) {
	          tracks[i].removeCue(cue);
	        }
	      }
	    }

	    this.cues_.push(cue);
	    this.cues.setCues_(this.cues_);
	  };

	  /**
	   * Remove a cue from our internal list
	   *
	   * @param {TextTrack~Cue} removeCue
	   *        The cue to remove from our internal list
	   */


	  TextTrack.prototype.removeCue = function removeCue(_removeCue) {
	    var removed = false;

	    for (var i = 0, l = this.cues_.length; i < l; i++) {
	      var cue = this.cues_[i];

	      if (cue === _removeCue) {
	        this.cues_.splice(i, 1);
	        removed = true;
	      }
	    }

	    if (removed) {
	      this.cues.setCues_(this.cues_);
	    }
	  };

	  return TextTrack;
	}(_track2['default']);

	/**
	 * cuechange - One or more cues in the track have become active or stopped being active.
	 */


	TextTrack.prototype.allowedEvents_ = {
	  cuechange: 'cuechange'
	};

	exports['default'] = TextTrack;


/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _browser = __webpack_require__(262);

	var browser = _interopRequireWildcard(_browser);

	var _document = __webpack_require__(256);

	var _document2 = _interopRequireDefault(_document);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /**
	                                                                                                                                                           * @file text-track-cue-list.js
	                                                                                                                                                           */


	/**
	 * @typedef {Object} TextTrackCue
	 *
	 * @property {string} id
	 *           The unique id for this text track cue
	 *
	 * @property {number} startTime
	 *           The start time for this text track cue
	 *
	 * @property {number} endTime
	 *           The end time for this text track cue
	 *
	 * @property {boolean} pauseOnExit
	 *           Pause when the end time is reached if true.
	 *
	 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcue}
	 */

	/**
	 * A List of TextTrackCues.
	 *
	 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcuelist}
	 */
	var TextTrackCueList = function () {

	  /**
	   * Create an instance of this class..
	   *
	   * @param {Array} cues
	   *        A list of cues to be initialized with
	   */
	  function TextTrackCueList(cues) {
	    _classCallCheck(this, TextTrackCueList);

	    var list = this; // eslint-disable-line

	    if (browser.IS_IE8) {
	      list = _document2['default'].createElement('custom');

	      for (var prop in TextTrackCueList.prototype) {
	        if (prop !== 'constructor') {
	          list[prop] = TextTrackCueList.prototype[prop];
	        }
	      }
	    }

	    TextTrackCueList.prototype.setCues_.call(list, cues);

	    /**
	     * @member {number} length
	     *         The current number of `TextTrackCue`s in the TextTrackCueList.
	     */
	    Object.defineProperty(list, 'length', {
	      get: function get() {
	        return this.length_;
	      }
	    });

	    if (browser.IS_IE8) {
	      return list;
	    }
	  }

	  /**
	   * A setter for cues in this list. Creates getters
	   * an an index for the cues.
	   *
	   * @param {Array} cues
	   *        An array of cues to set
	   *
	   * @private
	   */


	  TextTrackCueList.prototype.setCues_ = function setCues_(cues) {
	    var oldLength = this.length || 0;
	    var i = 0;
	    var l = cues.length;

	    this.cues_ = cues;
	    this.length_ = cues.length;

	    var defineProp = function defineProp(index) {
	      if (!('' + index in this)) {
	        Object.defineProperty(this, '' + index, {
	          get: function get() {
	            return this.cues_[index];
	          }
	        });
	      }
	    };

	    if (oldLength < l) {
	      i = oldLength;

	      for (; i < l; i++) {
	        defineProp.call(this, i);
	      }
	    }
	  };

	  /**
	   * Get a `TextTrackCue` that is currently in the `TextTrackCueList` by id.
	   *
	   * @param {string} id
	   *        The id of the cue that should be searched for.
	   *
	   * @return {TextTrackCue|null}
	   *         A single cue or null if none was found.
	   */


	  TextTrackCueList.prototype.getCueById = function getCueById(id) {
	    var result = null;

	    for (var i = 0, l = this.length; i < l; i++) {
	      var cue = this[i];

	      if (cue.id === id) {
	        result = cue;
	        break;
	      }
	    }

	    return result;
	  };

	  return TextTrackCueList;
	}();

	exports['default'] = TextTrackCueList;


/***/ },
/* 284 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	/**
	 * @file track-kinds.js
	 */

	/**
	 * All possible `VideoTrackKind`s
	 *
	 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-videotrack-kind
	 * @typedef VideoTrack~Kind
	 * @enum
	 */
	var VideoTrackKind = exports.VideoTrackKind = {
	  alternative: 'alternative',
	  captions: 'captions',
	  main: 'main',
	  sign: 'sign',
	  subtitles: 'subtitles',
	  commentary: 'commentary'
	};

	/**
	 * All possible `AudioTrackKind`s
	 *
	 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-audiotrack-kind
	 * @typedef AudioTrack~Kind
	 * @enum
	 */
	var AudioTrackKind = exports.AudioTrackKind = {
	  'alternative': 'alternative',
	  'descriptions': 'descriptions',
	  'main': 'main',
	  'main-desc': 'main-desc',
	  'translation': 'translation',
	  'commentary': 'commentary'
	};

	/**
	 * All possible `TextTrackKind`s
	 *
	 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-texttrack-kind
	 * @typedef TextTrack~Kind
	 * @enum
	 */
	var TextTrackKind = exports.TextTrackKind = {
	  subtitles: 'subtitles',
	  captions: 'captions',
	  descriptions: 'descriptions',
	  chapters: 'chapters',
	  metadata: 'metadata'
	};

	/**
	 * All possible `TextTrackMode`s
	 *
	 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackmode
	 * @typedef TextTrack~Mode
	 * @enum
	 */
	var TextTrackMode = exports.TextTrackMode = {
	  disabled: 'disabled',
	  hidden: 'hidden',
	  showing: 'showing'
	};


/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _browser = __webpack_require__(262);

	var browser = _interopRequireWildcard(_browser);

	var _document = __webpack_require__(256);

	var _document2 = _interopRequireDefault(_document);

	var _guid = __webpack_require__(260);

	var Guid = _interopRequireWildcard(_guid);

	var _eventTarget = __webpack_require__(271);

	var _eventTarget2 = _interopRequireDefault(_eventTarget);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file track.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * A Track class that contains all of the common functionality for {@link AudioTrack},
	 * {@link VideoTrack}, and {@link TextTrack}.
	 *
	 * > Note: This class should not be used directly
	 *
	 * @see {@link https://html.spec.whatwg.org/multipage/embedded-content.html}
	 * @extends EventTarget
	 * @abstract
	 */
	var Track = function (_EventTarget) {
	  _inherits(Track, _EventTarget);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Object} [options={}]
	   *        Object of option names and values
	   *
	   * @param {string} [options.kind='']
	   *        A valid kind for the track type you are creating.
	   *
	   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
	   *        A unique id for this AudioTrack.
	   *
	   * @param {string} [options.label='']
	   *        The menu label for this track.
	   *
	   * @param {string} [options.language='']
	   *        A valid two character language code.
	   *
	   * @abstract
	   */
	  function Track() {
	    var _ret;

	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    _classCallCheck(this, Track);

	    var _this = _possibleConstructorReturn(this, _EventTarget.call(this));

	    var track = _this; // eslint-disable-line

	    if (browser.IS_IE8) {
	      track = _document2['default'].createElement('custom');
	      for (var prop in Track.prototype) {
	        if (prop !== 'constructor') {
	          track[prop] = Track.prototype[prop];
	        }
	      }
	    }

	    var trackProps = {
	      id: options.id || 'vjs_track_' + Guid.newGUID(),
	      kind: options.kind || '',
	      label: options.label || '',
	      language: options.language || ''
	    };

	    /**
	     * @member {string} id
	     *         The id of this track. Cannot be changed after creation.
	     *
	     * @readonly
	     */

	    /**
	     * @member {string} kind
	     *         The kind of track that this is. Cannot be changed after creation.
	     *
	     * @readonly
	     */

	    /**
	     * @member {string} label
	     *         The label of this track. Cannot be changed after creation.
	     *
	     * @readonly
	     */

	    /**
	     * @member {string} language
	     *         The two letter language code for this track. Cannot be changed after
	     *         creation.
	     *
	     * @readonly
	     */

	    var _loop = function _loop(key) {
	      Object.defineProperty(track, key, {
	        get: function get() {
	          return trackProps[key];
	        },
	        set: function set() {}
	      });
	    };

	    for (var key in trackProps) {
	      _loop(key);
	    }

	    return _ret = track, _possibleConstructorReturn(_this, _ret);
	  }

	  return Track;
	}(_eventTarget2['default']);

	exports['default'] = Track;


/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.isCrossOrigin = exports.getFileExtension = exports.getAbsoluteURL = exports.parseUrl = undefined;

	var _document = __webpack_require__(256);

	var _document2 = _interopRequireDefault(_document);

	var _window = __webpack_require__(255);

	var _window2 = _interopRequireDefault(_window);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * @typedef {Object} url:URLObject
	 *
	 * @property {string} protocol
	 *           The protocol of the url that was parsed.
	 *
	 * @property {string} hostname
	 *           The hostname of the url that was parsed.
	 *
	 * @property {string} port
	 *           The port of the url that was parsed.
	 *
	 * @property {string} pathname
	 *           The pathname of the url that was parsed.
	 *
	 * @property {string} search
	 *           The search query of the url that was parsed.
	 *
	 * @property {string} hash
	 *           The hash of the url that was parsed.
	 *
	 * @property {string} host
	 *           The host of the url that was parsed.
	 */

	/**
	 * Resolve and parse the elements of a URL.
	 *
	 * @param  {String} url
	 *         The url to parse
	 *
	 * @return {url:URLObject}
	 *         An object of url details
	 */
	/**
	 * @file url.js
	 * @module url
	 */
	var parseUrl = exports.parseUrl = function parseUrl(url) {
	  var props = ['protocol', 'hostname', 'port', 'pathname', 'search', 'hash', 'host'];

	  // add the url to an anchor and let the browser parse the URL
	  var a = _document2['default'].createElement('a');

	  a.href = url;

	  // IE8 (and 9?) Fix
	  // ie8 doesn't parse the URL correctly until the anchor is actually
	  // added to the body, and an innerHTML is needed to trigger the parsing
	  var addToBody = a.host === '' && a.protocol !== 'file:';
	  var div = void 0;

	  if (addToBody) {
	    div = _document2['default'].createElement('div');
	    div.innerHTML = '<a href="' + url + '"></a>';
	    a = div.firstChild;
	    // prevent the div from affecting layout
	    div.setAttribute('style', 'display:none; position:absolute;');
	    _document2['default'].body.appendChild(div);
	  }

	  // Copy the specific URL properties to a new object
	  // This is also needed for IE8 because the anchor loses its
	  // properties when it's removed from the dom
	  var details = {};

	  for (var i = 0; i < props.length; i++) {
	    details[props[i]] = a[props[i]];
	  }

	  // IE9 adds the port to the host property unlike everyone else. If
	  // a port identifier is added for standard ports, strip it.
	  if (details.protocol === 'http:') {
	    details.host = details.host.replace(/:80$/, '');
	  }

	  if (details.protocol === 'https:') {
	    details.host = details.host.replace(/:443$/, '');
	  }

	  if (addToBody) {
	    _document2['default'].body.removeChild(div);
	  }

	  return details;
	};

	/**
	 * Get absolute version of relative URL. Used to tell flash correct URL.
	 *
	 *
	 * @param  {string} url
	 *         URL to make absolute
	 *
	 * @return {string}
	 *         Absolute URL
	 *
	 * @see http://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue
	 */
	var getAbsoluteURL = exports.getAbsoluteURL = function getAbsoluteURL(url) {
	  // Check if absolute URL
	  if (!url.match(/^https?:\/\//)) {
	    // Convert to absolute URL. Flash hosted off-site needs an absolute URL.
	    var div = _document2['default'].createElement('div');

	    div.innerHTML = '<a href="' + url + '">x</a>';
	    url = div.firstChild.href;
	  }

	  return url;
	};

	/**
	 * Returns the extension of the passed file name. It will return an empty string
	 * if passed an invalid path.
	 *
	 * @param {string} path
	 *        The fileName path like '/path/to/file.mp4'
	 *
	 * @returns {string}
	 *          The extension in lower case or an empty string if no
	 *          extension could be found.
	 */
	var getFileExtension = exports.getFileExtension = function getFileExtension(path) {
	  if (typeof path === 'string') {
	    var splitPathRe = /^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/i;
	    var pathParts = splitPathRe.exec(path);

	    if (pathParts) {
	      return pathParts.pop().toLowerCase();
	    }
	  }

	  return '';
	};

	/**
	 * Returns whether the url passed is a cross domain request or not.
	 *
	 * @param {string} url
	 *        The url to check.
	 *
	 * @return {boolean}
	 *         Whether it is a cross domain request or not.
	 */
	var isCrossOrigin = exports.isCrossOrigin = function isCrossOrigin(url) {
	  var winLoc = _window2['default'].location;
	  var urlInfo = parseUrl(url);

	  // IE8 protocol relative urls will return ':' for protocol
	  var srcProtocol = urlInfo.protocol === ':' ? winLoc.protocol : urlInfo.protocol;

	  // Check if url is for another domain/origin
	  // IE8 doesn't know location.origin, so we won't rely on it here
	  var crossOrigin = srcProtocol + urlInfo.host !== winLoc.protocol + winLoc.host;

	  return crossOrigin;
	};


/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var window = __webpack_require__(255)
	var isFunction = __webpack_require__(288)
	var parseHeaders = __webpack_require__(289)
	var xtend = __webpack_require__(292)

	module.exports = createXHR
	createXHR.XMLHttpRequest = window.XMLHttpRequest || noop
	createXHR.XDomainRequest = "withCredentials" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window.XDomainRequest

	forEachArray(["get", "put", "post", "patch", "head", "delete"], function(method) {
	    createXHR[method === "delete" ? "del" : method] = function(uri, options, callback) {
	        options = initParams(uri, options, callback)
	        options.method = method.toUpperCase()
	        return _createXHR(options)
	    }
	})

	function forEachArray(array, iterator) {
	    for (var i = 0; i < array.length; i++) {
	        iterator(array[i])
	    }
	}

	function isEmpty(obj){
	    for(var i in obj){
	        if(obj.hasOwnProperty(i)) return false
	    }
	    return true
	}

	function initParams(uri, options, callback) {
	    var params = uri

	    if (isFunction(options)) {
	        callback = options
	        if (typeof uri === "string") {
	            params = {uri:uri}
	        }
	    } else {
	        params = xtend(options, {uri: uri})
	    }

	    params.callback = callback
	    return params
	}

	function createXHR(uri, options, callback) {
	    options = initParams(uri, options, callback)
	    return _createXHR(options)
	}

	function _createXHR(options) {
	    if(typeof options.callback === "undefined"){
	        throw new Error("callback argument missing")
	    }

	    var called = false
	    var callback = function cbOnce(err, response, body){
	        if(!called){
	            called = true
	            options.callback(err, response, body)
	        }
	    }

	    function readystatechange() {
	        if (xhr.readyState === 4) {
	            loadFunc()
	        }
	    }

	    function getBody() {
	        // Chrome with requestType=blob throws errors arround when even testing access to responseText
	        var body = undefined

	        if (xhr.response) {
	            body = xhr.response
	        } else {
	            body = xhr.responseText || getXml(xhr)
	        }

	        if (isJson) {
	            try {
	                body = JSON.parse(body)
	            } catch (e) {}
	        }

	        return body
	    }

	    var failureResponse = {
	                body: undefined,
	                headers: {},
	                statusCode: 0,
	                method: method,
	                url: uri,
	                rawRequest: xhr
	            }

	    function errorFunc(evt) {
	        clearTimeout(timeoutTimer)
	        if(!(evt instanceof Error)){
	            evt = new Error("" + (evt || "Unknown XMLHttpRequest Error") )
	        }
	        evt.statusCode = 0
	        return callback(evt, failureResponse)
	    }

	    // will load the data & process the response in a special response object
	    function loadFunc() {
	        if (aborted) return
	        var status
	        clearTimeout(timeoutTimer)
	        if(options.useXDR && xhr.status===undefined) {
	            //IE8 CORS GET successful response doesn't have a status field, but body is fine
	            status = 200
	        } else {
	            status = (xhr.status === 1223 ? 204 : xhr.status)
	        }
	        var response = failureResponse
	        var err = null

	        if (status !== 0){
	            response = {
	                body: getBody(),
	                statusCode: status,
	                method: method,
	                headers: {},
	                url: uri,
	                rawRequest: xhr
	            }
	            if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE
	                response.headers = parseHeaders(xhr.getAllResponseHeaders())
	            }
	        } else {
	            err = new Error("Internal XMLHttpRequest Error")
	        }
	        return callback(err, response, response.body)
	    }

	    var xhr = options.xhr || null

	    if (!xhr) {
	        if (options.cors || options.useXDR) {
	            xhr = new createXHR.XDomainRequest()
	        }else{
	            xhr = new createXHR.XMLHttpRequest()
	        }
	    }

	    var key
	    var aborted
	    var uri = xhr.url = options.uri || options.url
	    var method = xhr.method = options.method || "GET"
	    var body = options.body || options.data || null
	    var headers = xhr.headers = options.headers || {}
	    var sync = !!options.sync
	    var isJson = false
	    var timeoutTimer

	    if ("json" in options) {
	        isJson = true
	        headers["accept"] || headers["Accept"] || (headers["Accept"] = "application/json") //Don't override existing accept header declared by user
	        if (method !== "GET" && method !== "HEAD") {
	            headers["content-type"] || headers["Content-Type"] || (headers["Content-Type"] = "application/json") //Don't override existing accept header declared by user
	            body = JSON.stringify(options.json)
	        }
	    }

	    xhr.onreadystatechange = readystatechange
	    xhr.onload = loadFunc
	    xhr.onerror = errorFunc
	    // IE9 must have onprogress be set to a unique function.
	    xhr.onprogress = function () {
	        // IE must die
	    }
	    xhr.ontimeout = errorFunc
	    xhr.open(method, uri, !sync, options.username, options.password)
	    //has to be after open
	    if(!sync) {
	        xhr.withCredentials = !!options.withCredentials
	    }
	    // Cannot set timeout with sync request
	    // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly
	    // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent
	    if (!sync && options.timeout > 0 ) {
	        timeoutTimer = setTimeout(function(){
	            aborted=true//IE9 may still call readystatechange
	            xhr.abort("timeout")
	            var e = new Error("XMLHttpRequest timeout")
	            e.code = "ETIMEDOUT"
	            errorFunc(e)
	        }, options.timeout )
	    }

	    if (xhr.setRequestHeader) {
	        for(key in headers){
	            if(headers.hasOwnProperty(key)){
	                xhr.setRequestHeader(key, headers[key])
	            }
	        }
	    } else if (options.headers && !isEmpty(options.headers)) {
	        throw new Error("Headers cannot be set on an XDomainRequest object")
	    }

	    if ("responseType" in options) {
	        xhr.responseType = options.responseType
	    }

	    if ("beforeSend" in options &&
	        typeof options.beforeSend === "function"
	    ) {
	        options.beforeSend(xhr)
	    }

	    xhr.send(body)

	    return xhr


	}

	function getXml(xhr) {
	    if (xhr.responseType === "document") {
	        return xhr.responseXML
	    }
	    var firefoxBugTakenEffect = xhr.status === 204 && xhr.responseXML && xhr.responseXML.documentElement.nodeName === "parsererror"
	    if (xhr.responseType === "" && !firefoxBugTakenEffect) {
	        return xhr.responseXML
	    }

	    return null
	}

	function noop() {}


/***/ },
/* 288 */
/***/ function(module, exports) {

	module.exports = isFunction

	var toString = Object.prototype.toString

	function isFunction (fn) {
	  var string = toString.call(fn)
	  return string === '[object Function]' ||
	    (typeof fn === 'function' && string !== '[object RegExp]') ||
	    (typeof window !== 'undefined' &&
	     // IE8 and below
	     (fn === window.setTimeout ||
	      fn === window.alert ||
	      fn === window.confirm ||
	      fn === window.prompt))
	};


/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	var trim = __webpack_require__(290)
	  , forEach = __webpack_require__(291)
	  , isArray = function(arg) {
	      return Object.prototype.toString.call(arg) === '[object Array]';
	    }

	module.exports = function (headers) {
	  if (!headers)
	    return {}

	  var result = {}

	  forEach(
	      trim(headers).split('\n')
	    , function (row) {
	        var index = row.indexOf(':')
	          , key = trim(row.slice(0, index)).toLowerCase()
	          , value = trim(row.slice(index + 1))

	        if (typeof(result[key]) === 'undefined') {
	          result[key] = value
	        } else if (isArray(result[key])) {
	          result[key].push(value)
	        } else {
	          result[key] = [ result[key], value ]
	        }
	      }
	  )

	  return result
	}

/***/ },
/* 290 */
/***/ function(module, exports) {

	
	exports = module.exports = trim;

	function trim(str){
	  return str.replace(/^\s*|\s*$/g, '');
	}

	exports.left = function(str){
	  return str.replace(/^\s*/, '');
	};

	exports.right = function(str){
	  return str.replace(/\s*$/, '');
	};


/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(288)

	module.exports = forEach

	var toString = Object.prototype.toString
	var hasOwnProperty = Object.prototype.hasOwnProperty

	function forEach(list, iterator, context) {
	    if (!isFunction(iterator)) {
	        throw new TypeError('iterator must be a function')
	    }

	    if (arguments.length < 3) {
	        context = this
	    }
	    
	    if (toString.call(list) === '[object Array]')
	        forEachArray(list, iterator, context)
	    else if (typeof list === 'string')
	        forEachString(list, iterator, context)
	    else
	        forEachObject(list, iterator, context)
	}

	function forEachArray(array, iterator, context) {
	    for (var i = 0, len = array.length; i < len; i++) {
	        if (hasOwnProperty.call(array, i)) {
	            iterator.call(context, array[i], i, array)
	        }
	    }
	}

	function forEachString(string, iterator, context) {
	    for (var i = 0, len = string.length; i < len; i++) {
	        // no such thing as a sparse string.
	        iterator.call(context, string.charAt(i), i, string)
	    }
	}

	function forEachObject(object, iterator, context) {
	    for (var k in object) {
	        if (hasOwnProperty.call(object, k)) {
	            iterator.call(context, object[k], k, object)
	        }
	    }
	}


/***/ },
/* 292 */
/***/ function(module, exports) {

	module.exports = extend

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	function extend() {
	    var target = {}

	    for (var i = 0; i < arguments.length; i++) {
	        var source = arguments[i]

	        for (var key in source) {
	            if (hasOwnProperty.call(source, key)) {
	                target[key] = source[key]
	            }
	        }
	    }

	    return target
	}


/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _browser = __webpack_require__(262);

	var browser = _interopRequireWildcard(_browser);

	var _document = __webpack_require__(256);

	var _document2 = _interopRequireDefault(_document);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /**
	                                                                                                                                                           * @file html-track-element-list.js
	                                                                                                                                                           */

	/**
	 * The current list of {@link HtmlTrackElement}s.
	 */
	var HtmlTrackElementList = function () {

	  /**
	   * Create an instance of this class.
	   *
	   * @param {HtmlTrackElement[]} [tracks=[]]
	   *        A list of `HtmlTrackElement` to instantiate the list with.
	   */
	  function HtmlTrackElementList() {
	    var trackElements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

	    _classCallCheck(this, HtmlTrackElementList);

	    var list = this; // eslint-disable-line

	    if (browser.IS_IE8) {
	      list = _document2['default'].createElement('custom');

	      for (var prop in HtmlTrackElementList.prototype) {
	        if (prop !== 'constructor') {
	          list[prop] = HtmlTrackElementList.prototype[prop];
	        }
	      }
	    }

	    list.trackElements_ = [];

	    /**
	     * @member {number} length
	     *         The current number of `Track`s in the this Trackist.
	     */
	    Object.defineProperty(list, 'length', {
	      get: function get() {
	        return this.trackElements_.length;
	      }
	    });

	    for (var i = 0, length = trackElements.length; i < length; i++) {
	      list.addTrackElement_(trackElements[i]);
	    }

	    if (browser.IS_IE8) {
	      return list;
	    }
	  }

	  /**
	   * Add an {@link HtmlTrackElement} to the `HtmlTrackElementList`
	   *
	   * @param {HtmlTrackElement} trackElement
	   *        The track element to add to the list.
	   *
	   * @private
	   */


	  HtmlTrackElementList.prototype.addTrackElement_ = function addTrackElement_(trackElement) {
	    var index = this.trackElements_.length;

	    if (!('' + index in this)) {
	      Object.defineProperty(this, index, {
	        get: function get() {
	          return this.trackElements_[index];
	        }
	      });
	    }

	    // Do not add duplicate elements
	    if (this.trackElements_.indexOf(trackElement) === -1) {
	      this.trackElements_.push(trackElement);
	    }
	  };

	  /**
	   * Get an {@link HtmlTrackElement} from the `HtmlTrackElementList` given an
	   * {@link TextTrack}.
	   *
	   * @param {TextTrack} track
	   *        The track associated with a track element.
	   *
	   * @return {HtmlTrackElement|undefined}
	   *         The track element that was found or undefined.
	   *
	   * @private
	   */


	  HtmlTrackElementList.prototype.getTrackElementByTrack_ = function getTrackElementByTrack_(track) {
	    var trackElement_ = void 0;

	    for (var i = 0, length = this.trackElements_.length; i < length; i++) {
	      if (track === this.trackElements_[i].track) {
	        trackElement_ = this.trackElements_[i];

	        break;
	      }
	    }

	    return trackElement_;
	  };

	  /**
	   * Remove a {@link HtmlTrackElement} from the `HtmlTrackElementList`
	   *
	   * @param {HtmlTrackElement} trackElement
	   *        The track element to remove from the list.
	   *
	   * @private
	   */


	  HtmlTrackElementList.prototype.removeTrackElement_ = function removeTrackElement_(trackElement) {
	    for (var i = 0, length = this.trackElements_.length; i < length; i++) {
	      if (trackElement === this.trackElements_[i]) {
	        this.trackElements_.splice(i, 1);

	        break;
	      }
	    }
	  };

	  return HtmlTrackElementList;
	}();

	exports['default'] = HtmlTrackElementList;


/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _trackList = __webpack_require__(295);

	var _trackList2 = _interopRequireDefault(_trackList);

	var _fn = __webpack_require__(268);

	var Fn = _interopRequireWildcard(_fn);

	var _browser = __webpack_require__(262);

	var browser = _interopRequireWildcard(_browser);

	var _document = __webpack_require__(256);

	var _document2 = _interopRequireDefault(_document);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file text-track-list.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The current list of {@link TextTrack} for a media file.
	 *
	 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttracklist}
	 * @extends TrackList
	 */
	var TextTrackList = function (_TrackList) {
	  _inherits(TextTrackList, _TrackList);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {TextTrack[]} [tracks=[]]
	   *        A list of `TextTrack` to instantiate the list with.
	   */
	  function TextTrackList() {
	    var _this, _ret;

	    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

	    _classCallCheck(this, TextTrackList);

	    var list = void 0;

	    // IE8 forces us to implement inheritance ourselves
	    // as it does not support Object.defineProperty properly
	    if (browser.IS_IE8) {
	      list = _document2['default'].createElement('custom');
	      for (var prop in _trackList2['default'].prototype) {
	        if (prop !== 'constructor') {
	          list[prop] = _trackList2['default'].prototype[prop];
	        }
	      }
	      for (var _prop in TextTrackList.prototype) {
	        if (_prop !== 'constructor') {
	          list[_prop] = TextTrackList.prototype[_prop];
	        }
	      }
	    }

	    list = (_this = _possibleConstructorReturn(this, _TrackList.call(this, tracks, list)), _this);
	    return _ret = list, _possibleConstructorReturn(_this, _ret);
	  }

	  /**
	   * Add a {@link TextTrack} to the `TextTrackList`
	   *
	   * @param {TextTrack} track
	   *        The text track to add to the list.
	   *
	   * @fires TrackList#addtrack
	   * @private
	   */


	  TextTrackList.prototype.addTrack_ = function addTrack_(track) {
	    _TrackList.prototype.addTrack_.call(this, track);

	    /**
	     * @listens TextTrack#modechange
	     * @fires TrackList#change
	     */
	    track.addEventListener('modechange', Fn.bind(this, function () {
	      this.trigger('change');
	    }));
	  };

	  return TextTrackList;
	}(_trackList2['default']);

	exports['default'] = TextTrackList;


/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _eventTarget = __webpack_require__(271);

	var _eventTarget2 = _interopRequireDefault(_eventTarget);

	var _browser = __webpack_require__(262);

	var browser = _interopRequireWildcard(_browser);

	var _document = __webpack_require__(256);

	var _document2 = _interopRequireDefault(_document);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file track-list.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Common functionaliy between {@link TextTrackList}, {@link AudioTrackList}, and
	 * {@link VideoTrackList}
	 *
	 * @extends EventTarget
	 */
	var TrackList = function (_EventTarget) {
	  _inherits(TrackList, _EventTarget);

	  /**
	   * Create an instance of this class
	   *
	   * @param {Track[]} tracks
	   *        A list of tracks to initialize the list with.
	   *
	   * @param {Object} [list]
	   *        The child object with inheritance done manually for ie8.
	   *
	   * @abstract
	   */
	  function TrackList() {
	    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

	    var _ret;

	    var list = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

	    _classCallCheck(this, TrackList);

	    var _this = _possibleConstructorReturn(this, _EventTarget.call(this));

	    if (!list) {
	      list = _this; // eslint-disable-line
	      if (browser.IS_IE8) {
	        list = _document2['default'].createElement('custom');
	        for (var prop in TrackList.prototype) {
	          if (prop !== 'constructor') {
	            list[prop] = TrackList.prototype[prop];
	          }
	        }
	      }
	    }

	    list.tracks_ = [];

	    /**
	     * @member {number} length
	     *         The current number of `Track`s in the this Trackist.
	     */
	    Object.defineProperty(list, 'length', {
	      get: function get() {
	        return this.tracks_.length;
	      }
	    });

	    for (var i = 0; i < tracks.length; i++) {
	      list.addTrack_(tracks[i]);
	    }

	    // must return the object, as for ie8 it will not be this
	    // but a reference to a document object
	    return _ret = list, _possibleConstructorReturn(_this, _ret);
	  }

	  /**
	   * Add a {@link Track} to the `TrackList`
	   *
	   * @param {Track} track
	   *        The audio, video, or text track to add to the list.
	   *
	   * @fires TrackList#addtrack
	   * @private
	   */


	  TrackList.prototype.addTrack_ = function addTrack_(track) {
	    var index = this.tracks_.length;

	    if (!('' + index in this)) {
	      Object.defineProperty(this, index, {
	        get: function get() {
	          return this.tracks_[index];
	        }
	      });
	    }

	    // Do not add duplicate tracks
	    if (this.tracks_.indexOf(track) === -1) {
	      this.tracks_.push(track);
	      /**
	       * Triggered when a track is added to a track list.
	       *
	       * @event TrackList#addtrack
	       * @type {EventTarget~Event}
	       * @property {Track} track
	       *           A reference to track that was added.
	       */
	      this.trigger({
	        track: track,
	        type: 'addtrack'
	      });
	    }
	  };

	  /**
	   * Remove a {@link Track} from the `TrackList`
	   *
	   * @param {Track} track
	   *        The audio, video, or text track to remove from the list.
	   *
	   * @fires TrackList#removetrack
	   * @private
	   */


	  TrackList.prototype.removeTrack_ = function removeTrack_(rtrack) {
	    var track = void 0;

	    for (var i = 0, l = this.length; i < l; i++) {
	      if (this[i] === rtrack) {
	        track = this[i];
	        if (track.off) {
	          track.off();
	        }

	        this.tracks_.splice(i, 1);

	        break;
	      }
	    }

	    if (!track) {
	      return;
	    }

	    /**
	     * Triggered when a track is removed from track list.
	     *
	     * @event TrackList#removetrack
	     * @type {EventTarget~Event}
	     * @property {Track} track
	     *           A reference to track that was removed.
	     */
	    this.trigger({
	      track: track,
	      type: 'removetrack'
	    });
	  };

	  /**
	   * Get a Track from the TrackList by a tracks id
	   *
	   * @param {String} id - the id of the track to get
	   * @method getTrackById
	   * @return {Track}
	   * @private
	   */


	  TrackList.prototype.getTrackById = function getTrackById(id) {
	    var result = null;

	    for (var i = 0, l = this.length; i < l; i++) {
	      var track = this[i];

	      if (track.id === id) {
	        result = track;
	        break;
	      }
	    }

	    return result;
	  };

	  return TrackList;
	}(_eventTarget2['default']);

	/**
	 * Triggered when a different track is selected/enabled.
	 *
	 * @event TrackList#change
	 * @type {EventTarget~Event}
	 */

	/**
	 * Events that can be called with on + eventName. See {@link EventHandler}.
	 *
	 * @property {Object} TrackList#allowedEvents_
	 * @private
	 */


	TrackList.prototype.allowedEvents_ = {
	  change: 'change',
	  addtrack: 'addtrack',
	  removetrack: 'removetrack'
	};

	// emulate attribute EventHandler support to allow for feature detection
	for (var event in TrackList.prototype.allowedEvents_) {
	  TrackList.prototype['on' + event] = null;
	}

	exports['default'] = TrackList;


/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _trackList = __webpack_require__(295);

	var _trackList2 = _interopRequireDefault(_trackList);

	var _browser = __webpack_require__(262);

	var browser = _interopRequireWildcard(_browser);

	var _document = __webpack_require__(256);

	var _document2 = _interopRequireDefault(_document);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file video-track-list.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Un-select all other {@link VideoTrack}s that are selected.
	 *
	 * @param {VideoTrackList} list
	 *        list to work on
	 *
	 * @param {VideoTrack} track
	 *        The track to skip
	 *
	 * @private
	 */
	var disableOthers = function disableOthers(list, track) {
	  for (var i = 0; i < list.length; i++) {
	    if (track.id === list[i].id) {
	      continue;
	    }
	    // another video track is enabled, disable it
	    list[i].selected = false;
	  }
	};

	/**
	 * The current list of {@link VideoTrack} for a video.
	 *
	 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist}
	 * @extends TrackList
	 */

	var VideoTrackList = function (_TrackList) {
	  _inherits(VideoTrackList, _TrackList);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {VideoTrack[]} [tracks=[]]
	   *        A list of `VideoTrack` to instantiate the list with.
	   */
	  function VideoTrackList() {
	    var _this, _ret;

	    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

	    _classCallCheck(this, VideoTrackList);

	    var list = void 0;

	    // make sure only 1 track is enabled
	    // sorted from last index to first index
	    for (var i = tracks.length - 1; i >= 0; i--) {
	      if (tracks[i].selected) {
	        disableOthers(tracks, tracks[i]);
	        break;
	      }
	    }

	    // IE8 forces us to implement inheritance ourselves
	    // as it does not support Object.defineProperty properly
	    if (browser.IS_IE8) {
	      list = _document2['default'].createElement('custom');
	      for (var prop in _trackList2['default'].prototype) {
	        if (prop !== 'constructor') {
	          list[prop] = _trackList2['default'].prototype[prop];
	        }
	      }
	      for (var _prop in VideoTrackList.prototype) {
	        if (_prop !== 'constructor') {
	          list[_prop] = VideoTrackList.prototype[_prop];
	        }
	      }
	    }

	    list = (_this = _possibleConstructorReturn(this, _TrackList.call(this, tracks, list)), _this);
	    list.changing_ = false;

	    /**
	     * @member {number} VideoTrackList#selectedIndex
	     *         The current index of the selected {@link VideoTrack`}.
	     */
	    Object.defineProperty(list, 'selectedIndex', {
	      get: function get() {
	        for (var _i = 0; _i < this.length; _i++) {
	          if (this[_i].selected) {
	            return _i;
	          }
	        }
	        return -1;
	      },
	      set: function set() {}
	    });

	    return _ret = list, _possibleConstructorReturn(_this, _ret);
	  }

	  /**
	   * Add a {@link VideoTrack} to the `VideoTrackList`.
	   *
	   * @param {VideoTrack} track
	   *        The VideoTrack to add to the list
	   *
	   * @fires TrackList#addtrack
	   * @private
	   */


	  VideoTrackList.prototype.addTrack_ = function addTrack_(track) {
	    var _this2 = this;

	    if (track.selected) {
	      disableOthers(this, track);
	    }

	    _TrackList.prototype.addTrack_.call(this, track);
	    // native tracks don't have this
	    if (!track.addEventListener) {
	      return;
	    }

	    /**
	     * @listens VideoTrack#selectedchange
	     * @fires TrackList#change
	     */
	    track.addEventListener('selectedchange', function () {
	      if (_this2.changing_) {
	        return;
	      }
	      _this2.changing_ = true;
	      disableOthers(_this2, track);
	      _this2.changing_ = false;
	      _this2.trigger('change');
	    });
	  };

	  /**
	   * Add a {@link VideoTrack} to the `VideoTrackList`.
	   *
	   * @param {VideoTrack} track
	   *        The VideoTrack to add to the list
	   *
	   * @fires TrackList#addtrack
	   */


	  VideoTrackList.prototype.addTrack = function addTrack(track) {
	    this.addTrack_(track);
	  };

	  /**
	   * Remove a {@link VideoTrack} to the `VideoTrackList`.
	   *
	   * @param {VideoTrack} track
	   *        The VideoTrack to remove from the list.
	   *
	   * @fires TrackList#removetrack
	   */


	  VideoTrackList.prototype.removeTrack = function removeTrack(track) {
	    _TrackList.prototype.removeTrack_.call(this, track);
	  };

	  return VideoTrackList;
	}(_trackList2['default']);

	exports['default'] = VideoTrackList;


/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _trackList = __webpack_require__(295);

	var _trackList2 = _interopRequireDefault(_trackList);

	var _browser = __webpack_require__(262);

	var browser = _interopRequireWildcard(_browser);

	var _document = __webpack_require__(256);

	var _document2 = _interopRequireDefault(_document);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file audio-track-list.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Anywhere we call this function we diverge from the spec
	 * as we only support one enabled audiotrack at a time
	 *
	 * @param {AudioTrackList} list
	 *        list to work on
	 *
	 * @param {AudioTrack} track
	 *        The track to skip
	 *
	 * @private
	 */
	var disableOthers = function disableOthers(list, track) {
	  for (var i = 0; i < list.length; i++) {
	    if (track.id === list[i].id) {
	      continue;
	    }
	    // another audio track is enabled, disable it
	    list[i].enabled = false;
	  }
	};

	/**
	 * The current list of {@link AudioTrack} for a media file.
	 *
	 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist}
	 * @extends TrackList
	 */

	var AudioTrackList = function (_TrackList) {
	  _inherits(AudioTrackList, _TrackList);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {AudioTrack[]} [tracks=[]]
	   *        A list of `AudioTrack` to instantiate the list with.
	   */
	  function AudioTrackList() {
	    var _this, _ret;

	    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

	    _classCallCheck(this, AudioTrackList);

	    var list = void 0;

	    // make sure only 1 track is enabled
	    // sorted from last index to first index
	    for (var i = tracks.length - 1; i >= 0; i--) {
	      if (tracks[i].enabled) {
	        disableOthers(tracks, tracks[i]);
	        break;
	      }
	    }

	    // IE8 forces us to implement inheritance ourselves
	    // as it does not support Object.defineProperty properly
	    if (browser.IS_IE8) {
	      list = _document2['default'].createElement('custom');
	      for (var prop in _trackList2['default'].prototype) {
	        if (prop !== 'constructor') {
	          list[prop] = _trackList2['default'].prototype[prop];
	        }
	      }
	      for (var _prop in AudioTrackList.prototype) {
	        if (_prop !== 'constructor') {
	          list[_prop] = AudioTrackList.prototype[_prop];
	        }
	      }
	    }

	    list = (_this = _possibleConstructorReturn(this, _TrackList.call(this, tracks, list)), _this);
	    list.changing_ = false;

	    return _ret = list, _possibleConstructorReturn(_this, _ret);
	  }

	  /**
	   * Add an {@link AudioTrack} to the `AudioTrackList`.
	   *
	   * @param {AudioTrack} track
	   *        The AudioTrack to add to the list
	   *
	   * @fires Track#addtrack
	   * @private
	   */


	  AudioTrackList.prototype.addTrack_ = function addTrack_(track) {
	    var _this2 = this;

	    if (track.enabled) {
	      disableOthers(this, track);
	    }

	    _TrackList.prototype.addTrack_.call(this, track);
	    // native tracks don't have this
	    if (!track.addEventListener) {
	      return;
	    }

	    /**
	     * @listens AudioTrack#enabledchange
	     * @fires TrackList#change
	     */
	    track.addEventListener('enabledchange', function () {
	      // when we are disabling other tracks (since we don't support
	      // more than one track at a time) we will set changing_
	      // to true so that we don't trigger additional change events
	      if (_this2.changing_) {
	        return;
	      }
	      _this2.changing_ = true;
	      disableOthers(_this2, track);
	      _this2.changing_ = false;
	      _this2.trigger('change');
	    });
	  };

	  /**
	   * Add an {@link AudioTrack} to the `AudioTrackList`.
	   *
	   * @param {AudioTrack} track
	   *        The AudioTrack to add to the list
	   *
	   * @fires Track#addtrack
	   */


	  AudioTrackList.prototype.addTrack = function addTrack(track) {
	    this.addTrack_(track);
	  };

	  /**
	   * Remove an {@link AudioTrack} from the `AudioTrackList`.
	   *
	   * @param {AudioTrack} track
	   *        The AudioTrack to remove from the list
	   *
	   * @fires Track#removetrack
	   */


	  AudioTrackList.prototype.removeTrack = function removeTrack(track) {
	    _TrackList.prototype.removeTrack_.call(this, track);
	  };

	  return AudioTrackList;
	}(_trackList2['default']);

	exports['default'] = AudioTrackList;


/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _tech = __webpack_require__(280);

	var _tech2 = _interopRequireDefault(_tech);

	var _toTitleCase = __webpack_require__(269);

	var _toTitleCase2 = _interopRequireDefault(_toTitleCase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file loader.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The `MediaLoader` is the `Component` that decides which playback technology to load
	 * when a player is initialized.
	 *
	 * @extends Component
	 */
	var MediaLoader = function (_Component) {
	  _inherits(MediaLoader, _Component);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should attach to.
	   *
	   * @param {Object} [options]
	   *        The key/value stroe of player options.
	   *
	   * @param {Component~ReadyCallback} [ready]
	   *        The function that is run when this component is ready.
	   */
	  function MediaLoader(player, options, ready) {
	    _classCallCheck(this, MediaLoader);

	    // If there are no sources when the player is initialized,
	    // load the first supported playback technology.

	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options, ready));

	    if (!options.playerOptions.sources || options.playerOptions.sources.length === 0) {
	      for (var i = 0, j = options.playerOptions.techOrder; i < j.length; i++) {
	        var techName = (0, _toTitleCase2['default'])(j[i]);
	        var tech = _tech2['default'].getTech(techName);

	        // Support old behavior of techs being registered as components.
	        // Remove once that deprecated behavior is removed.
	        if (!techName) {
	          tech = _component2['default'].getComponent(techName);
	        }

	        // Check if the browser supports this technology
	        if (tech && tech.isSupported()) {
	          player.loadTech_(techName);
	          break;
	        }
	      }
	    } else {
	      // Loop through playback technologies (HTML5, Flash) and check for support.
	      // Then load the best source.
	      // A few assumptions here:
	      //   All playback technologies respect preload false.
	      player.src(options.playerOptions.sources);
	    }
	    return _this;
	  }

	  return MediaLoader;
	}(_component2['default']);

	_component2['default'].registerComponent('MediaLoader', MediaLoader);
	exports['default'] = MediaLoader;


/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _tech = __webpack_require__(280);

	var _tech2 = _interopRequireDefault(_tech);

	var _dom = __webpack_require__(259);

	var Dom = _interopRequireWildcard(_dom);

	var _url = __webpack_require__(286);

	var Url = _interopRequireWildcard(_url);

	var _timeRanges = __webpack_require__(273);

	var _flashRtmp = __webpack_require__(300);

	var _flashRtmp2 = _interopRequireDefault(_flashRtmp);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _window = __webpack_require__(255);

	var _window2 = _interopRequireDefault(_window);

	var _obj = __webpack_require__(263);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file flash.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * VideoJS-SWF - Custom Flash Player with HTML5-ish API
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * https://github.com/zencoder/video-js-swf
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Not using setupTriggers. Using global onEvent func to distribute events
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var navigator = _window2['default'].navigator;

	/**
	 * Flash Media Controller - Wrapper for Flash Media API
	 *
	 * @mixes FlashRtmpDecorator
	 * @mixes Tech~SouceHandlerAdditions
	 * @extends Tech
	 */

	var Flash = function (_Tech) {
	  _inherits(Flash, _Tech);

	  /**
	   * Create an instance of this Tech.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   *
	   * @param {Component~ReadyCallback} ready
	   *        Callback function to call when the `Flash` Tech is ready.
	   */
	  function Flash(options, ready) {
	    _classCallCheck(this, Flash);

	    // Set the source when ready
	    var _this = _possibleConstructorReturn(this, _Tech.call(this, options, ready));

	    if (options.source) {
	      _this.ready(function () {
	        this.setSource(options.source);
	      }, true);
	    }

	    // Having issues with Flash reloading on certain page actions (hide/resize/fullscreen) in certain browsers
	    // This allows resetting the playhead when we catch the reload
	    if (options.startTime) {
	      _this.ready(function () {
	        this.load();
	        this.play();
	        this.currentTime(options.startTime);
	      }, true);
	    }

	    // Add global window functions that the swf expects
	    // A 4.x workflow we weren't able to solve for in 5.0
	    // because of the need to hard code these functions
	    // into the swf for security reasons
	    _window2['default'].videojs = _window2['default'].videojs || {};
	    _window2['default'].videojs.Flash = _window2['default'].videojs.Flash || {};
	    _window2['default'].videojs.Flash.onReady = Flash.onReady;
	    _window2['default'].videojs.Flash.onEvent = Flash.onEvent;
	    _window2['default'].videojs.Flash.onError = Flash.onError;

	    _this.on('seeked', function () {
	      this.lastSeekTarget_ = undefined;
	    });

	    return _this;
	  }

	  /**
	   * Create the `Flash` Tech's DOM element.
	   *
	   * @return {Element}
	   *         The element that gets created.
	   */


	  Flash.prototype.createEl = function createEl() {
	    var options = this.options_;

	    // If video.js is hosted locally you should also set the location
	    // for the hosted swf, which should be relative to the page (not video.js)
	    // Otherwise this adds a CDN url.
	    // The CDN also auto-adds a swf URL for that specific version.
	    if (!options.swf) {
	      var ver = '5.1.0';

	      options.swf = '//vjs.zencdn.net/swf/' + ver + '/video-js.swf';
	    }

	    // Generate ID for swf object
	    var objId = options.techId;

	    // Merge default flashvars with ones passed in to init
	    var flashVars = (0, _obj.assign)({

	      // SWF Callback Functions
	      readyFunction: 'videojs.Flash.onReady',
	      eventProxyFunction: 'videojs.Flash.onEvent',
	      errorEventProxyFunction: 'videojs.Flash.onError',

	      // Player Settings
	      autoplay: options.autoplay,
	      preload: options.preload,
	      loop: options.loop,
	      muted: options.muted

	    }, options.flashVars);

	    // Merge default parames with ones passed in
	    var params = (0, _obj.assign)({
	      // Opaque is needed to overlay controls, but can affect playback performance
	      wmode: 'opaque',
	      // Using bgcolor prevents a white flash when the object is loading
	      bgcolor: '#000000'
	    }, options.params);

	    // Merge default attributes with ones passed in
	    var attributes = (0, _obj.assign)({
	      // Both ID and Name needed or swf to identify itself
	      id: objId,
	      name: objId,
	      'class': 'vjs-tech'
	    }, options.attributes);

	    this.el_ = Flash.embed(options.swf, flashVars, params, attributes);
	    this.el_.tech = this;

	    return this.el_;
	  };

	  /**
	   * Called by {@link Player#play} to play using the `Flash` `Tech`.
	   */


	  Flash.prototype.play = function play() {
	    if (this.ended()) {
	      this.setCurrentTime(0);
	    }
	    this.el_.vjs_play();
	  };

	  /**
	   * Called by {@link Player#pause} to pause using the `Flash` `Tech`.
	   */


	  Flash.prototype.pause = function pause() {
	    this.el_.vjs_pause();
	  };

	  /**
	   * A getter/setter for the `Flash` Tech's source object.
	   * > Note: Please use {@link Flash#setSource}
	   *
	   * @param {Tech~SourceObject} [src]
	   *        The source object you want to set on the `Flash` techs.
	   *
	   * @return {Tech~SourceObject|undefined}
	   *         - The current source object when a source is not passed in.
	   *         - undefined when setting
	   *
	   * @deprecated Since version 5.
	   */


	  Flash.prototype.src = function src(_src) {
	    if (_src === undefined) {
	      return this.currentSrc();
	    }

	    // Setting src through `src` not `setSrc` will be deprecated
	    return this.setSrc(_src);
	  };

	  /**
	   * A getter/setter for the `Flash` Tech's source object.
	   *
	   * @param {Tech~SourceObject} [src]
	   *        The source object you want to set on the `Flash` techs.
	   *
	   * @return {Tech~SourceObject|undefined}
	   *         - The current source object when a source is not passed in.
	   *         - undefined when setting
	   */


	  Flash.prototype.setSrc = function setSrc(src) {
	    var _this2 = this;

	    // Make sure source URL is absolute.
	    src = Url.getAbsoluteURL(src);
	    this.el_.vjs_src(src);

	    // Currently the SWF doesn't autoplay if you load a source later.
	    // e.g. Load player w/ no source, wait 2s, set src.
	    if (this.autoplay()) {
	      this.setTimeout(function () {
	        return _this2.play();
	      }, 0);
	    }
	  };

	  /**
	   * Indicates whether the media is currently seeking to a new position or not.
	   *
	   * @return {boolean}
	   *         - True if seeking to a new position
	   *         - False otherwise
	   */


	  Flash.prototype.seeking = function seeking() {
	    return this.lastSeekTarget_ !== undefined;
	  };

	  /**
	   * Returns the current time in seconds that the media is at in playback.
	   *
	   * @param {number} time
	   *        Current playtime of the media in seconds.
	   */


	  Flash.prototype.setCurrentTime = function setCurrentTime(time) {
	    var seekable = this.seekable();

	    if (seekable.length) {
	      // clamp to the current seekable range
	      time = time > seekable.start(0) ? time : seekable.start(0);
	      time = time < seekable.end(seekable.length - 1) ? time : seekable.end(seekable.length - 1);

	      this.lastSeekTarget_ = time;
	      this.trigger('seeking');
	      this.el_.vjs_setProperty('currentTime', time);
	      _Tech.prototype.setCurrentTime.call(this);
	    }
	  };

	  /**
	   * Get the current playback time in seconds
	   *
	   * @return {number}
	   *         The current time of playback in seconds.
	   */


	  Flash.prototype.currentTime = function currentTime() {
	    // when seeking make the reported time keep up with the requested time
	    // by reading the time we're seeking to
	    if (this.seeking()) {
	      return this.lastSeekTarget_ || 0;
	    }
	    return this.el_.vjs_getProperty('currentTime');
	  };

	  /**
	   * Get the current source
	   *
	   * @method currentSrc
	   * @return {Tech~SourceObject}
	   *         The current source
	   */


	  Flash.prototype.currentSrc = function currentSrc() {
	    if (this.currentSource_) {
	      return this.currentSource_.src;
	    }
	    return this.el_.vjs_getProperty('currentSrc');
	  };

	  /**
	   * Get the total duration of the current media.
	   *
	   * @return {number}
	   8          The total duration of the current media.
	   */


	  Flash.prototype.duration = function duration() {
	    if (this.readyState() === 0) {
	      return NaN;
	    }
	    var duration = this.el_.vjs_getProperty('duration');

	    return duration >= 0 ? duration : Infinity;
	  };

	  /**
	   * Load media into Tech.
	   */


	  Flash.prototype.load = function load() {
	    this.el_.vjs_load();
	  };

	  /**
	   * Get the poster image that was set on the tech.
	   */


	  Flash.prototype.poster = function poster() {
	    this.el_.vjs_getProperty('poster');
	  };

	  /**
	   * Poster images are not handled by the Flash tech so make this is a no-op.
	   */


	  Flash.prototype.setPoster = function setPoster() {};

	  /**
	   * Determine the time ranges that can be seeked to in the media.
	   *
	   * @return {TimeRange}
	   *         Returns the time ranges that can be seeked to.
	   */


	  Flash.prototype.seekable = function seekable() {
	    var duration = this.duration();

	    if (duration === 0) {
	      return (0, _timeRanges.createTimeRange)();
	    }
	    return (0, _timeRanges.createTimeRange)(0, duration);
	  };

	  /**
	   * Get and create a `TimeRange` object for buffering.
	   *
	   * @return {TimeRange}
	   *         The time range object that was created.
	   */


	  Flash.prototype.buffered = function buffered() {
	    var ranges = this.el_.vjs_getProperty('buffered');

	    if (ranges.length === 0) {
	      return (0, _timeRanges.createTimeRange)();
	    }
	    return (0, _timeRanges.createTimeRange)(ranges[0][0], ranges[0][1]);
	  };

	  /**
	   * Get fullscreen support -
	   *
	   * Flash does not allow fullscreen through javascript
	   * so this always returns false.
	   *
	   * @return {boolean}
	   *         The Flash tech does not support fullscreen, so it will always return false.
	   */


	  Flash.prototype.supportsFullScreen = function supportsFullScreen() {
	    // Flash does not allow fullscreen through javascript
	    return false;
	  };

	  /**
	   * Flash does not allow fullscreen through javascript
	   * so this always returns false.
	   *
	   * @return {boolean}
	   *         The Flash tech does not support fullscreen, so it will always return false.
	   */


	  Flash.prototype.enterFullScreen = function enterFullScreen() {
	    return false;
	  };

	  return Flash;
	}(_tech2['default']);

	// Create setters and getters for attributes


	var _api = Flash.prototype;
	var _readWrite = 'rtmpConnection,rtmpStream,preload,defaultPlaybackRate,playbackRate,autoplay,loop,mediaGroup,controller,controls,volume,muted,defaultMuted'.split(',');
	var _readOnly = 'networkState,readyState,initialTime,startOffsetTime,paused,ended,videoWidth,videoHeight'.split(',');

	function _createSetter(attr) {
	  var attrUpper = attr.charAt(0).toUpperCase() + attr.slice(1);

	  _api['set' + attrUpper] = function (val) {
	    return this.el_.vjs_setProperty(attr, val);
	  };
	}

	function _createGetter(attr) {
	  _api[attr] = function () {
	    return this.el_.vjs_getProperty(attr);
	  };
	}

	// Create getter and setters for all read/write attributes
	for (var i = 0; i < _readWrite.length; i++) {
	  _createGetter(_readWrite[i]);
	  _createSetter(_readWrite[i]);
	}

	// Create getters for read-only attributes
	for (var _i = 0; _i < _readOnly.length; _i++) {
	  _createGetter(_readOnly[_i]);
	}

	/** ------------------------------ Getters ------------------------------ **/
	/**
	 * Get the value of `rtmpConnection` from the swf.
	 *
	 * @method Flash#rtmpConnection
	 * @return {string}
	 *         The current value of `rtmpConnection` on the swf.
	 */

	/**
	 * Get the value of `rtmpStream` from the swf.
	 *
	 * @method Flash#rtmpStream
	 * @return {string}
	 *         The current value of `rtmpStream` on the swf.
	 */

	/**
	 * Get the value of `preload` from the swf. `preload` indicates
	 * what should download before the media is interacted with. It can have the following
	 * values:
	 * - none: nothing should be downloaded
	 * - metadata: poster and the first few frames of the media may be downloaded to get
	 *   media dimensions and other metadata
	 * - auto: allow the media and metadata for the media to be downloaded before
	 *    interaction
	 *
	 * @method Flash#preload
	 * @return {string}
	 *         The value of `preload` from the swf. Will be 'none', 'metadata',
	 *         or 'auto'.
	 */

	/**
	 * Get the value of `defaultPlaybackRate` from the swf.
	 *
	 * @method Flash#defaultPlaybackRate
	 * @return {number}
	 *         The current value of `defaultPlaybackRate` on the swf.
	 */

	/**
	 * Get the value of `playbackRate` from the swf. `playbackRate` indicates
	 * the rate at which the media is currently playing back. Examples:
	 *   - if playbackRate is set to 2, media will play twice as fast.
	 *   - if playbackRate is set to 0.5, media will play half as fast.
	 *
	 * @method Flash#playbackRate
	 * @return {number}
	 *         The value of `playbackRate` from the swf. A number indicating
	 *         the current playback speed of the media, where 1 is normal speed.
	 */

	/**
	 * Get the value of `autoplay` from the swf. `autoplay` indicates
	 * that the media should start to play as soon as the page is ready.
	 *
	 * @method Flash#autoplay
	 * @return {boolean}
	 *         - The value of `autoplay` from the swf.
	 *         - True indicates that the media ashould start as soon as the page loads.
	 *         - False indicates that the media should not start as soon as the page loads.
	 */

	/**
	 * Get the value of `loop` from the swf. `loop` indicates
	 * that the media should return to the start of the media and continue playing once
	 * it reaches the end.
	 *
	 * @method Flash#loop
	 * @return {boolean}
	 *         - The value of `loop` from the swf.
	 *         - True indicates that playback should seek back to start once
	 *           the end of a media is reached.
	 *         - False indicates that playback should not loop back to the start when the
	 *           end of the media is reached.
	 */

	/**
	 * Get the value of `mediaGroup` from the swf.
	 *
	 * @method Flash#mediaGroup
	 * @return {string}
	 *         The current value of `mediaGroup` on the swf.
	 */

	/**
	 * Get the value of `controller` from the swf.
	 *
	 * @method Flash#controller
	 * @return {string}
	 *         The current value of `controller` on the swf.
	 */

	/**
	 * Get the value of `controls` from the swf. `controls` indicates
	 * whether the native flash controls should be shown or hidden.
	 *
	 * @method Flash#controls
	 * @return {boolean}
	 *         - The value of `controls` from the swf.
	 *         - True indicates that native controls should be showing.
	 *         - False indicates that native controls should be hidden.
	 */

	/**
	 * Get the value of the `volume` from the swf. `volume` indicates the current
	 * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and
	 * so on.
	 *
	 * @method Flash#volume
	 * @return {number}
	 *         The volume percent as a decimal. Value will be between 0-1.
	 */

	/**
	 * Get the value of the `muted` from the swf. `muted` indicates the current
	 * audio level should be silent.
	 *
	 * @method Flash#muted
	 * @return {boolean}
	 *         - True if the audio should be set to silent
	 *         - False otherwise
	 */

	/**
	 * Get the value of `defaultMuted` from the swf. `defaultMuted` indicates
	 * whether the media should start muted or not. Only changes the default state of the
	 * media. `muted` and `defaultMuted` can have different values. `muted` indicates the
	 * current state.
	 *
	 * @method Flash#defaultMuted
	 * @return {boolean}
	 *         - The value of `defaultMuted` from the swf.
	 *         - True indicates that the media should start muted.
	 *         - False indicates that the media should not start muted.
	 */

	/**
	 * Get the value of `networkState` from the swf. `networkState` indicates
	 * the current network state. It returns an enumeration from the following list:
	 * - 0: NETWORK_EMPTY
	 * - 1: NEWORK_IDLE
	 * - 2: NETWORK_LOADING
	 * - 3: NETWORK_NO_SOURCE
	 *
	 * @method Flash#networkState
	 * @return {number}
	 *         The value of `networkState` from the swf. This will be a number
	 *         from the list in the description.
	 */

	/**
	 * Get the value of `readyState` from the swf. `readyState` indicates
	 * the current state of the media element. It returns an enumeration from the
	 * following list:
	 * - 0: HAVE_NOTHING
	 * - 1: HAVE_METADATA
	 * - 2: HAVE_CURRENT_DATA
	 * - 3: HAVE_FUTURE_DATA
	 * - 4: HAVE_ENOUGH_DATA
	 *
	 * @method Flash#readyState
	 * @return {number}
	 *         The value of `readyState` from the swf. This will be a number
	 *         from the list in the description.
	 */

	/**
	 * Get the value of `readyState` from the swf. `readyState` indicates
	 * the current state of the media element. It returns an enumeration from the
	 * following list:
	 * - 0: HAVE_NOTHING
	 * - 1: HAVE_METADATA
	 * - 2: HAVE_CURRENT_DATA
	 * - 3: HAVE_FUTURE_DATA
	 * - 4: HAVE_ENOUGH_DATA
	 *
	 * @method Flash#readyState
	 * @return {number}
	 *         The value of `readyState` from the swf. This will be a number
	 *         from the list in the description.
	 */

	/**
	 * Get the value of `initialTime` from the swf.
	 *
	 * @method Flash#initialTime
	 * @return {number}
	 *         The `initialTime` proprety on the swf.
	 */

	/**
	 * Get the value of `startOffsetTime` from the swf.
	 *
	 * @method Flash#startOffsetTime
	 * @return {number}
	 *         The `startOffsetTime` proprety on the swf.
	 */

	/**
	 * Get the value of `paused` from the swf. `paused` indicates whether the swf
	 * is current paused or not.
	 *
	 * @method Flash#paused
	 * @return {boolean}
	 *         The value of `paused` from the swf.
	 */

	/**
	 * Get the value of `ended` from the swf. `ended` indicates whether
	 * the media has reached the end or not.
	 *
	 * @method Flash#ended
	 * @return {boolean}
	 *         - True indicates that the media has ended.
	 *         - False indicates that the media has not ended.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}
	 */

	/**
	 * Get the value of `videoWidth` from the swf. `videoWidth` indicates
	 * the current width of the media in css pixels.
	 *
	 * @method Flash#videoWidth
	 * @return {number}
	 *         The value of `videoWidth` from the swf. This will be a number
	 *         in css pixels.
	 */

	/**
	 * Get the value of `videoHeight` from the swf. `videoHeigth` indicates
	 * the current height of the media in css pixels.
	 *
	 * @method Flassh.prototype.videoHeight
	 * @return {number}
	 *         The value of `videoHeight` from the swf. This will be a number
	 *         in css pixels.
	 */
	/** ------------------------------ Setters ------------------------------ **/

	/**
	 * Set the value of `rtmpConnection` on the swf.
	 *
	 * @method Flash#setRtmpConnection
	 * @param {string} rtmpConnection
	 *        New value to set the `rtmpConnection` property to.
	 */

	/**
	 * Set the value of `rtmpStream` on the swf.
	 *
	 * @method Flash#setRtmpStream
	 * @param {string} rtmpStream
	 *        New value to set the `rtmpStream` property to.
	 */

	/**
	 * Set the value of `preload` on the swf. `preload` indicates
	 * what should download before the media is interacted with. It can have the following
	 * values:
	 * - none: nothing should be downloaded
	 * - metadata: poster and the first few frames of the media may be downloaded to get
	 *   media dimensions and other metadata
	 * - auto: allow the media and metadata for the media to be downloaded before
	 *    interaction
	 *
	 * @method Flash#setPreload
	 * @param {string} preload
	 *        The value of `preload` to set on the swf. Should be 'none', 'metadata',
	 *        or 'auto'.
	 */

	/**
	 * Set the value of `defaultPlaybackRate` on the swf.
	 *
	 * @method Flash#setDefaultPlaybackRate
	 * @param {number} defaultPlaybackRate
	 *        New value to set the `defaultPlaybackRate` property to.
	 */

	/**
	 * Set the value of `playbackRate` on the swf. `playbackRate` indicates
	 * the rate at which the media is currently playing back. Examples:
	 *   - if playbackRate is set to 2, media will play twice as fast.
	 *   - if playbackRate is set to 0.5, media will play half as fast.
	 *
	 * @method Flash#setPlaybackRate
	 * @param {number} playbackRate
	 *        New value of `playbackRate` on the swf. A number indicating
	 *        the current playback speed of the media, where 1 is normal speed.
	 */

	/**
	 * Set the value of `autoplay` on the swf. `autoplay` indicates
	 * that the media should start to play as soon as the page is ready.
	 *
	 * @method Flash#setAutoplay
	 * @param {boolean} autoplay
	 *        - The value of `autoplay` from the swf.
	 *        - True indicates that the media ashould start as soon as the page loads.
	 *        - False indicates that the media should not start as soon as the page loads.
	 */

	/**
	 * Set the value of `loop` on the swf. `loop` indicates
	 * that the media should return to the start of the media and continue playing once
	 * it reaches the end.
	 *
	 * @method Flash#setLoop
	 * @param {boolean} loop
	 *        - True indicates that playback should seek back to start once
	 *          the end of a media is reached.
	 *        - False indicates that playback should not loop back to the start when the
	 *          end of the media is reached.
	 */

	/**
	 * Set the value of `mediaGroup` on the swf.
	 *
	 * @method Flash#setMediaGroup
	 * @param {string} mediaGroup
	 *        New value of `mediaGroup` to set on the swf.
	 */

	/**
	 * Set the value of `controller` on the swf.
	 *
	 * @method Flash#setController
	 * @param {string} controller
	 *        New value the current value of `controller` on the swf.
	 */

	/**
	 * Get the value of `controls` from the swf. `controls` indicates
	 * whether the native flash controls should be shown or hidden.
	 *
	 * @method Flash#controls
	 * @return {boolean}
	 *         - The value of `controls` from the swf.
	 *         - True indicates that native controls should be showing.
	 *         - False indicates that native controls should be hidden.
	 */

	/**
	 * Set the value of the `volume` on the swf. `volume` indicates the current
	 * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and
	 * so on.
	 *
	 * @method Flash#setVolume
	 * @param {number} percentAsDecimal
	 *         The volume percent as a decimal. Value will be between 0-1.
	 */

	/**
	 * Set the value of the `muted` on the swf. `muted` indicates that the current
	 * audio level should be silent.
	 *
	 * @method Flash#setMuted
	 * @param {boolean} muted
	 *         - True if the audio should be set to silent
	 *         - False otherwise
	 */

	/**
	 * Set the value of `defaultMuted` on the swf. `defaultMuted` indicates
	 * whether the media should start muted or not. Only changes the default state of the
	 * media. `muted` and `defaultMuted` can have different values. `muted` indicates the
	 * current state.
	 *
	 * @method Flash#setDefaultMuted
	 * @param {boolean} defaultMuted
	 *         - True indicates that the media should start muted.
	 *         - False indicates that the media should not start muted.
	 */

	/* Flash Support Testing -------------------------------------------------------- */

	/**
	 * Check if the Flash tech is currently supported.
	 *
	 * @return {boolean}
	 *          - True if the flash tech is supported.
	 *          - False otherwise.
	 */
	Flash.isSupported = function () {
	  return Flash.version()[0] >= 10;
	  // return swfobject.hasFlashPlayerVersion('10');
	};

	// Add Source Handler pattern functions to this tech
	_tech2['default'].withSourceHandlers(Flash);

	/*
	 * Native source handler for flash,  simply passes the source to the swf element.
	 *
	 * @property {Tech~SourceObject} source
	 *           The source object
	 *
	 * @property {Flash} tech
	 *           The instance of the Flash tech
	 */
	Flash.nativeSourceHandler = {};

	/**
	 * Check if the Flash can play the given mime type.
	 *
	 * @param {string} type
	 *        The mimetype to check
	 *
	 * @return {string}
	 *         'maybe', or '' (empty string)
	 */
	Flash.nativeSourceHandler.canPlayType = function (type) {
	  if (type in Flash.formats) {
	    return 'maybe';
	  }

	  return '';
	};

	/**
	 * Check if the media element can handle a source natively.
	 *
	 * @param {Tech~SourceObject} source
	 *         The source object
	 *
	 * @param {Object} [options]
	 *         Options to be passed to the tech.
	 *
	 * @return {string}
	 *         'maybe', or '' (empty string).
	 */
	Flash.nativeSourceHandler.canHandleSource = function (source, options) {
	  var type = void 0;

	  function guessMimeType(src) {
	    var ext = Url.getFileExtension(src);

	    if (ext) {
	      return 'video/' + ext;
	    }
	    return '';
	  }

	  if (!source.type) {
	    type = guessMimeType(source.src);
	  } else {
	    // Strip code information from the type because we don't get that specific
	    type = source.type.replace(/;.*/, '').toLowerCase();
	  }

	  return Flash.nativeSourceHandler.canPlayType(type);
	};

	/**
	 * Pass the source to the swf.
	 *
	 * @param {Tech~SourceObject} source
	 *        The source object
	 *
	 * @param {Flash} tech
	 *        The instance of the Flash tech
	 *
	 * @param {Object} [options]
	 *        The options to pass to the source
	 */
	Flash.nativeSourceHandler.handleSource = function (source, tech, options) {
	  tech.setSrc(source.src);
	};

	/**
	 * noop for native source handler dispose, as cleanup will happen automatically.
	 */
	Flash.nativeSourceHandler.dispose = function () {};

	// Register the native source handler
	Flash.registerSourceHandler(Flash.nativeSourceHandler);

	/**
	 * Flash supported mime types.
	 *
	 * @constant {Object}
	 */
	Flash.formats = {
	  'video/flv': 'FLV',
	  'video/x-flv': 'FLV',
	  'video/mp4': 'MP4',
	  'video/m4v': 'MP4'
	};

	/**
	 * Called when the the swf is "ready", and makes sure that the swf is really
	 * ready using {@link Flash#checkReady}
	 */
	Flash.onReady = function (currSwf) {
	  var el = Dom.getEl(currSwf);
	  var tech = el && el.tech;

	  // if there is no el then the tech has been disposed
	  // and the tech element was removed from the player div
	  if (tech && tech.el()) {
	    // check that the flash object is really ready
	    Flash.checkReady(tech);
	  }
	};

	/**
	 * The SWF isn't always ready when it says it is. Sometimes the API functions still
	 * need to be added to the object. If it's not ready, we set a timeout to check again
	 * shortly.
	 *
	 * @param {Flash} tech
	 *        The instance of the flash tech to check.
	 */
	Flash.checkReady = function (tech) {
	  // stop worrying if the tech has been disposed
	  if (!tech.el()) {
	    return;
	  }

	  // check if API property exists
	  if (tech.el().vjs_getProperty) {
	    // tell tech it's ready
	    tech.triggerReady();
	  } else {
	    // wait longer
	    this.setTimeout(function () {
	      Flash.checkReady(tech);
	    }, 50);
	  }
	};

	/**
	 * Trigger events from the swf on the Flash Tech.
	 *
	 * @param {number} swfID
	 *        The id of the swf that had the event
	 *
	 * @param {string} eventName
	 *        The name of the event to trigger
	 */
	Flash.onEvent = function (swfID, eventName) {
	  var tech = Dom.getEl(swfID).tech;
	  var args = Array.prototype.slice.call(arguments, 2);

	  // dispatch Flash events asynchronously for two reasons:
	  // - Flash swallows any exceptions generated by javascript it
	  //   invokes
	  // - Flash is suspended until the javascript returns which may cause
	  //   playback performance issues
	  tech.setTimeout(function () {
	    tech.trigger(eventName, args);
	  }, 1);
	};

	/**
	 * Log errors from the swf on the Flash tech.
	 *
	 * @param {number} swfID
	 *        The id of the swf that had an error.
	 *
	 * @param {string} The error string
	 *        The error to set on the Flash Tech.
	 *
	 * @return {MediaError|undefined}
	 *          - Returns a MediaError when err is 'srcnotfound'
	 *          - Returns undefined otherwise.
	 */
	Flash.onError = function (swfID, err) {
	  var tech = Dom.getEl(swfID).tech;

	  // trigger MEDIA_ERR_SRC_NOT_SUPPORTED
	  if (err === 'srcnotfound') {
	    return tech.error(4);
	  }

	  // trigger a custom error
	  tech.error('FLASH: ' + err);
	};

	/**
	 * Get the current version of Flash that is in use on the page.
	 *
	 * @return {Array}
	 *          an array of versions that are available.
	 */
	Flash.version = function () {
	  var version = '0,0,0';

	  // IE
	  try {
	    version = new _window2['default'].ActiveXObject('ShockwaveFlash.ShockwaveFlash').GetVariable('$version').replace(/\D+/g, ',').match(/^,?(.+),?$/)[1];

	    // other browsers
	  } catch (e) {
	    try {
	      if (navigator.mimeTypes['application/x-shockwave-flash'].enabledPlugin) {
	        version = (navigator.plugins['Shockwave Flash 2.0'] || navigator.plugins['Shockwave Flash']).description.replace(/\D+/g, ',').match(/^,?(.+),?$/)[1];
	      }
	    } catch (err) {
	      // satisfy linter
	    }
	  }
	  return version.split(',');
	};

	/**
	 * Only use for non-iframe embeds.
	 *
	 * @param {Object} swf
	 *        The videojs-swf object.
	 *
	 * @param {Object} flashVars
	 *        Names and values to use as flash option variables.
	 *
	 * @param {Object} params
	 *        Style parameters to set on the object.
	 *
	 * @param {Object} attributes
	 *        Attributes to set on the element.
	 *
	 * @return {Element}
	 *          The embeded Flash DOM element.
	 */
	Flash.embed = function (swf, flashVars, params, attributes) {
	  var code = Flash.getEmbedCode(swf, flashVars, params, attributes);

	  // Get element by embedding code and retrieving created element
	  var obj = Dom.createEl('div', { innerHTML: code }).childNodes[0];

	  return obj;
	};

	/**
	 * Only use for non-iframe embeds.
	 *
	 * @param {Object} swf
	 *        The videojs-swf object.
	 *
	 * @param {Object} flashVars
	 *        Names and values to use as flash option variables.
	 *
	 * @param {Object} params
	 *        Style parameters to set on the object.
	 *
	 * @param {Object} attributes
	 *        Attributes to set on the element.
	 *
	 * @return {Element}
	 *          The embeded Flash DOM element.
	 */
	Flash.getEmbedCode = function (swf, flashVars, params, attributes) {
	  var objTag = '<object type="application/x-shockwave-flash" ';
	  var flashVarsString = '';
	  var paramsString = '';
	  var attrsString = '';

	  // Convert flash vars to string
	  if (flashVars) {
	    Object.getOwnPropertyNames(flashVars).forEach(function (key) {
	      flashVarsString += key + '=' + flashVars[key] + '&amp;';
	    });
	  }

	  // Add swf, flashVars, and other default params
	  params = (0, _obj.assign)({
	    movie: swf,
	    flashvars: flashVarsString,
	    // Required to talk to swf
	    allowScriptAccess: 'always',
	    // All should be default, but having security issues.
	    allowNetworking: 'all'
	  }, params);

	  // Create param tags string
	  Object.getOwnPropertyNames(params).forEach(function (key) {
	    paramsString += '<param name="' + key + '" value="' + params[key] + '" />';
	  });

	  attributes = (0, _obj.assign)({
	    // Add swf to attributes (need both for IE and Others to work)
	    data: swf,

	    // Default to 100% width/height
	    width: '100%',
	    height: '100%'

	  }, attributes);

	  // Create Attributes string
	  Object.getOwnPropertyNames(attributes).forEach(function (key) {
	    attrsString += key + '="' + attributes[key] + '" ';
	  });

	  return '' + objTag + attrsString + '>' + paramsString + '</object>';
	};

	// Run Flash through the RTMP decorator
	(0, _flashRtmp2['default'])(Flash);

	_component2['default'].registerComponent('Flash', Flash);
	_tech2['default'].registerTech('Flash', Flash);
	exports['default'] = Flash;


/***/ },
/* 300 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	/**
	 * @file flash-rtmp.js
	 * @module flash-rtmp
	 */

	/**
	 * Add RTMP properties to the {@link Flash} Tech.
	 *
	 * @param {Flash} Flash
	 *        The flash tech class.
	 *
	 * @mixin FlashRtmpDecorator
	 */
	function FlashRtmpDecorator(Flash) {
	  Flash.streamingFormats = {
	    'rtmp/mp4': 'MP4',
	    'rtmp/flv': 'FLV'
	  };

	  /**
	   * Join connection and stream with an ampersand.
	   *
	   * @param {string} connection
	   *        The connection string.
	   *
	   * @param {string} stream
	   *        The stream string.
	   */
	  Flash.streamFromParts = function (connection, stream) {
	    return connection + '&' + stream;
	  };

	  /**
	   * The flash parts object that contains connection and stream info.
	   *
	   * @typedef {Object} Flash~PartsObject
	   *
	   * @property {string} connection
	   *           The connection string of a source, defaults to an empty string.
	   *
	   * @property {string} stream
	   *           The stream string of the source, defaults to an empty string.
	   */

	  /**
	   * Convert a source url into a stream and connection parts.
	   *
	   * @param {string} src
	   *        the source url
	   *
	   * @return {Flash~PartsObject}
	   *         The parts object that contains a connection and a stream
	   */
	  Flash.streamToParts = function (src) {
	    var parts = {
	      connection: '',
	      stream: ''
	    };

	    if (!src) {
	      return parts;
	    }

	    // Look for the normal URL separator we expect, '&'.
	    // If found, we split the URL into two pieces around the
	    // first '&'.
	    var connEnd = src.search(/&(?!\w+=)/);
	    var streamBegin = void 0;

	    if (connEnd !== -1) {
	      streamBegin = connEnd + 1;
	    } else {
	      // If there's not a '&', we use the last '/' as the delimiter.
	      connEnd = streamBegin = src.lastIndexOf('/') + 1;
	      if (connEnd === 0) {
	        // really, there's not a '/'?
	        connEnd = streamBegin = src.length;
	      }
	    }

	    parts.connection = src.substring(0, connEnd);
	    parts.stream = src.substring(streamBegin, src.length);

	    return parts;
	  };

	  /**
	   * Check if the source type is a streaming type.
	   *
	   * @param {string} srcType
	   *        The mime type to check.
	   *
	   * @return {boolean}
	   *          - True if the source type is a streaming type.
	   *          - False if the source type is not a streaming type.
	   */
	  Flash.isStreamingType = function (srcType) {
	    return srcType in Flash.streamingFormats;
	  };

	  // RTMP has four variations, any string starting
	  // with one of these protocols should be valid

	  /**
	   * Regular expression used to check if the source is an rtmp source.
	   *
	   * @property {RegExp} Flash.RTMP_RE
	   */
	  Flash.RTMP_RE = /^rtmp[set]?:\/\//i;

	  /**
	   * Check if the source itself is a streaming type.
	   *
	   * @param {string} src
	   *        The url to the source.
	   *
	   * @return {boolean}
	   *          - True if the source url indicates that the source is streaming.
	   *          - False if the shource url indicates that the source url is not streaming.
	   */
	  Flash.isStreamingSrc = function (src) {
	    return Flash.RTMP_RE.test(src);
	  };

	  /**
	   * A source handler for RTMP urls
	   * @type {Object}
	   */
	  Flash.rtmpSourceHandler = {};

	  /**
	   * Check if Flash can play the given mime type.
	   *
	   * @param {string} type
	   *        The mime type to check
	   *
	   * @return {string}
	   *         'maybe', or '' (empty string)
	   */
	  Flash.rtmpSourceHandler.canPlayType = function (type) {
	    if (Flash.isStreamingType(type)) {
	      return 'maybe';
	    }

	    return '';
	  };

	  /**
	   * Check if Flash can handle the source natively
	   *
	   * @param {Object} source
	   *        The source object
	   *
	   * @param {Object} [options]
	   *        The options passed to the tech
	   *
	   * @return {string}
	   *         'maybe', or '' (empty string)
	   */
	  Flash.rtmpSourceHandler.canHandleSource = function (source, options) {
	    var can = Flash.rtmpSourceHandler.canPlayType(source.type);

	    if (can) {
	      return can;
	    }

	    if (Flash.isStreamingSrc(source.src)) {
	      return 'maybe';
	    }

	    return '';
	  };

	  /**
	   * Pass the source to the flash object.
	   *
	   * @param {Object} source
	   *        The source object
	   *
	   * @param {Flash} tech
	   *        The instance of the Flash tech
	   *
	   * @param {Object} [options]
	   *        The options to pass to the source
	   */
	  Flash.rtmpSourceHandler.handleSource = function (source, tech, options) {
	    var srcParts = Flash.streamToParts(source.src);

	    tech.setRtmpConnection(srcParts.connection);
	    tech.setRtmpStream(srcParts.stream);
	  };

	  // Register the native source handler
	  Flash.registerSourceHandler(Flash.rtmpSourceHandler);

	  return Flash;
	}

	exports['default'] = FlashRtmpDecorator;


/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _clickableComponent = __webpack_require__(302);

	var _clickableComponent2 = _interopRequireDefault(_clickableComponent);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _fn = __webpack_require__(268);

	var Fn = _interopRequireWildcard(_fn);

	var _dom = __webpack_require__(259);

	var Dom = _interopRequireWildcard(_dom);

	var _browser = __webpack_require__(262);

	var browser = _interopRequireWildcard(_browser);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file poster-image.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * A `ClickableComponent` that handles showing the poster image for the player.
	 *
	 * @extends ClickableComponent
	 */
	var PosterImage = function (_ClickableComponent) {
	  _inherits(PosterImage, _ClickableComponent);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should attach to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function PosterImage(player, options) {
	    _classCallCheck(this, PosterImage);

	    var _this = _possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));

	    _this.update();
	    player.on('posterchange', Fn.bind(_this, _this.update));
	    return _this;
	  }

	  /**
	   * Clean up and dispose of the `PosterImage`.
	   */


	  PosterImage.prototype.dispose = function dispose() {
	    this.player().off('posterchange', this.update);
	    _ClickableComponent.prototype.dispose.call(this);
	  };

	  /**
	   * Create the `PosterImage`s DOM element.
	   *
	   * @return {Element}
	   *         The element that gets created.
	   */


	  PosterImage.prototype.createEl = function createEl() {
	    var el = Dom.createEl('div', {
	      className: 'vjs-poster',

	      // Don't want poster to be tabbable.
	      tabIndex: -1
	    });

	    // To ensure the poster image resizes while maintaining its original aspect
	    // ratio, use a div with `background-size` when available. For browsers that
	    // do not support `background-size` (e.g. IE8), fall back on using a regular
	    // img element.
	    if (!browser.BACKGROUND_SIZE_SUPPORTED) {
	      this.fallbackImg_ = Dom.createEl('img');
	      el.appendChild(this.fallbackImg_);
	    }

	    return el;
	  };

	  /**
	   * An {@link EventTarget~EventListener} for {@link Player#posterchange} events.
	   *
	   * @listens Player#posterchange
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `Player#posterchange` event that triggered this function.
	   */


	  PosterImage.prototype.update = function update(event) {
	    var url = this.player().poster();

	    this.setSrc(url);

	    // If there's no poster source we should display:none on this component
	    // so it's not still clickable or right-clickable
	    if (url) {
	      this.show();
	    } else {
	      this.hide();
	    }
	  };

	  /**
	   * Set the source of the `PosterImage` depending on the display method.
	   *
	   * @param {string} url
	   *        The URL to the source for the `PosterImage`.
	   */


	  PosterImage.prototype.setSrc = function setSrc(url) {
	    if (this.fallbackImg_) {
	      this.fallbackImg_.src = url;
	    } else {
	      var backgroundImage = '';

	      // Any falsey values should stay as an empty string, otherwise
	      // this will throw an extra error
	      if (url) {
	        backgroundImage = 'url("' + url + '")';
	      }

	      this.el_.style.backgroundImage = backgroundImage;
	    }
	  };

	  /**
	   * An {@link EventTarget~EventListener} for clicks on the `PosterImage`. See
	   * {@link ClickableComponent#handleClick} for instances where this will be triggered.
	   *
	   * @listens tap
	   * @listens click
	   * @listens keydown
	   *
	   * @param {EventTarget~Event} event
	   +        The `click`, `tap` or `keydown` event that caused this function to be called.
	   */


	  PosterImage.prototype.handleClick = function handleClick(event) {
	    // We don't want a click to trigger playback when controls are disabled
	    // but CSS should be hiding the poster to prevent that from happening
	    if (this.player_.paused()) {
	      this.player_.play();
	    } else {
	      this.player_.pause();
	    }
	  };

	  return PosterImage;
	}(_clickableComponent2['default']);

	_component2['default'].registerComponent('PosterImage', PosterImage);
	exports['default'] = PosterImage;


/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _dom = __webpack_require__(259);

	var Dom = _interopRequireWildcard(_dom);

	var _events = __webpack_require__(265);

	var Events = _interopRequireWildcard(_events);

	var _fn = __webpack_require__(268);

	var Fn = _interopRequireWildcard(_fn);

	var _log = __webpack_require__(261);

	var _log2 = _interopRequireDefault(_log);

	var _document = __webpack_require__(256);

	var _document2 = _interopRequireDefault(_document);

	var _obj = __webpack_require__(263);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file button.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Clickable Component which is clickable or keyboard actionable,
	 * but is not a native HTML button.
	 *
	 * @extends Component
	 */
	var ClickableComponent = function (_Component) {
	  _inherits(ClickableComponent, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param  {Player} player
	   *         The `Player` that this class should be attached to.
	   *
	   * @param  {Object} [options]
	   *         The key/value store of player options.
	   */
	  function ClickableComponent(player, options) {
	    _classCallCheck(this, ClickableComponent);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.emitTapEvents();

	    _this.enable();
	    return _this;
	  }

	  /**
	   * Create the `Component`s DOM element.
	   *
	   * @param {string} [tag=div]
	   *        The element's node type.
	   *
	   * @param {Object} [props={}]
	   *        An object of properties that should be set on the element.
	   *
	   * @param {Object} [attributes={}]
	   *        An object of attributes that should be set on the element.
	   *
	   * @return {Element}
	   *         The element that gets created.
	   */


	  ClickableComponent.prototype.createEl = function createEl() {
	    var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'div';
	    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	    props = (0, _obj.assign)({
	      className: this.buildCSSClass(),
	      tabIndex: 0
	    }, props);

	    if (tag === 'button') {
	      _log2['default'].error('Creating a ClickableComponent with an HTML element of ' + tag + ' is not supported; use a Button instead.');
	    }

	    // Add ARIA attributes for clickable element which is not a native HTML button
	    attributes = (0, _obj.assign)({
	      'role': 'button',

	      // let the screen reader user know that the text of the element may change
	      'aria-live': 'polite'
	    }, attributes);

	    this.tabIndex_ = props.tabIndex;

	    var el = _Component.prototype.createEl.call(this, tag, props, attributes);

	    this.createControlTextEl(el);

	    return el;
	  };

	  /**
	   * Create a control text element on this `Component`
	   *
	   * @param {Element} [el]
	   *        Parent element for the control text.
	   *
	   * @return {Element}
	   *         The control text element that gets created.
	   */


	  ClickableComponent.prototype.createControlTextEl = function createControlTextEl(el) {
	    this.controlTextEl_ = Dom.createEl('span', {
	      className: 'vjs-control-text'
	    });

	    if (el) {
	      el.appendChild(this.controlTextEl_);
	    }

	    this.controlText(this.controlText_, el);

	    return this.controlTextEl_;
	  };

	  /**
	   * Get or set the localize text to use for the controls on the `Component`.
	   *
	   * @param {string} [text]
	   *        Control text for element.
	   *
	   * @param {Element} [el=this.el()]
	   *        Element to set the title on.
	   *
	   * @return {string|ClickableComponent}
	   *         - The control text when getting
	   *         - Returns itself when setting; method can be chained.
	   */


	  ClickableComponent.prototype.controlText = function controlText(text) {
	    var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.el();

	    if (!text) {
	      return this.controlText_ || 'Need Text';
	    }

	    var localizedText = this.localize(text);

	    this.controlText_ = text;
	    this.controlTextEl_.innerHTML = localizedText;
	    el.setAttribute('title', localizedText);

	    return this;
	  };

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  ClickableComponent.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-control vjs-button ' + _Component.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Enable this `Component`s element.
	   *
	   * @return {ClickableComponent}
	   *         Returns itself; method can be chained.
	   */


	  ClickableComponent.prototype.enable = function enable() {
	    this.removeClass('vjs-disabled');
	    this.el_.setAttribute('aria-disabled', 'false');
	    if (typeof this.tabIndex_ !== 'undefined') {
	      this.el_.setAttribute('tabIndex', this.tabIndex_);
	    }
	    this.on('tap', this.handleClick);
	    this.on('click', this.handleClick);
	    this.on('focus', this.handleFocus);
	    this.on('blur', this.handleBlur);
	    return this;
	  };

	  /**
	   * Disable this `Component`s element.
	   *
	   * @return {ClickableComponent}
	   *         Returns itself; method can be chained.
	   */


	  ClickableComponent.prototype.disable = function disable() {
	    this.addClass('vjs-disabled');
	    this.el_.setAttribute('aria-disabled', 'true');
	    if (typeof this.tabIndex_ !== 'undefined') {
	      this.el_.removeAttribute('tabIndex');
	    }
	    this.off('tap', this.handleClick);
	    this.off('click', this.handleClick);
	    this.off('focus', this.handleFocus);
	    this.off('blur', this.handleBlur);
	    return this;
	  };

	  /**
	   * This gets called when a `ClickableComponent` gets:
	   * - Clicked (via the `click` event, listening starts in the constructor)
	   * - Tapped (via the `tap` event, listening starts in the constructor)
	   * - The following things happen in order:
	   *   1. {@link ClickableComponent#handleFocus} is called via a `focus` event on the
	   *      `ClickableComponent`.
	   *   2. {@link ClickableComponent#handleFocus} adds a listener for `keydown` on using
	   *      {@link ClickableComponent#handleKeyPress}.
	   *   3. `ClickableComponent` has not had a `blur` event (`blur` means that focus was lost). The user presses
	   *      the space or enter key.
	   *   4. {@link ClickableComponent#handleKeyPress} calls this function with the `keydown`
	   *      event as a parameter.
	   *
	   * @param {EventTarget~Event} event
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   * @abstract
	   */


	  ClickableComponent.prototype.handleClick = function handleClick(event) {};

	  /**
	   * This gets called when a `ClickableComponent` gains focus via a `focus` event.
	   * Turns on listening for `keydown` events. When they happen it
	   * calls `this.handleKeyPress`.
	   *
	   * @param {EventTarget~Event} event
	   *        The `focus` event that caused this function to be called.
	   *
	   * @listens focus
	   */


	  ClickableComponent.prototype.handleFocus = function handleFocus(event) {
	    Events.on(_document2['default'], 'keydown', Fn.bind(this, this.handleKeyPress));
	  };

	  /**
	   * Called when this ClickableComponent has focus and a key gets pressed down. By
	   * default it will call `this.handleClick` when the key is space or enter.
	   *
	   * @param {EventTarget~Event} event
	   *        The `keydown` event that caused this function to be called.
	   *
	   * @listens keydown
	   */


	  ClickableComponent.prototype.handleKeyPress = function handleKeyPress(event) {

	    // Support Space (32) or Enter (13) key operation to fire a click event
	    if (event.which === 32 || event.which === 13) {
	      event.preventDefault();
	      this.handleClick(event);
	    } else if (_Component.prototype.handleKeyPress) {

	      // Pass keypress handling up for unsupported keys
	      _Component.prototype.handleKeyPress.call(this, event);
	    }
	  };

	  /**
	   * Called when a `ClickableComponent` loses focus. Turns off the listener for
	   * `keydown` events. Which Stops `this.handleKeyPress` from getting called.
	   *
	   * @param {EventTarget~Event} event
	   *        The `blur` event that caused this function to be called.
	   *
	   * @listens blur
	   */


	  ClickableComponent.prototype.handleBlur = function handleBlur(event) {
	    Events.off(_document2['default'], 'keydown', Fn.bind(this, this.handleKeyPress));
	  };

	  return ClickableComponent;
	}(_component2['default']);

	_component2['default'].registerComponent('ClickableComponent', ClickableComponent);
	exports['default'] = ClickableComponent;


/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _fn = __webpack_require__(268);

	var Fn = _interopRequireWildcard(_fn);

	var _window = __webpack_require__(255);

	var _window2 = _interopRequireDefault(_window);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file text-track-display.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	var darkGray = '#222';
	var lightGray = '#ccc';
	var fontMap = {
	  monospace: 'monospace',
	  sansSerif: 'sans-serif',
	  serif: 'serif',
	  monospaceSansSerif: '"Andale Mono", "Lucida Console", monospace',
	  monospaceSerif: '"Courier New", monospace',
	  proportionalSansSerif: 'sans-serif',
	  proportionalSerif: 'serif',
	  casual: '"Comic Sans MS", Impact, fantasy',
	  script: '"Monotype Corsiva", cursive',
	  smallcaps: '"Andale Mono", "Lucida Console", monospace, sans-serif'
	};

	/**
	 * Construct an rgba color from a given hex color code.
	 *
	 * @param {number} color
	 *        Hex number for color, like #f0e.
	 *
	 * @param {number} opacity
	 *        Value for opacity, 0.0 - 1.0.
	 *
	 * @return {string}
	 *         The rgba color that was created, like 'rgba(255, 0, 0, 0.3)'.
	 *
	 * @private
	 */
	function constructColor(color, opacity) {
	  return 'rgba(' +
	  // color looks like "#f0e"
	  parseInt(color[1] + color[1], 16) + ',' + parseInt(color[2] + color[2], 16) + ',' + parseInt(color[3] + color[3], 16) + ',' + opacity + ')';
	}

	/**
	 * Try to update the style of a DOM element. Some style changes will throw an error,
	 * particularly in IE8. Those should be noops.
	 *
	 * @param {Element} el
	 *        The DOM element to be styled.
	 *
	 * @param {string} style
	 *        The CSS property on the element that should be styled.
	 *
	 * @param {string} rule
	 *        The style rule that should be applied to the property.
	 */
	function tryUpdateStyle(el, style, rule) {
	  try {
	    el.style[style] = rule;
	  } catch (e) {

	    // Satisfies linter.
	    return;
	  }
	}

	/**
	 * The component for displaying text track cues.
	 *
	 * @extends Component
	 */

	var TextTrackDisplay = function (_Component) {
	  _inherits(TextTrackDisplay, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   *
	   * @param {Component~ReadyCallback} [ready]
	   *        The function to call when `TextTrackDisplay` is ready.
	   */
	  function TextTrackDisplay(player, options, ready) {
	    _classCallCheck(this, TextTrackDisplay);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options, ready));

	    player.on('loadstart', Fn.bind(_this, _this.toggleDisplay));
	    player.on('texttrackchange', Fn.bind(_this, _this.updateDisplay));

	    // This used to be called during player init, but was causing an error
	    // if a track should show by default and the display hadn't loaded yet.
	    // Should probably be moved to an external track loader when we support
	    // tracks that don't need a display.
	    player.ready(Fn.bind(_this, function () {
	      if (player.tech_ && player.tech_.featuresNativeTextTracks) {
	        this.hide();
	        return;
	      }

	      player.on('fullscreenchange', Fn.bind(this, this.updateDisplay));

	      var tracks = this.options_.playerOptions.tracks || [];

	      for (var i = 0; i < tracks.length; i++) {
	        this.player_.addRemoteTextTrack(tracks[i], true);
	      }

	      var modes = { captions: 1, subtitles: 1 };
	      var trackList = this.player_.textTracks();
	      var firstDesc = void 0;
	      var firstCaptions = void 0;

	      if (trackList) {
	        for (var _i = 0; _i < trackList.length; _i++) {
	          var track = trackList[_i];

	          if (track['default']) {
	            if (track.kind === 'descriptions' && !firstDesc) {
	              firstDesc = track;
	            } else if (track.kind in modes && !firstCaptions) {
	              firstCaptions = track;
	            }
	          }
	        }

	        // We want to show the first default track but captions and subtitles
	        // take precedence over descriptions.
	        // So, display the first default captions or subtitles track
	        // and otherwise the first default descriptions track.
	        if (firstCaptions) {
	          firstCaptions.mode = 'showing';
	        } else if (firstDesc) {
	          firstDesc.mode = 'showing';
	        }
	      }
	    }));
	    return _this;
	  }

	  /**
	   * Turn display of {@link TextTrack}'s from the current state into the other state.
	   * There are only two states:
	   * - 'shown'
	   * - 'hidden'
	   *
	   * @listens Player#loadstart
	   */


	  TextTrackDisplay.prototype.toggleDisplay = function toggleDisplay() {
	    if (this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks) {
	      this.hide();
	    } else {
	      this.show();
	    }
	  };

	  /**
	   * Create the {@link Component}'s DOM element.
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  TextTrackDisplay.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-text-track-display'
	    }, {
	      'aria-live': 'off',
	      'aria-atomic': 'true'
	    });
	  };

	  /**
	   * Clear all displayed {@link TextTrack}s.
	   */


	  TextTrackDisplay.prototype.clearDisplay = function clearDisplay() {
	    if (typeof _window2['default'].WebVTT === 'function') {
	      _window2['default'].WebVTT.processCues(_window2['default'], [], this.el_);
	    }
	  };

	  /**
	   * Update the displayed TextTrack when a either a {@link Player#texttrackchange} or
	   * a {@link Player#fullscreenchange} is fired.
	   *
	   * @listens Player#texttrackchange
	   * @listens Player#fullscreenchange
	   */


	  TextTrackDisplay.prototype.updateDisplay = function updateDisplay() {
	    var tracks = this.player_.textTracks();

	    this.clearDisplay();

	    if (!tracks) {
	      return;
	    }

	    // Track display prioritization model: if multiple tracks are 'showing',
	    //  display the first 'subtitles' or 'captions' track which is 'showing',
	    //  otherwise display the first 'descriptions' track which is 'showing'

	    var descriptionsTrack = null;
	    var captionsSubtitlesTrack = null;

	    var i = tracks.length;

	    while (i--) {
	      var track = tracks[i];

	      if (track.mode === 'showing') {
	        if (track.kind === 'descriptions') {
	          descriptionsTrack = track;
	        } else {
	          captionsSubtitlesTrack = track;
	        }
	      }
	    }

	    if (captionsSubtitlesTrack) {
	      if (this.getAttribute('aria-live') !== 'off') {
	        this.setAttribute('aria-live', 'off');
	      }
	      this.updateForTrack(captionsSubtitlesTrack);
	    } else if (descriptionsTrack) {
	      if (this.getAttribute('aria-live') !== 'assertive') {
	        this.setAttribute('aria-live', 'assertive');
	      }
	      this.updateForTrack(descriptionsTrack);
	    }
	  };

	  /**
	   * Add an {@link Texttrack} to to the {@link Tech}s {@link TextTrackList}.
	   *
	   * @param {TextTrack} track
	   *        Text track object to be added to the list.
	   */


	  TextTrackDisplay.prototype.updateForTrack = function updateForTrack(track) {
	    if (typeof _window2['default'].WebVTT !== 'function' || !track.activeCues) {
	      return;
	    }

	    var overrides = this.player_.textTrackSettings.getValues();
	    var cues = [];

	    for (var _i2 = 0; _i2 < track.activeCues.length; _i2++) {
	      cues.push(track.activeCues[_i2]);
	    }

	    _window2['default'].WebVTT.processCues(_window2['default'], cues, this.el_);

	    var i = cues.length;

	    while (i--) {
	      var cue = cues[i];

	      if (!cue) {
	        continue;
	      }

	      var cueDiv = cue.displayState;

	      if (overrides.color) {
	        cueDiv.firstChild.style.color = overrides.color;
	      }
	      if (overrides.textOpacity) {
	        tryUpdateStyle(cueDiv.firstChild, 'color', constructColor(overrides.color || '#fff', overrides.textOpacity));
	      }
	      if (overrides.backgroundColor) {
	        cueDiv.firstChild.style.backgroundColor = overrides.backgroundColor;
	      }
	      if (overrides.backgroundOpacity) {
	        tryUpdateStyle(cueDiv.firstChild, 'backgroundColor', constructColor(overrides.backgroundColor || '#000', overrides.backgroundOpacity));
	      }
	      if (overrides.windowColor) {
	        if (overrides.windowOpacity) {
	          tryUpdateStyle(cueDiv, 'backgroundColor', constructColor(overrides.windowColor, overrides.windowOpacity));
	        } else {
	          cueDiv.style.backgroundColor = overrides.windowColor;
	        }
	      }
	      if (overrides.edgeStyle) {
	        if (overrides.edgeStyle === 'dropshadow') {
	          cueDiv.firstChild.style.textShadow = '2px 2px 3px ' + darkGray + ', 2px 2px 4px ' + darkGray + ', 2px 2px 5px ' + darkGray;
	        } else if (overrides.edgeStyle === 'raised') {
	          cueDiv.firstChild.style.textShadow = '1px 1px ' + darkGray + ', 2px 2px ' + darkGray + ', 3px 3px ' + darkGray;
	        } else if (overrides.edgeStyle === 'depressed') {
	          cueDiv.firstChild.style.textShadow = '1px 1px ' + lightGray + ', 0 1px ' + lightGray + ', -1px -1px ' + darkGray + ', 0 -1px ' + darkGray;
	        } else if (overrides.edgeStyle === 'uniform') {
	          cueDiv.firstChild.style.textShadow = '0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray;
	        }
	      }
	      if (overrides.fontPercent && overrides.fontPercent !== 1) {
	        var fontSize = _window2['default'].parseFloat(cueDiv.style.fontSize);

	        cueDiv.style.fontSize = fontSize * overrides.fontPercent + 'px';
	        cueDiv.style.height = 'auto';
	        cueDiv.style.top = 'auto';
	        cueDiv.style.bottom = '2px';
	      }
	      if (overrides.fontFamily && overrides.fontFamily !== 'default') {
	        if (overrides.fontFamily === 'small-caps') {
	          cueDiv.firstChild.style.fontVariant = 'small-caps';
	        } else {
	          cueDiv.firstChild.style.fontFamily = fontMap[overrides.fontFamily];
	        }
	      }
	    }
	  };

	  return TextTrackDisplay;
	}(_component2['default']);

	_component2['default'].registerComponent('TextTrackDisplay', TextTrackDisplay);
	exports['default'] = TextTrackDisplay;


/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file loading-spinner.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * A loading spinner for use during waiting/loading events.
	 *
	 * @extends Component
	 */
	var LoadingSpinner = function (_Component) {
	  _inherits(LoadingSpinner, _Component);

	  function LoadingSpinner() {
	    _classCallCheck(this, LoadingSpinner);

	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  /**
	   * Create the `LoadingSpinner`s DOM element.
	   *
	   * @return {Element}
	   *         The dom element that gets created.
	   */
	  LoadingSpinner.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-loading-spinner',
	      dir: 'ltr'
	    });
	  };

	  return LoadingSpinner;
	}(_component2['default']);

	_component2['default'].registerComponent('LoadingSpinner', LoadingSpinner);
	exports['default'] = LoadingSpinner;


/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _button = __webpack_require__(306);

	var _button2 = _interopRequireDefault(_button);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file big-play-button.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The initial play button that shows before the video has played. The hiding of the
	 * `BigPlayButton` get done via CSS and `Player` states.
	 *
	 * @extends Button
	 */
	var BigPlayButton = function (_Button) {
	  _inherits(BigPlayButton, _Button);

	  function BigPlayButton() {
	    _classCallCheck(this, BigPlayButton);

	    return _possibleConstructorReturn(this, _Button.apply(this, arguments));
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object. Always returns 'vjs-big-play-button'.
	   */
	  BigPlayButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-big-play-button';
	  };

	  /**
	   * This gets called when a `BigPlayButton` "clicked". See {@link ClickableComponent}
	   * for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} event
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  BigPlayButton.prototype.handleClick = function handleClick(event) {
	    this.player_.play();
	  };

	  return BigPlayButton;
	}(_button2['default']);

	/**
	 * The text that should display over the `BigPlayButton`s controls. Added to for localization.
	 *
	 * @type {string}
	 * @private
	 */


	BigPlayButton.prototype.controlText_ = 'Play Video';

	_component2['default'].registerComponent('BigPlayButton', BigPlayButton);
	exports['default'] = BigPlayButton;


/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _clickableComponent = __webpack_require__(302);

	var _clickableComponent2 = _interopRequireDefault(_clickableComponent);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _log = __webpack_require__(261);

	var _log2 = _interopRequireDefault(_log);

	var _obj = __webpack_require__(263);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file button.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Base class for all buttons.
	 *
	 * @extends ClickableComponent
	 */
	var Button = function (_ClickableComponent) {
	  _inherits(Button, _ClickableComponent);

	  function Button() {
	    _classCallCheck(this, Button);

	    return _possibleConstructorReturn(this, _ClickableComponent.apply(this, arguments));
	  }

	  /**
	   * Create the `Button`s DOM element.
	   *
	   * @param {string} [tag=button]
	   *        Element's node type. e.g. 'button'
	   *
	   * @param {Object} [props={}]
	   *        An object of properties that should be set on the element.
	   *
	   * @param {Object} [attributes={}]
	   *        An object of attributes that should be set on the element.
	   *
	   * @return {Element}
	   *         The element that gets created.
	   */
	  Button.prototype.createEl = function createEl() {
	    var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'button';
	    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	    props = (0, _obj.assign)({
	      className: this.buildCSSClass()
	    }, props);

	    if (tag !== 'button') {
	      _log2['default'].warn('Creating a Button with an HTML element of ' + tag + ' is deprecated; use ClickableComponent instead.');

	      // Add properties for clickable element which is not a native HTML button
	      props = (0, _obj.assign)({
	        tabIndex: 0
	      }, props);

	      // Add ARIA attributes for clickable element which is not a native HTML button
	      attributes = (0, _obj.assign)({
	        role: 'button'
	      }, attributes);
	    }

	    // Add attributes for button element
	    attributes = (0, _obj.assign)({

	      // Necessary since the default button type is "submit"
	      'type': 'button',

	      // let the screen reader user know that the text of the button may change
	      'aria-live': 'polite'
	    }, attributes);

	    var el = _component2['default'].prototype.createEl.call(this, tag, props, attributes);

	    this.createControlTextEl(el);

	    return el;
	  };

	  /**
	   * Add a child `Component` inside of this `Button`.
	   *
	   * @param {string|Component} child
	   *        The name or instance of a child to add.
	   *
	   * @param {Object} [options={}]
	   *        The key/value store of options that will get passed to children of
	   *        the child.
	   *
	   * @return {Component}
	   *         The `Component` that gets added as a child. When using a string the
	   *         `Component` will get created by this process.
	   *
	   * @deprecated since version 5
	   */


	  Button.prototype.addChild = function addChild(child) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    var className = this.constructor.name;

	    _log2['default'].warn('Adding an actionable (user controllable) child to a Button (' + className + ') is not supported; use a ClickableComponent instead.');

	    // Avoid the error message generated by ClickableComponent's addChild method
	    return _component2['default'].prototype.addChild.call(this, child, options);
	  };

	  /**
	   * Enable the `Button` element so that it can be activated or clicked. Use this with
	   * {@link Button#disable}.
	   */


	  Button.prototype.enable = function enable() {
	    _ClickableComponent.prototype.enable.call(this);
	    this.el_.removeAttribute('disabled');
	  };

	  /**
	   * Enable the `Button` element so that it cannot be activated or clicked. Use this with
	   * {@link Button#enable}.
	   */


	  Button.prototype.disable = function disable() {
	    _ClickableComponent.prototype.disable.call(this);
	    this.el_.setAttribute('disabled', 'disabled');
	  };

	  /**
	   * This gets called when a `Button` has focus and `keydown` is triggered via a key
	   * press.
	   *
	   * @param {EventTarget~Event} event
	   *        The event that caused this function to get called.
	   *
	   * @listens keydown
	   */


	  Button.prototype.handleKeyPress = function handleKeyPress(event) {

	    // Ignore Space (32) or Enter (13) key operation, which is handled by the browser for a button.
	    if (event.which === 32 || event.which === 13) {
	      return;
	    }

	    // Pass keypress handling up for unsupported keys
	    _ClickableComponent.prototype.handleKeyPress.call(this, event);
	  };

	  return Button;
	}(_clickableComponent2['default']);

	_component2['default'].registerComponent('Button', Button);
	exports['default'] = Button;


/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _button = __webpack_require__(306);

	var _button2 = _interopRequireDefault(_button);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file close-button.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The `CloseButton` is a `{@link Button}` that fires a `close` event when
	 * it gets clicked.
	 *
	 * @extends Button
	 */
	var CloseButton = function (_Button) {
	  _inherits(CloseButton, _Button);

	  /**
	   * Creates an instance of the this class.
	   *
	   * @param  {Player} player
	   *         The `Player` that this class should be attached to.
	   *
	   * @param  {Object} [options]
	   *         The key/value store of player options.
	   */
	  function CloseButton(player, options) {
	    _classCallCheck(this, CloseButton);

	    var _this = _possibleConstructorReturn(this, _Button.call(this, player, options));

	    _this.controlText(options && options.controlText || _this.localize('Close'));
	    return _this;
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  CloseButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-close-button ' + _Button.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * This gets called when a `CloseButton` gets clicked. See
	   * {@link ClickableComponent#handleClick} for more information on when this will be
	   * triggered
	   *
	   * @param {EventTarget~Event} event
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   * @fires CloseButton#close
	   */


	  CloseButton.prototype.handleClick = function handleClick(event) {

	    /**
	     * Triggered when the a `CloseButton` is clicked.
	     *
	     * @event CloseButton#close
	     * @type {EventTarget~Event}
	     *
	     * @property {boolean} [bubbles=false]
	     *           set to false so that the close event does not
	     *           bubble up to parents if there is no listener
	     */
	    this.trigger({ type: 'close', bubbles: false });
	  };

	  return CloseButton;
	}(_button2['default']);

	_component2['default'].registerComponent('CloseButton', CloseButton);
	exports['default'] = CloseButton;


/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	__webpack_require__(309);

	__webpack_require__(310);

	__webpack_require__(312);

	__webpack_require__(313);

	__webpack_require__(314);

	__webpack_require__(315);

	__webpack_require__(316);

	__webpack_require__(324);

	__webpack_require__(325);

	__webpack_require__(328);

	__webpack_require__(331);

	__webpack_require__(332);

	__webpack_require__(341);

	__webpack_require__(342);

	__webpack_require__(343);

	__webpack_require__(345);

	__webpack_require__(347);

	__webpack_require__(349);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file control-bar.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	// Required children


	/**
	 * Container of main controls.
	 *
	 * @extends Component
	 */
	var ControlBar = function (_Component) {
	  _inherits(ControlBar, _Component);

	  function ControlBar() {
	    _classCallCheck(this, ControlBar);

	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */
	  ControlBar.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-control-bar',
	      dir: 'ltr'
	    }, {
	      // The control bar is a group, so it can contain menuitems
	      role: 'group'
	    });
	  };

	  return ControlBar;
	}(_component2['default']);

	/**
	 * Default options for `ControlBar`
	 *
	 * @type {Object}
	 * @private
	 */


	ControlBar.prototype.options_ = {
	  children: ['playToggle', 'volumeMenuButton', 'currentTimeDisplay', 'timeDivider', 'durationDisplay', 'progressControl', 'liveDisplay', 'remainingTimeDisplay', 'customControlSpacer', 'playbackRateMenuButton', 'chaptersButton', 'descriptionsButton', 'subtitlesButton', 'captionsButton', 'audioTrackButton', 'fullscreenToggle']
	};

	_component2['default'].registerComponent('ControlBar', ControlBar);
	exports['default'] = ControlBar;


/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _button = __webpack_require__(306);

	var _button2 = _interopRequireDefault(_button);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file play-toggle.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Button to toggle between play and pause.
	 *
	 * @extends Button
	 */
	var PlayToggle = function (_Button) {
	  _inherits(PlayToggle, _Button);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function PlayToggle(player, options) {
	    _classCallCheck(this, PlayToggle);

	    var _this = _possibleConstructorReturn(this, _Button.call(this, player, options));

	    _this.on(player, 'play', _this.handlePlay);
	    _this.on(player, 'pause', _this.handlePause);
	    return _this;
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  PlayToggle.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-play-control ' + _Button.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * This gets called when an `PlayToggle` is "clicked". See
	   * {@link ClickableComponent} for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  PlayToggle.prototype.handleClick = function handleClick(event) {
	    if (this.player_.paused()) {
	      this.player_.play();
	    } else {
	      this.player_.pause();
	    }
	  };

	  /**
	   * Add the vjs-playing class to the element so it can change appearance.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The event that caused this function to run.
	   *
	   * @listens Player#play
	   */


	  PlayToggle.prototype.handlePlay = function handlePlay(event) {
	    this.removeClass('vjs-paused');
	    this.addClass('vjs-playing');
	    // change the button text to "Pause"
	    this.controlText('Pause');
	  };

	  /**
	   * Add the vjs-paused class to the element so it can change appearance.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The event that caused this function to run.
	   *
	   * @listens Player#pause
	   */


	  PlayToggle.prototype.handlePause = function handlePause(event) {
	    this.removeClass('vjs-playing');
	    this.addClass('vjs-paused');
	    // change the button text to "Play"
	    this.controlText('Play');
	  };

	  return PlayToggle;
	}(_button2['default']);

	/**
	 * The text that should display over the `PlayToggle`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */


	PlayToggle.prototype.controlText_ = 'Play';

	_component2['default'].registerComponent('PlayToggle', PlayToggle);
	exports['default'] = PlayToggle;


/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _dom = __webpack_require__(259);

	var Dom = _interopRequireWildcard(_dom);

	var _formatTime = __webpack_require__(311);

	var _formatTime2 = _interopRequireDefault(_formatTime);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file current-time-display.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Displays the current time
	 *
	 * @extends Component
	 */
	var CurrentTimeDisplay = function (_Component) {
	  _inherits(CurrentTimeDisplay, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function CurrentTimeDisplay(player, options) {
	    _classCallCheck(this, CurrentTimeDisplay);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.on(player, 'timeupdate', _this.updateContent);
	    return _this;
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  CurrentTimeDisplay.prototype.createEl = function createEl() {
	    var el = _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-current-time vjs-time-control vjs-control'
	    });

	    this.contentEl_ = Dom.createEl('div', {
	      className: 'vjs-current-time-display',
	      // label the current time for screen reader users
	      innerHTML: '<span class="vjs-control-text">Current Time </span>' + '0:00'
	    }, {
	      // tell screen readers not to automatically read the time as it changes
	      'aria-live': 'off'
	    });

	    el.appendChild(this.contentEl_);
	    return el;
	  };

	  /**
	   * Update current time display
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `timeupdate` event that caused this function to run.
	   *
	   * @listens Player#timeupdate
	   */


	  CurrentTimeDisplay.prototype.updateContent = function updateContent(event) {
	    // Allows for smooth scrubbing, when player can't keep up.
	    var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
	    var localizedText = this.localize('Current Time');
	    var formattedTime = (0, _formatTime2['default'])(time, this.player_.duration());

	    if (formattedTime !== this.formattedTime_) {
	      this.formattedTime_ = formattedTime;
	      this.contentEl_.innerHTML = '<span class="vjs-control-text">' + localizedText + '</span> ' + formattedTime;
	    }
	  };

	  return CurrentTimeDisplay;
	}(_component2['default']);

	_component2['default'].registerComponent('CurrentTimeDisplay', CurrentTimeDisplay);
	exports['default'] = CurrentTimeDisplay;


/***/ },
/* 311 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	/**
	 * @file format-time.js
	 * @module Format-time
	 */

	/**
	 * Format seconds as a time string, H:MM:SS or M:SS. Supplying a guide (in seconds)
	 * will force a number of leading zeros to cover the length of the guide.
	 *
	 * @param {number} seconds
	 *        Number of seconds to be turned into a string
	 *
	 * @param {number} guide
	 *        Number (in seconds) to model the string after
	 *
	 * @return {string}
	 *         Time formatted as H:MM:SS or M:SS
	 */
	function formatTime(seconds) {
	  var guide = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : seconds;

	  seconds = seconds < 0 ? 0 : seconds;
	  var s = Math.floor(seconds % 60);
	  var m = Math.floor(seconds / 60 % 60);
	  var h = Math.floor(seconds / 3600);
	  var gm = Math.floor(guide / 60 % 60);
	  var gh = Math.floor(guide / 3600);

	  // handle invalid times
	  if (isNaN(seconds) || seconds === Infinity) {
	    // '-' is false for all relational operators (e.g. <, >=) so this setting
	    // will add the minimum number of fields specified by the guide
	    h = m = s = '-';
	  }

	  // Check if we need to show hours
	  h = h > 0 || gh > 0 ? h + ':' : '';

	  // If hours are showing, we may need to add a leading zero.
	  // Always show at least one digit of minutes.
	  m = ((h || gm >= 10) && m < 10 ? '0' + m : m) + ':';

	  // Check if leading zero is need for seconds
	  s = s < 10 ? '0' + s : s;

	  return h + m + s;
	}

	exports['default'] = formatTime;


/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _dom = __webpack_require__(259);

	var Dom = _interopRequireWildcard(_dom);

	var _formatTime = __webpack_require__(311);

	var _formatTime2 = _interopRequireDefault(_formatTime);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file duration-display.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Displays the duration
	 *
	 * @extends Component
	 */
	var DurationDisplay = function (_Component) {
	  _inherits(DurationDisplay, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function DurationDisplay(player, options) {
	    _classCallCheck(this, DurationDisplay);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.on(player, 'durationchange', _this.updateContent);

	    // Also listen for timeupdate and loadedmetadata because removing those
	    // listeners could have broken dependent applications/libraries. These
	    // can likely be removed for 6.0.
	    _this.on(player, 'timeupdate', _this.updateContent);
	    _this.on(player, 'loadedmetadata', _this.updateContent);
	    return _this;
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  DurationDisplay.prototype.createEl = function createEl() {
	    var el = _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-duration vjs-time-control vjs-control'
	    });

	    this.contentEl_ = Dom.createEl('div', {
	      className: 'vjs-duration-display',
	      // label the duration time for screen reader users
	      innerHTML: '<span class="vjs-control-text">' + this.localize('Duration Time') + '</span> 0:00'
	    }, {
	      // tell screen readers not to automatically read the time as it changes
	      'aria-live': 'off'
	    });

	    el.appendChild(this.contentEl_);
	    return el;
	  };

	  /**
	   * Update duration time display.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `durationchange`, `timeupdate`, or `loadedmetadata` event that caused
	   *        this function to be called.
	   *
	   * @listens Player#durationchange
	   * @listens Player#timeupdate
	   * @listens Player#loadedmetadata
	   */


	  DurationDisplay.prototype.updateContent = function updateContent(event) {
	    var duration = this.player_.duration();

	    if (duration && this.duration_ !== duration) {
	      this.duration_ = duration;
	      var localizedText = this.localize('Duration Time');
	      var formattedTime = (0, _formatTime2['default'])(duration);

	      // label the duration time for screen reader users
	      this.contentEl_.innerHTML = '<span class="vjs-control-text">' + localizedText + '</span> ' + formattedTime;
	    }
	  };

	  return DurationDisplay;
	}(_component2['default']);

	_component2['default'].registerComponent('DurationDisplay', DurationDisplay);
	exports['default'] = DurationDisplay;


/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file time-divider.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The separator between the current time and duration.
	 * Can be hidden if it's not needed in the design.
	 *
	 * @extends Component
	 */
	var TimeDivider = function (_Component) {
	  _inherits(TimeDivider, _Component);

	  function TimeDivider() {
	    _classCallCheck(this, TimeDivider);

	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */
	  TimeDivider.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-time-control vjs-time-divider',
	      innerHTML: '<div><span>/</span></div>'
	    });
	  };

	  return TimeDivider;
	}(_component2['default']);

	_component2['default'].registerComponent('TimeDivider', TimeDivider);
	exports['default'] = TimeDivider;


/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _dom = __webpack_require__(259);

	var Dom = _interopRequireWildcard(_dom);

	var _formatTime = __webpack_require__(311);

	var _formatTime2 = _interopRequireDefault(_formatTime);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file remaining-time-display.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Displays the time left in the video
	 *
	 * @extends Component
	 */
	var RemainingTimeDisplay = function (_Component) {
	  _inherits(RemainingTimeDisplay, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function RemainingTimeDisplay(player, options) {
	    _classCallCheck(this, RemainingTimeDisplay);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.on(player, 'timeupdate', _this.updateContent);
	    _this.on(player, 'durationchange', _this.updateContent);
	    return _this;
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  RemainingTimeDisplay.prototype.createEl = function createEl() {
	    var el = _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-remaining-time vjs-time-control vjs-control'
	    });

	    this.contentEl_ = Dom.createEl('div', {
	      className: 'vjs-remaining-time-display',
	      // label the remaining time for screen reader users
	      innerHTML: '<span class="vjs-control-text">' + this.localize('Remaining Time') + '</span> -0:00'
	    }, {
	      // tell screen readers not to automatically read the time as it changes
	      'aria-live': 'off'
	    });

	    el.appendChild(this.contentEl_);
	    return el;
	  };

	  /**
	   * Update remaining time display.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `timeupdate` or `durationchange` event that caused this to run.
	   *
	   * @listens Player#timeupdate
	   * @listens Player#durationchange
	   */


	  RemainingTimeDisplay.prototype.updateContent = function updateContent(event) {
	    if (this.player_.duration()) {
	      var localizedText = this.localize('Remaining Time');
	      var formattedTime = (0, _formatTime2['default'])(this.player_.remainingTime());

	      if (formattedTime !== this.formattedTime_) {
	        this.formattedTime_ = formattedTime;
	        this.contentEl_.innerHTML = '<span class="vjs-control-text">' + localizedText + '</span> -' + formattedTime;
	      }
	    }

	    // Allows for smooth scrubbing, when player can't keep up.
	    // var time = (this.player_.scrubbing()) ? this.player_.getCache().currentTime : this.player_.currentTime();
	    // this.contentEl_.innerHTML = vjs.formatTime(time, this.player_.duration());
	  };

	  return RemainingTimeDisplay;
	}(_component2['default']);

	_component2['default'].registerComponent('RemainingTimeDisplay', RemainingTimeDisplay);
	exports['default'] = RemainingTimeDisplay;


/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _dom = __webpack_require__(259);

	var Dom = _interopRequireWildcard(_dom);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file live-display.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	// TODO - Future make it click to snap to live

	/**
	 * Displays the live indicator when duration is Infinity.
	 *
	 * @extends Component
	 */
	var LiveDisplay = function (_Component) {
	  _inherits(LiveDisplay, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function LiveDisplay(player, options) {
	    _classCallCheck(this, LiveDisplay);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.updateShowing();
	    _this.on(_this.player(), 'durationchange', _this.updateShowing);
	    return _this;
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  LiveDisplay.prototype.createEl = function createEl() {
	    var el = _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-live-control vjs-control'
	    });

	    this.contentEl_ = Dom.createEl('div', {
	      className: 'vjs-live-display',
	      innerHTML: '<span class="vjs-control-text">' + this.localize('Stream Type') + '</span>' + this.localize('LIVE')
	    }, {
	      'aria-live': 'off'
	    });

	    el.appendChild(this.contentEl_);
	    return el;
	  };

	  /**
	   * Check the duration to see if the LiveDisplay should be showing or not. Then show/hide
	   * it accordingly
	   *
	   * @param {EventTarget~Event} [event]
	   *        The {@link Player#durationchange} event that caused this function to run.
	   *
	   * @listens Player#durationchange
	   */


	  LiveDisplay.prototype.updateShowing = function updateShowing(event) {
	    if (this.player().duration() === Infinity) {
	      this.show();
	    } else {
	      this.hide();
	    }
	  };

	  return LiveDisplay;
	}(_component2['default']);

	_component2['default'].registerComponent('LiveDisplay', LiveDisplay);
	exports['default'] = LiveDisplay;


/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	__webpack_require__(317);

	__webpack_require__(323);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file progress-control.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The Progress Control component contains the seek bar, load progress,
	 * and play progress.
	 *
	 * @extends Component
	 */
	var ProgressControl = function (_Component) {
	  _inherits(ProgressControl, _Component);

	  function ProgressControl() {
	    _classCallCheck(this, ProgressControl);

	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */
	  ProgressControl.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-progress-control vjs-control'
	    });
	  };

	  return ProgressControl;
	}(_component2['default']);

	/**
	 * Default options for `ProgressControl`
	 *
	 * @type {Object}
	 * @private
	 */


	ProgressControl.prototype.options_ = {
	  children: ['seekBar']
	};

	_component2['default'].registerComponent('ProgressControl', ProgressControl);
	exports['default'] = ProgressControl;


/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _slider = __webpack_require__(318);

	var _slider2 = _interopRequireDefault(_slider);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _fn = __webpack_require__(268);

	var Fn = _interopRequireWildcard(_fn);

	var _formatTime = __webpack_require__(311);

	var _formatTime2 = _interopRequireDefault(_formatTime);

	var _computedStyle = __webpack_require__(319);

	var _computedStyle2 = _interopRequireDefault(_computedStyle);

	__webpack_require__(320);

	__webpack_require__(321);

	__webpack_require__(322);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file seek-bar.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Seek Bar and holder for the progress bars
	 *
	 * @extends Slider
	 */
	var SeekBar = function (_Slider) {
	  _inherits(SeekBar, _Slider);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function SeekBar(player, options) {
	    _classCallCheck(this, SeekBar);

	    var _this = _possibleConstructorReturn(this, _Slider.call(this, player, options));

	    _this.on(player, 'timeupdate', _this.updateProgress);
	    _this.on(player, 'ended', _this.updateProgress);
	    player.ready(Fn.bind(_this, _this.updateProgress));

	    if (options.playerOptions && options.playerOptions.controlBar && options.playerOptions.controlBar.progressControl && options.playerOptions.controlBar.progressControl.keepTooltipsInside) {
	      _this.keepTooltipsInside = options.playerOptions.controlBar.progressControl.keepTooltipsInside;
	    }

	    if (_this.keepTooltipsInside) {
	      _this.tooltipProgressBar = _this.addChild('TooltipProgressBar');
	    }
	    return _this;
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  SeekBar.prototype.createEl = function createEl() {
	    return _Slider.prototype.createEl.call(this, 'div', {
	      className: 'vjs-progress-holder'
	    }, {
	      'aria-label': 'progress bar'
	    });
	  };

	  /**
	   * Update the seek bars tooltip and width.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `timeupdate` or `ended` event that caused this to run.
	   *
	   * @listens Player#timeupdate
	   * @listens Player#ended
	   */


	  SeekBar.prototype.updateProgress = function updateProgress(event) {
	    this.updateAriaAttributes(this.el_);

	    if (this.keepTooltipsInside) {
	      this.updateAriaAttributes(this.tooltipProgressBar.el_);
	      this.tooltipProgressBar.el_.style.width = this.bar.el_.style.width;

	      var playerWidth = parseFloat((0, _computedStyle2['default'])(this.player().el(), 'width'));
	      var tooltipWidth = parseFloat((0, _computedStyle2['default'])(this.tooltipProgressBar.tooltip, 'width'));
	      var tooltipStyle = this.tooltipProgressBar.el().style;

	      tooltipStyle.maxWidth = Math.floor(playerWidth - tooltipWidth / 2) + 'px';
	      tooltipStyle.minWidth = Math.ceil(tooltipWidth / 2) + 'px';
	      tooltipStyle.right = '-' + tooltipWidth / 2 + 'px';
	    }
	  };

	  /**
	   * Update ARIA accessibility attributes
	   *
	   * @param {Element} el
	   *        The element to update with aria accessibility attributes.
	   */


	  SeekBar.prototype.updateAriaAttributes = function updateAriaAttributes(el) {
	    // Allows for smooth scrubbing, when player can't keep up.
	    var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();

	    // machine readable value of progress bar (percentage complete)
	    el.setAttribute('aria-valuenow', (this.getPercent() * 100).toFixed(2));
	    // human readable value of progress bar (time complete)
	    el.setAttribute('aria-valuetext', (0, _formatTime2['default'])(time, this.player_.duration()));
	  };

	  /**
	   * Get percentage of video played
	   *
	   * @return {number}
	   *         The percentage played
	   */


	  SeekBar.prototype.getPercent = function getPercent() {
	    var percent = this.player_.currentTime() / this.player_.duration();

	    return percent >= 1 ? 1 : percent;
	  };

	  /**
	   * Handle mouse down on seek bar
	   *
	   * @param {EventTarget~Event} event
	   *        The `mousedown` event that caused this to run.
	   *
	   * @listens mousedown
	   */


	  SeekBar.prototype.handleMouseDown = function handleMouseDown(event) {
	    _Slider.prototype.handleMouseDown.call(this, event);

	    this.player_.scrubbing(true);

	    this.videoWasPlaying = !this.player_.paused();

	    this.pauseTimer_ = this.setTimeout(function () {
	      this.player_.pause();
	    }, 100);
	  };

	  /**
	   * Handle mouse move on seek bar
	   *
	   * @param {EventTarget~Event} event
	   *        The `mousemove` event that caused this to run.
	   *
	   * @listens mousemove
	   */


	  SeekBar.prototype.handleMouseMove = function handleMouseMove(event) {
	    var newTime = this.calculateDistance(event) * this.player_.duration();

	    // Don't let video end while scrubbing.
	    if (newTime === this.player_.duration()) {
	      newTime = newTime - 0.1;
	    }

	    // Set new time (tell player to seek to new time)
	    this.player_.currentTime(newTime);

	    if (event.type === 'mousemove') {
	      this.clearTimeout(this.pauseTimer_);
	      this.player_.pause();
	    }
	  };

	  /**
	   * Handle mouse up on seek bar
	   *
	   * @param {EventTarget~Event} event
	   *        The `mouseup` event that caused this to run.
	   *
	   * @listens mouseup
	   */


	  SeekBar.prototype.handleMouseUp = function handleMouseUp(event) {
	    _Slider.prototype.handleMouseUp.call(this, event);

	    this.clearTimeout(this.pauseTimer_);

	    this.player_.scrubbing(false);
	    if (this.videoWasPlaying) {
	      this.player_.play();
	    }
	  };

	  /**
	   * Move more quickly fast forward for keyboard-only users
	   */


	  SeekBar.prototype.stepForward = function stepForward() {
	    // more quickly fast forward for keyboard-only users
	    this.player_.currentTime(this.player_.currentTime() + 5);
	  };

	  /**
	   * Move more quickly rewind for keyboard-only users
	   */


	  SeekBar.prototype.stepBack = function stepBack() {
	    // more quickly rewind for keyboard-only users
	    this.player_.currentTime(this.player_.currentTime() - 5);
	  };

	  return SeekBar;
	}(_slider2['default']);

	/**
	 * Default options for the `SeekBar`
	 *
	 * @type {Object}
	 * @private
	 */


	SeekBar.prototype.options_ = {
	  children: ['loadProgressBar', 'mouseTimeDisplay', 'playProgressBar'],
	  barName: 'playProgressBar'
	};

	/**
	 * Call the update event for this Slider when this event happens on the player.
	 *
	 * @type {string}
	 */
	SeekBar.prototype.playerEvent = 'timeupdate';

	_component2['default'].registerComponent('SeekBar', SeekBar);
	exports['default'] = SeekBar;


/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _dom = __webpack_require__(259);

	var Dom = _interopRequireWildcard(_dom);

	var _obj = __webpack_require__(263);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file slider.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The base functionality for a slider. Can be vertical or horizontal.
	 * For instance the volume bar or the seek bar on a video is a slider.
	 *
	 * @extends Component
	 */
	var Slider = function (_Component) {
	  _inherits(Slider, _Component);

	  /**
	   * Create an instance of this class
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function Slider(player, options) {
	    _classCallCheck(this, Slider);

	    // Set property names to bar to match with the child Slider class is looking for
	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.bar = _this.getChild(_this.options_.barName);

	    // Set a horizontal or vertical class on the slider depending on the slider type
	    _this.vertical(!!_this.options_.vertical);

	    _this.on('mousedown', _this.handleMouseDown);
	    _this.on('touchstart', _this.handleMouseDown);
	    _this.on('focus', _this.handleFocus);
	    _this.on('blur', _this.handleBlur);
	    _this.on('click', _this.handleClick);

	    _this.on(player, 'controlsvisible', _this.update);
	    _this.on(player, _this.playerEvent, _this.update);
	    return _this;
	  }

	  /**
	   * Create the `Button`s DOM element.
	   *
	   * @param {string} type
	   *        Type of element to create.
	   *
	   * @param {Object} [props={}]
	   *        List of properties in Object form.
	   *
	   * @param {Object} [attributes={}]
	   *        list of attributes in Object form.
	   *
	   * @return {Element}
	   *         The element that gets created.
	   */


	  Slider.prototype.createEl = function createEl(type) {
	    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	    // Add the slider element class to all sub classes
	    props.className = props.className + ' vjs-slider';
	    props = (0, _obj.assign)({
	      tabIndex: 0
	    }, props);

	    attributes = (0, _obj.assign)({
	      'role': 'slider',
	      'aria-valuenow': 0,
	      'aria-valuemin': 0,
	      'aria-valuemax': 100,
	      'tabIndex': 0
	    }, attributes);

	    return _Component.prototype.createEl.call(this, type, props, attributes);
	  };

	  /**
	   * Handle `mousedown` or `touchstart` events on the `Slider`.
	   *
	   * @param {EventTarget~Event} event
	   *        `mousedown` or `touchstart` event that triggered this function
	   *
	   * @listens mousedown
	   * @listens touchstart
	   * @fires Slider#slideractive
	   */


	  Slider.prototype.handleMouseDown = function handleMouseDown(event) {
	    var doc = this.bar.el_.ownerDocument;

	    event.preventDefault();
	    Dom.blockTextSelection();

	    this.addClass('vjs-sliding');
	    /**
	     * Triggered when the slider is in an active state
	     *
	     * @event Slider#slideractive
	     * @type {EventTarget~Event}
	     */
	    this.trigger('slideractive');

	    this.on(doc, 'mousemove', this.handleMouseMove);
	    this.on(doc, 'mouseup', this.handleMouseUp);
	    this.on(doc, 'touchmove', this.handleMouseMove);
	    this.on(doc, 'touchend', this.handleMouseUp);

	    this.handleMouseMove(event);
	  };

	  /**
	   * Handle the `mousemove`, `touchmove`, and `mousedown` events on this `Slider`.
	   * The `mousemove` and `touchmove` events will only only trigger this function during
	   * `mousedown` and `touchstart`. This is due to {@link Slider#handleMouseDown} and
	   * {@link Slider#handleMouseUp}.
	   *
	   * @param {EventTarget~Event} event
	   *        `mousedown`, `mousemove`, `touchstart`, or `touchmove` event that triggered
	   *        this function
	   *
	   * @listens mousemove
	   * @listens touchmove
	   */


	  Slider.prototype.handleMouseMove = function handleMouseMove(event) {};

	  /**
	   * Handle `mouseup` or `touchend` events on the `Slider`.
	   *
	   * @param {EventTarget~Event} event
	   *        `mouseup` or `touchend` event that triggered this function.
	   *
	   * @listens touchend
	   * @listens mouseup
	   * @fires Slider#sliderinactive
	   */


	  Slider.prototype.handleMouseUp = function handleMouseUp() {
	    var doc = this.bar.el_.ownerDocument;

	    Dom.unblockTextSelection();

	    this.removeClass('vjs-sliding');
	    /**
	     * Triggered when the slider is no longer in an active state.
	     *
	     * @event Slider#sliderinactive
	     * @type {EventTarget~Event}
	     */
	    this.trigger('sliderinactive');

	    this.off(doc, 'mousemove', this.handleMouseMove);
	    this.off(doc, 'mouseup', this.handleMouseUp);
	    this.off(doc, 'touchmove', this.handleMouseMove);
	    this.off(doc, 'touchend', this.handleMouseUp);

	    this.update();
	  };

	  /**
	   * Update the progress bar of the `Slider`.
	   */


	  Slider.prototype.update = function update() {
	    // In VolumeBar init we have a setTimeout for update that pops and update to the end of the
	    // execution stack. The player is destroyed before then update will cause an error
	    if (!this.el_) {
	      return;
	    }

	    // If scrubbing, we could use a cached value to make the handle keep up with the user's mouse.
	    // On HTML5 browsers scrubbing is really smooth, but some flash players are slow, so we might want to utilize this later.
	    // var progress =  (this.player_.scrubbing()) ? this.player_.getCache().currentTime / this.player_.duration() : this.player_.currentTime() / this.player_.duration();
	    var progress = this.getPercent();
	    var bar = this.bar;

	    // If there's no bar...
	    if (!bar) {
	      return;
	    }

	    // Protect against no duration and other division issues
	    if (typeof progress !== 'number' || progress !== progress || progress < 0 || progress === Infinity) {
	      progress = 0;
	    }

	    // Convert to a percentage for setting
	    var percentage = (progress * 100).toFixed(2) + '%';

	    // Set the new bar width or height
	    if (this.vertical()) {
	      bar.el().style.height = percentage;
	    } else {
	      bar.el().style.width = percentage;
	    }
	  };

	  /**
	   * Calculate distance for slider
	   *
	   * @param {EventTarget~Event} event
	   *        The event that caused this function to run.
	   *
	   * @return {number}
	   *         The current position of the Slider.
	   *         - postition.x for vertical `Slider`s
	   *         - postition.y for horizontal `Slider`s
	   */


	  Slider.prototype.calculateDistance = function calculateDistance(event) {
	    var position = Dom.getPointerPosition(this.el_, event);

	    if (this.vertical()) {
	      return position.y;
	    }
	    return position.x;
	  };

	  /**
	   * Handle a `focus` event on this `Slider`.
	   *
	   * @param {EventTarget~Event} event
	   *        The `focus` event that caused this function to run.
	   *
	   * @listens focus
	   */


	  Slider.prototype.handleFocus = function handleFocus() {
	    this.on(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);
	  };

	  /**
	   * Handle a `keydown` event on the `Slider`. Watches for left, rigth, up, and down
	   * arrow keys. This function will only be called when the slider has focus. See
	   * {@link Slider#handleFocus} and {@link Slider#handleBlur}.
	   *
	   * @param {EventTarget~Event} event
	   *        the `keydown` event that caused this function to run.
	   *
	   * @listens keydown
	   */


	  Slider.prototype.handleKeyPress = function handleKeyPress(event) {
	    // Left and Down Arrows
	    if (event.which === 37 || event.which === 40) {
	      event.preventDefault();
	      this.stepBack();

	      // Up and Right Arrows
	    } else if (event.which === 38 || event.which === 39) {
	      event.preventDefault();
	      this.stepForward();
	    }
	  };

	  /**
	   * Handle a `blur` event on this `Slider`.
	   *
	   * @param {EventTarget~Event} event
	   *        The `blur` event that caused this function to run.
	   *
	   * @listens blur
	   */

	  Slider.prototype.handleBlur = function handleBlur() {
	    this.off(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);
	  };

	  /**
	   * Listener for click events on slider, used to prevent clicks
	   *   from bubbling up to parent elements like button menus.
	   *
	   * @param {Object} event
	   *        Event that caused this object to run
	   */


	  Slider.prototype.handleClick = function handleClick(event) {
	    event.stopImmediatePropagation();
	    event.preventDefault();
	  };

	  /**
	   * Get/set if slider is horizontal for vertical
	   *
	   * @param {boolean} [bool]
	   *        - true if slider is vertical,
	   *        - false is horizontal
	   *
	   * @return {boolean|Slider}
	   *         - true if slider is vertical, and getting
	   *         - false is horizontal, and getting
	   *         - a reference to this object when setting
	   */


	  Slider.prototype.vertical = function vertical(bool) {
	    if (bool === undefined) {
	      return this.vertical_ || false;
	    }

	    this.vertical_ = !!bool;

	    if (this.vertical_) {
	      this.addClass('vjs-slider-vertical');
	    } else {
	      this.addClass('vjs-slider-horizontal');
	    }

	    return this;
	  };

	  return Slider;
	}(_component2['default']);

	_component2['default'].registerComponent('Slider', Slider);
	exports['default'] = Slider;


/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = computedStyle;

	var _window = __webpack_require__(255);

	var _window2 = _interopRequireDefault(_window);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * A safe getComputedStyle with an IE8 fallback.
	 *
	 * This is needed because in Firefox, if the player is loaded in an iframe with
	 * `display:none`, then `getComputedStyle` returns `null`, so, we do a null-check to
	 * make sure  that the player doesn't break in these cases.
	 *
	 * @param {Element} el
	 *        The element you want the computed style of
	 *
	 * @param {string} prop
	 *        The property name you want
	 *
	 * @see https://bugzilla.mozilla.org/show_bug.cgi?id=548397
	 */
	function computedStyle(el, prop) {
	  if (!el || !prop) {
	    return '';
	  }

	  if (typeof _window2['default'].getComputedStyle === 'function') {
	    var cs = _window2['default'].getComputedStyle(el);

	    return cs ? cs[prop] : '';
	  }

	  return el.currentStyle[prop] || '';
	} /**
	   * @file computed-style.js
	   * @module computed-style
	   */


/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _dom = __webpack_require__(259);

	var Dom = _interopRequireWildcard(_dom);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file load-progress-bar.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Shows loading progress
	 *
	 * @extends Component
	 */
	var LoadProgressBar = function (_Component) {
	  _inherits(LoadProgressBar, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function LoadProgressBar(player, options) {
	    _classCallCheck(this, LoadProgressBar);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.partEls_ = [];
	    _this.on(player, 'progress', _this.update);
	    return _this;
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  LoadProgressBar.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-load-progress',
	      innerHTML: '<span class="vjs-control-text"><span>' + this.localize('Loaded') + '</span>: 0%</span>'
	    });
	  };

	  /**
	   * Update progress bar
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `progress` event that caused this function to run.
	   *
	   * @listens Player#progress
	   */


	  LoadProgressBar.prototype.update = function update(event) {
	    var buffered = this.player_.buffered();
	    var duration = this.player_.duration();
	    var bufferedEnd = this.player_.bufferedEnd();
	    var children = this.partEls_;

	    // get the percent width of a time compared to the total end
	    var percentify = function percentify(time, end) {
	      // no NaN
	      var percent = time / end || 0;

	      return (percent >= 1 ? 1 : percent) * 100 + '%';
	    };

	    // update the width of the progress bar
	    this.el_.style.width = percentify(bufferedEnd, duration);

	    // add child elements to represent the individual buffered time ranges
	    for (var i = 0; i < buffered.length; i++) {
	      var start = buffered.start(i);
	      var end = buffered.end(i);
	      var part = children[i];

	      if (!part) {
	        part = this.el_.appendChild(Dom.createEl());
	        children[i] = part;
	      }

	      // set the percent based on the width of the progress bar (bufferedEnd)
	      part.style.left = percentify(start, bufferedEnd);
	      part.style.width = percentify(end - start, bufferedEnd);
	    }

	    // remove unused buffered range elements
	    for (var _i = children.length; _i > buffered.length; _i--) {
	      this.el_.removeChild(children[_i - 1]);
	    }
	    children.length = buffered.length;
	  };

	  return LoadProgressBar;
	}(_component2['default']);

	_component2['default'].registerComponent('LoadProgressBar', LoadProgressBar);
	exports['default'] = LoadProgressBar;


/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _fn = __webpack_require__(268);

	var Fn = _interopRequireWildcard(_fn);

	var _formatTime = __webpack_require__(311);

	var _formatTime2 = _interopRequireDefault(_formatTime);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file play-progress-bar.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Shows play progress
	 *
	 * @extends Component
	 */
	var PlayProgressBar = function (_Component) {
	  _inherits(PlayProgressBar, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function PlayProgressBar(player, options) {
	    _classCallCheck(this, PlayProgressBar);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.updateDataAttr();
	    _this.on(player, 'timeupdate', _this.updateDataAttr);
	    player.ready(Fn.bind(_this, _this.updateDataAttr));

	    if (options.playerOptions && options.playerOptions.controlBar && options.playerOptions.controlBar.progressControl && options.playerOptions.controlBar.progressControl.keepTooltipsInside) {
	      _this.keepTooltipsInside = options.playerOptions.controlBar.progressControl.keepTooltipsInside;
	    }

	    if (_this.keepTooltipsInside) {
	      _this.addClass('vjs-keep-tooltips-inside');
	    }
	    return _this;
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  PlayProgressBar.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-play-progress vjs-slider-bar',
	      innerHTML: '<span class="vjs-control-text"><span>' + this.localize('Progress') + '</span>: 0%</span>'
	    });
	  };

	  /**
	   * Update the data-current-time attribute on the `PlayProgressBar`.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `timeupdate` event that caused this to run.
	   *
	   * @listens Player#timeupdate
	   */


	  PlayProgressBar.prototype.updateDataAttr = function updateDataAttr(event) {
	    var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();

	    this.el_.setAttribute('data-current-time', (0, _formatTime2['default'])(time, this.player_.duration()));
	  };

	  return PlayProgressBar;
	}(_component2['default']);

	_component2['default'].registerComponent('PlayProgressBar', PlayProgressBar);
	exports['default'] = PlayProgressBar;


/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _fn = __webpack_require__(268);

	var Fn = _interopRequireWildcard(_fn);

	var _formatTime = __webpack_require__(311);

	var _formatTime2 = _interopRequireDefault(_formatTime);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file play-progress-bar.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Shows play progress
	 *
	 * @extends Component
	 */
	var TooltipProgressBar = function (_Component) {
	  _inherits(TooltipProgressBar, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function TooltipProgressBar(player, options) {
	    _classCallCheck(this, TooltipProgressBar);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.updateDataAttr();
	    _this.on(player, 'timeupdate', _this.updateDataAttr);
	    player.ready(Fn.bind(_this, _this.updateDataAttr));
	    return _this;
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  TooltipProgressBar.prototype.createEl = function createEl() {
	    var el = _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-tooltip-progress-bar vjs-slider-bar',
	      innerHTML: '<div class="vjs-time-tooltip"></div>\n        <span class="vjs-control-text"><span>' + this.localize('Progress') + '</span>: 0%</span>'
	    });

	    this.tooltip = el.querySelector('.vjs-time-tooltip');

	    return el;
	  };

	  /**
	   * Updatet the data-current-time attribute for TooltipProgressBar
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `timeupdate` event that caused this function to run.
	   *
	   * @listens Player#timeupdate
	   */


	  TooltipProgressBar.prototype.updateDataAttr = function updateDataAttr(event) {
	    var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
	    var formattedTime = (0, _formatTime2['default'])(time, this.player_.duration());

	    this.el_.setAttribute('data-current-time', formattedTime);
	    this.tooltip.innerHTML = formattedTime;
	  };

	  return TooltipProgressBar;
	}(_component2['default']);

	_component2['default'].registerComponent('TooltipProgressBar', TooltipProgressBar);
	exports['default'] = TooltipProgressBar;


/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _dom = __webpack_require__(259);

	var Dom = _interopRequireWildcard(_dom);

	var _fn = __webpack_require__(268);

	var Fn = _interopRequireWildcard(_fn);

	var _formatTime = __webpack_require__(311);

	var _formatTime2 = _interopRequireDefault(_formatTime);

	var _computedStyle = __webpack_require__(319);

	var _computedStyle2 = _interopRequireDefault(_computedStyle);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file mouse-time-display.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The Mouse Time Display component shows the time you will seek to
	 * when hovering over the progress bar
	 *
	 * @extends Component
	 */
	var MouseTimeDisplay = function (_Component) {
	  _inherits(MouseTimeDisplay, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function MouseTimeDisplay(player, options) {
	    _classCallCheck(this, MouseTimeDisplay);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));

	    if (options.playerOptions && options.playerOptions.controlBar && options.playerOptions.controlBar.progressControl && options.playerOptions.controlBar.progressControl.keepTooltipsInside) {
	      _this.keepTooltipsInside = options.playerOptions.controlBar.progressControl.keepTooltipsInside;
	    }

	    if (_this.keepTooltipsInside) {
	      _this.tooltip = Dom.createEl('div', { className: 'vjs-time-tooltip' });
	      _this.el().appendChild(_this.tooltip);
	      _this.addClass('vjs-keep-tooltips-inside');
	    }

	    _this.update(0, 0);

	    player.on('ready', function () {
	      _this.on(player.controlBar.progressControl.el(), 'mousemove', Fn.throttle(Fn.bind(_this, _this.handleMouseMove), 25));
	    });
	    return _this;
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  MouseTimeDisplay.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-mouse-display'
	    });
	  };

	  /**
	   * Handle the mouse move event on the `MouseTimeDisplay`.
	   *
	   * @param {EventTarget~Event} event
	   *        The `mousemove` event that caused this to event to run.
	   *
	   * @listen mousemove
	   */


	  MouseTimeDisplay.prototype.handleMouseMove = function handleMouseMove(event) {
	    var duration = this.player_.duration();
	    var newTime = this.calculateDistance(event) * duration;
	    var position = event.pageX - Dom.findElPosition(this.el().parentNode).left;

	    this.update(newTime, position);
	  };

	  /**
	   * Update the time and posistion of the `MouseTimeDisplay`.
	   *
	   * @param {number} newTime
	   *        Time to change the `MouseTimeDisplay` to.
	   *
	   * @param {nubmer} position
	   *        Postion from the left of the in pixels.
	   */


	  MouseTimeDisplay.prototype.update = function update(newTime, position) {
	    var time = (0, _formatTime2['default'])(newTime, this.player_.duration());

	    this.el().style.left = position + 'px';
	    this.el().setAttribute('data-current-time', time);

	    if (this.keepTooltipsInside) {
	      var clampedPosition = this.clampPosition_(position);
	      var difference = position - clampedPosition + 1;
	      var tooltipWidth = parseFloat((0, _computedStyle2['default'])(this.tooltip, 'width'));
	      var tooltipWidthHalf = tooltipWidth / 2;

	      this.tooltip.innerHTML = time;
	      this.tooltip.style.right = '-' + (tooltipWidthHalf - difference) + 'px';
	    }
	  };

	  /**
	   * Get the mouse pointers x coordinate in pixels.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `mousemove` event that was passed to this function by
	   *        {@link MouseTimeDisplay#handleMouseMove}
	   *
	   * @return {number}
	   *         THe x position in pixels of the mouse pointer.
	   */


	  MouseTimeDisplay.prototype.calculateDistance = function calculateDistance(event) {
	    return Dom.getPointerPosition(this.el().parentNode, event).x;
	  };

	  /**
	   * This takes in a horizontal position for the bar and returns a clamped position.
	   * Clamped position means that it will keep the position greater than half the width
	   * of the tooltip and smaller than the player width minus half the width o the tooltip.
	   * It will only clamp the position if `keepTooltipsInside` option is set.
	   *
	   * @param {number} position
	   *        The position the bar wants to be
	   *
	   * @return {number}
	   *         The (potentially) new clamped position.
	   *
	   * @private
	   */


	  MouseTimeDisplay.prototype.clampPosition_ = function clampPosition_(position) {
	    if (!this.keepTooltipsInside) {
	      return position;
	    }

	    var playerWidth = parseFloat((0, _computedStyle2['default'])(this.player().el(), 'width'));
	    var tooltipWidth = parseFloat((0, _computedStyle2['default'])(this.tooltip, 'width'));
	    var tooltipWidthHalf = tooltipWidth / 2;
	    var actualPosition = position;

	    if (position < tooltipWidthHalf) {
	      actualPosition = Math.ceil(tooltipWidthHalf);
	    } else if (position > playerWidth - tooltipWidthHalf) {
	      actualPosition = Math.floor(playerWidth - tooltipWidthHalf);
	    }

	    return actualPosition;
	  };

	  return MouseTimeDisplay;
	}(_component2['default']);

	_component2['default'].registerComponent('MouseTimeDisplay', MouseTimeDisplay);
	exports['default'] = MouseTimeDisplay;


/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _button = __webpack_require__(306);

	var _button2 = _interopRequireDefault(_button);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file fullscreen-toggle.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Toggle fullscreen video
	 *
	 * @extends Button
	 */
	var FullscreenToggle = function (_Button) {
	  _inherits(FullscreenToggle, _Button);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function FullscreenToggle(player, options) {
	    _classCallCheck(this, FullscreenToggle);

	    var _this = _possibleConstructorReturn(this, _Button.call(this, player, options));

	    _this.on(player, 'fullscreenchange', _this.handleFullscreenChange);
	    return _this;
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  FullscreenToggle.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-fullscreen-control ' + _Button.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Handles fullscreenchange on the player and change control text accordingly.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The {@link Player#fullscreenchange} event that caused this function to be
	   *        called.
	   *
	   * @listens Player#fullscreenchange
	   */


	  FullscreenToggle.prototype.handleFullscreenChange = function handleFullscreenChange(event) {
	    if (this.player_.isFullscreen()) {
	      this.controlText('Non-Fullscreen');
	    } else {
	      this.controlText('Fullscreen');
	    }
	  };

	  /**
	   * This gets called when an `FullscreenToggle` is "clicked". See
	   * {@link ClickableComponent} for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  FullscreenToggle.prototype.handleClick = function handleClick(event) {
	    if (!this.player_.isFullscreen()) {
	      this.player_.requestFullscreen();
	    } else {
	      this.player_.exitFullscreen();
	    }
	  };

	  return FullscreenToggle;
	}(_button2['default']);

	/**
	 * The text that should display over the `FullscreenToggle`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */


	FullscreenToggle.prototype.controlText_ = 'Fullscreen';

	_component2['default'].registerComponent('FullscreenToggle', FullscreenToggle);
	exports['default'] = FullscreenToggle;


/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	__webpack_require__(326);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file volume-control.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	// Required children


	/**
	 * The component for controlling the volume level
	 *
	 * @extends Component
	 */
	var VolumeControl = function (_Component) {
	  _inherits(VolumeControl, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options={}]
	   *        The key/value store of player options.
	   */
	  function VolumeControl(player, options) {
	    _classCallCheck(this, VolumeControl);

	    // hide volume controls when they're not supported by the current tech
	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));

	    if (player.tech_ && player.tech_.featuresVolumeControl === false) {
	      _this.addClass('vjs-hidden');
	    }
	    _this.on(player, 'loadstart', function () {
	      if (player.tech_.featuresVolumeControl === false) {
	        this.addClass('vjs-hidden');
	      } else {
	        this.removeClass('vjs-hidden');
	      }
	    });
	    return _this;
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  VolumeControl.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-volume-control vjs-control'
	    });
	  };

	  return VolumeControl;
	}(_component2['default']);

	/**
	 * Default options for the `VolumeControl`
	 *
	 * @type {Object}
	 * @private
	 */


	VolumeControl.prototype.options_ = {
	  children: ['volumeBar']
	};

	_component2['default'].registerComponent('VolumeControl', VolumeControl);
	exports['default'] = VolumeControl;


/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _slider = __webpack_require__(318);

	var _slider2 = _interopRequireDefault(_slider);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _fn = __webpack_require__(268);

	var Fn = _interopRequireWildcard(_fn);

	__webpack_require__(327);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file volume-bar.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	// Required children


	/**
	 * The bar that contains the volume level and can be clicked on to adjust the level
	 *
	 * @extends Slider
	 */
	var VolumeBar = function (_Slider) {
	  _inherits(VolumeBar, _Slider);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function VolumeBar(player, options) {
	    _classCallCheck(this, VolumeBar);

	    var _this = _possibleConstructorReturn(this, _Slider.call(this, player, options));

	    _this.on(player, 'volumechange', _this.updateARIAAttributes);
	    player.ready(Fn.bind(_this, _this.updateARIAAttributes));
	    return _this;
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  VolumeBar.prototype.createEl = function createEl() {
	    return _Slider.prototype.createEl.call(this, 'div', {
	      className: 'vjs-volume-bar vjs-slider-bar'
	    }, {
	      'aria-label': 'volume level'
	    });
	  };

	  /**
	   * Handle movement events on the {@link VolumeMenuButton}.
	   *
	   * @param {EventTarget~Event} event
	   *        The event that caused this function to run.
	   *
	   * @listens mousemove
	   */


	  VolumeBar.prototype.handleMouseMove = function handleMouseMove(event) {
	    this.checkMuted();
	    this.player_.volume(this.calculateDistance(event));
	  };

	  /**
	   * If the player is muted unmute it.
	   */


	  VolumeBar.prototype.checkMuted = function checkMuted() {
	    if (this.player_.muted()) {
	      this.player_.muted(false);
	    }
	  };

	  /**
	   * Get percent of volume level
	   *
	   * @return {number}
	   *         Volume level percent as a decimal number.
	   */


	  VolumeBar.prototype.getPercent = function getPercent() {
	    if (this.player_.muted()) {
	      return 0;
	    }
	    return this.player_.volume();
	  };

	  /**
	   * Increase volume level for keyboard users
	   */


	  VolumeBar.prototype.stepForward = function stepForward() {
	    this.checkMuted();
	    this.player_.volume(this.player_.volume() + 0.1);
	  };

	  /**
	   * Decrease volume level for keyboard users
	   */


	  VolumeBar.prototype.stepBack = function stepBack() {
	    this.checkMuted();
	    this.player_.volume(this.player_.volume() - 0.1);
	  };

	  /**
	   * Update ARIA accessibility attributes
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `volumechange` event that caused this function to run.
	   *
	   * @listens Player#volumechange
	   */


	  VolumeBar.prototype.updateARIAAttributes = function updateARIAAttributes(event) {
	    // Current value of volume bar as a percentage
	    var volume = (this.player_.volume() * 100).toFixed(2);

	    this.el_.setAttribute('aria-valuenow', volume);
	    this.el_.setAttribute('aria-valuetext', volume + '%');
	  };

	  return VolumeBar;
	}(_slider2['default']);

	/**
	 * Default options for the `VolumeBar`
	 *
	 * @type {Object}
	 * @private
	 */


	VolumeBar.prototype.options_ = {
	  children: ['volumeLevel'],
	  barName: 'volumeLevel'
	};

	/**
	 * Call the update event for this Slider when this event happens on the player.
	 *
	 * @type {string}
	 */
	VolumeBar.prototype.playerEvent = 'volumechange';

	_component2['default'].registerComponent('VolumeBar', VolumeBar);
	exports['default'] = VolumeBar;


/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file volume-level.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Shows volume level
	 *
	 * @extends Component
	 */
	var VolumeLevel = function (_Component) {
	  _inherits(VolumeLevel, _Component);

	  function VolumeLevel() {
	    _classCallCheck(this, VolumeLevel);

	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */
	  VolumeLevel.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-volume-level',
	      innerHTML: '<span class="vjs-control-text"></span>'
	    });
	  };

	  return VolumeLevel;
	}(_component2['default']);

	_component2['default'].registerComponent('VolumeLevel', VolumeLevel);
	exports['default'] = VolumeLevel;


/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _fn = __webpack_require__(268);

	var Fn = _interopRequireWildcard(_fn);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _popup = __webpack_require__(329);

	var _popup2 = _interopRequireDefault(_popup);

	var _popupButton = __webpack_require__(330);

	var _popupButton2 = _interopRequireDefault(_popupButton);

	var _muteToggle = __webpack_require__(331);

	var _muteToggle2 = _interopRequireDefault(_muteToggle);

	var _volumeBar = __webpack_require__(326);

	var _volumeBar2 = _interopRequireDefault(_volumeBar);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file volume-menu-button.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Button for volume popup
	 *
	 * @extends PopupButton
	 */
	var VolumeMenuButton = function (_PopupButton) {
	  _inherits(VolumeMenuButton, _PopupButton);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options={}]
	   *        The key/value store of player options.
	   */
	  function VolumeMenuButton(player) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    _classCallCheck(this, VolumeMenuButton);

	    // Default to inline
	    if (options.inline === undefined) {
	      options.inline = true;
	    }

	    // If the vertical option isn't passed at all, default to true.
	    if (options.vertical === undefined) {
	      // If an inline volumeMenuButton is used, we should default to using
	      // a horizontal slider for obvious reasons.
	      if (options.inline) {
	        options.vertical = false;
	      } else {
	        options.vertical = true;
	      }
	    }

	    // The vertical option needs to be set on the volumeBar as well,
	    // since that will need to be passed along to the VolumeBar constructor
	    options.volumeBar = options.volumeBar || {};
	    options.volumeBar.vertical = !!options.vertical;

	    // Same listeners as MuteToggle
	    var _this = _possibleConstructorReturn(this, _PopupButton.call(this, player, options));

	    _this.on(player, 'volumechange', _this.volumeUpdate);
	    _this.on(player, 'loadstart', _this.volumeUpdate);

	    // hide mute toggle if the current tech doesn't support volume control
	    function updateVisibility() {
	      if (player.tech_ && player.tech_.featuresVolumeControl === false) {
	        this.addClass('vjs-hidden');
	      } else {
	        this.removeClass('vjs-hidden');
	      }
	    }

	    updateVisibility.call(_this);
	    _this.on(player, 'loadstart', updateVisibility);

	    _this.on(_this.volumeBar, ['slideractive', 'focus'], function () {
	      this.addClass('vjs-slider-active');
	    });

	    _this.on(_this.volumeBar, ['sliderinactive', 'blur'], function () {
	      this.removeClass('vjs-slider-active');
	    });

	    _this.on(_this.volumeBar, ['focus'], function () {
	      this.addClass('vjs-lock-showing');
	    });

	    _this.on(_this.volumeBar, ['blur'], function () {
	      this.removeClass('vjs-lock-showing');
	    });
	    return _this;
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  VolumeMenuButton.prototype.buildCSSClass = function buildCSSClass() {
	    var orientationClass = '';

	    if (this.options_.vertical) {
	      orientationClass = 'vjs-volume-menu-button-vertical';
	    } else {
	      orientationClass = 'vjs-volume-menu-button-horizontal';
	    }

	    return 'vjs-volume-menu-button ' + _PopupButton.prototype.buildCSSClass.call(this) + ' ' + orientationClass;
	  };

	  /**
	   * Create the VolumeMenuButton popup
	   *
	   * @return {Popup}
	   *         The popup that was created
	   */


	  VolumeMenuButton.prototype.createPopup = function createPopup() {
	    var popup = new _popup2['default'](this.player_, {
	      contentElType: 'div'
	    });

	    var vb = new _volumeBar2['default'](this.player_, this.options_.volumeBar);

	    popup.addChild(vb);

	    this.menuContent = popup;
	    this.volumeBar = vb;

	    this.attachVolumeBarEvents();

	    return popup;
	  };

	  /**
	   * This gets called when an `VolumeMenuButton` is "clicked". See
	   * {@link ClickableComponent} for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  VolumeMenuButton.prototype.handleClick = function handleClick(event) {
	    _muteToggle2['default'].prototype.handleClick.call(this);
	    _PopupButton.prototype.handleClick.call(this);
	  };

	  /**
	   * Add events listeners to the created `VolumeBar`.
	   */


	  VolumeMenuButton.prototype.attachVolumeBarEvents = function attachVolumeBarEvents() {
	    this.menuContent.on(['mousedown', 'touchdown'], Fn.bind(this, this.handleMouseDown));
	  };

	  /**
	   * Handle the `mousedown` and `touchdown` events on the `VolumeBar`
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `mousedown` or `touchdown` event that caused this to run.
	   *
	   * @listens mousedown
	   * @listens touchdown
	   */


	  VolumeMenuButton.prototype.handleMouseDown = function handleMouseDown(event) {
	    this.on(['mousemove', 'touchmove'], Fn.bind(this.volumeBar, this.volumeBar.handleMouseMove));
	    this.on(this.el_.ownerDocument, ['mouseup', 'touchend'], this.handleMouseUp);
	  };

	  /**
	   * Handle the `mouseup` and `touchend` events on the `VolumeBar`
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `mouseup` or `touchend` event that caused this to run.
	   *
	   * @listens mouseup
	   * @listens touchend
	   */


	  VolumeMenuButton.prototype.handleMouseUp = function handleMouseUp(event) {
	    this.off(['mousemove', 'touchmove'], Fn.bind(this.volumeBar, this.volumeBar.handleMouseMove));
	  };

	  return VolumeMenuButton;
	}(_popupButton2['default']);

	/**
	 * @borrows MuteToggle#update as VolumeMenuButton#volumeUpdate
	 */


	VolumeMenuButton.prototype.volumeUpdate = _muteToggle2['default'].prototype.update;

	/**
	 * The text that should display over the `VolumeMenuButton`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */
	VolumeMenuButton.prototype.controlText_ = 'Mute';

	_component2['default'].registerComponent('VolumeMenuButton', VolumeMenuButton);
	exports['default'] = VolumeMenuButton;


/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _dom = __webpack_require__(259);

	var Dom = _interopRequireWildcard(_dom);

	var _fn = __webpack_require__(268);

	var Fn = _interopRequireWildcard(_fn);

	var _events = __webpack_require__(265);

	var Events = _interopRequireWildcard(_events);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file popup.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The Popup component is used to build pop up controls.
	 *
	 * @extends Component
	 */
	var Popup = function (_Component) {
	  _inherits(Popup, _Component);

	  function Popup() {
	    _classCallCheck(this, Popup);

	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  /**
	   * Add a popup item to the popup
	   *
	   * @param {Object|string} component
	   *        Component or component type to add
	   *
	   */
	  Popup.prototype.addItem = function addItem(component) {
	    this.addChild(component);
	    component.on('click', Fn.bind(this, function () {
	      this.unlockShowing();
	    }));
	  };

	  /**
	   * Create the `PopupButton`s DOM element.
	   *
	   * @return {Element}
	   *         The element that gets created.
	   */


	  Popup.prototype.createEl = function createEl() {
	    var contentElType = this.options_.contentElType || 'ul';

	    this.contentEl_ = Dom.createEl(contentElType, {
	      className: 'vjs-menu-content'
	    });

	    var el = _Component.prototype.createEl.call(this, 'div', {
	      append: this.contentEl_,
	      className: 'vjs-menu'
	    });

	    el.appendChild(this.contentEl_);

	    // Prevent clicks from bubbling up. Needed for Popup Buttons,
	    // where a click on the parent is significant
	    Events.on(el, 'click', function (event) {
	      event.preventDefault();
	      event.stopImmediatePropagation();
	    });

	    return el;
	  };

	  return Popup;
	}(_component2['default']);

	_component2['default'].registerComponent('Popup', Popup);
	exports['default'] = Popup;


/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _clickableComponent = __webpack_require__(302);

	var _clickableComponent2 = _interopRequireDefault(_clickableComponent);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file popup-button.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * A button class for use with {@link Popup} controls
	 *
	 * @extends ClickableComponent
	 */
	var PopupButton = function (_ClickableComponent) {
	  _inherits(PopupButton, _ClickableComponent);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function PopupButton(player) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    _classCallCheck(this, PopupButton);

	    var _this = _possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));

	    _this.update();
	    return _this;
	  }

	  /**
	   * Update the `Popup` that this button is attached to.
	   */


	  PopupButton.prototype.update = function update() {
	    var popup = this.createPopup();

	    if (this.popup) {
	      this.removeChild(this.popup);
	    }

	    this.popup = popup;
	    this.addChild(popup);

	    if (this.items && this.items.length === 0) {
	      this.hide();
	    } else if (this.items && this.items.length > 1) {
	      this.show();
	    }
	  };

	  /**
	   * Create a `Popup`. - Override with specific functionality for component
	   *
	   * @abstract
	   */


	  PopupButton.prototype.createPopup = function createPopup() {};

	  /**
	   * Create the `PopupButton`s DOM element.
	   *
	   * @return {Element}
	   *         The element that gets created.
	   */


	  PopupButton.prototype.createEl = function createEl() {
	    return _ClickableComponent.prototype.createEl.call(this, 'div', {
	      className: this.buildCSSClass()
	    });
	  };

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  PopupButton.prototype.buildCSSClass = function buildCSSClass() {
	    var menuButtonClass = 'vjs-menu-button';

	    // If the inline option is passed, we want to use different styles altogether.
	    if (this.options_.inline === true) {
	      menuButtonClass += '-inline';
	    } else {
	      menuButtonClass += '-popup';
	    }

	    return 'vjs-menu-button ' + menuButtonClass + ' ' + _ClickableComponent.prototype.buildCSSClass.call(this);
	  };

	  return PopupButton;
	}(_clickableComponent2['default']);

	_component2['default'].registerComponent('PopupButton', PopupButton);
	exports['default'] = PopupButton;


/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _button = __webpack_require__(306);

	var _button2 = _interopRequireDefault(_button);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _dom = __webpack_require__(259);

	var Dom = _interopRequireWildcard(_dom);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file mute-toggle.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * A button component for muting the audio.
	 *
	 * @extends Button
	 */
	var MuteToggle = function (_Button) {
	  _inherits(MuteToggle, _Button);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function MuteToggle(player, options) {
	    _classCallCheck(this, MuteToggle);

	    var _this = _possibleConstructorReturn(this, _Button.call(this, player, options));

	    _this.on(player, 'volumechange', _this.update);

	    // hide mute toggle if the current tech doesn't support volume control
	    if (player.tech_ && player.tech_.featuresVolumeControl === false) {
	      _this.addClass('vjs-hidden');
	    }

	    _this.on(player, 'loadstart', function () {
	      // We need to update the button to account for a default muted state.
	      this.update();

	      if (player.tech_.featuresVolumeControl === false) {
	        this.addClass('vjs-hidden');
	      } else {
	        this.removeClass('vjs-hidden');
	      }
	    });
	    return _this;
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  MuteToggle.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-mute-control ' + _Button.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * This gets called when an `MuteToggle` is "clicked". See
	   * {@link ClickableComponent} for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  MuteToggle.prototype.handleClick = function handleClick(event) {
	    this.player_.muted(this.player_.muted() ? false : true);
	  };

	  /**
	   * Update the state of volume.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The {@link Player#loadstart} event if this function was called through an
	   *        event.
	   *
	   * @listens Player#loadstart
	   */


	  MuteToggle.prototype.update = function update(event) {
	    var vol = this.player_.volume();
	    var level = 3;

	    if (vol === 0 || this.player_.muted()) {
	      level = 0;
	    } else if (vol < 0.33) {
	      level = 1;
	    } else if (vol < 0.67) {
	      level = 2;
	    }

	    // Don't rewrite the button text if the actual text doesn't change.
	    // This causes unnecessary and confusing information for screen reader users.
	    // This check is needed because this function gets called every time the volume level is changed.
	    var toMute = this.player_.muted() ? 'Unmute' : 'Mute';

	    if (this.controlText() !== toMute) {
	      this.controlText(toMute);
	    }

	    // TODO improve muted icon classes
	    for (var i = 0; i < 4; i++) {
	      Dom.removeElClass(this.el_, 'vjs-vol-' + i);
	    }
	    Dom.addElClass(this.el_, 'vjs-vol-' + level);
	  };

	  return MuteToggle;
	}(_button2['default']);

	/**
	 * The text that should display over the `MuteToggle`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */


	MuteToggle.prototype.controlText_ = 'Mute';

	_component2['default'].registerComponent('MuteToggle', MuteToggle);
	exports['default'] = MuteToggle;


/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _textTrackButton = __webpack_require__(333);

	var _textTrackButton2 = _interopRequireDefault(_textTrackButton);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _chaptersTrackMenuItem = __webpack_require__(340);

	var _chaptersTrackMenuItem2 = _interopRequireDefault(_chaptersTrackMenuItem);

	var _toTitleCase = __webpack_require__(269);

	var _toTitleCase2 = _interopRequireDefault(_toTitleCase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file chapters-button.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The button component for toggling and selecting chapters
	 * Chapters act much differently than other text tracks
	 * Cues are navigation vs. other tracks of alternative languages
	 *
	 * @extends TextTrackButton
	 */
	var ChaptersButton = function (_TextTrackButton) {
	  _inherits(ChaptersButton, _TextTrackButton);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   *
	   * @param {Component~ReadyCallback} [ready]
	   *        The function to call when this function is ready.
	   */
	  function ChaptersButton(player, options, ready) {
	    _classCallCheck(this, ChaptersButton);

	    var _this = _possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));

	    _this.el_.setAttribute('aria-label', 'Chapters Menu');
	    return _this;
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  ChaptersButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-chapters-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Update the menu based on the current state of its items.
	   *
	   * @param {EventTarget~Event} [event]
	   *        An event that triggered this function to run.
	   *
	   * @listens TextTrackList#addtrack
	   * @listens TextTrackList#removetrack
	   * @listens TextTrackList#change
	   */


	  ChaptersButton.prototype.update = function update(event) {
	    if (!this.track_ || event && (event.type === 'addtrack' || event.type === 'removetrack')) {
	      this.setTrack(this.findChaptersTrack());
	    }
	    _TextTrackButton.prototype.update.call(this);
	  };

	  /**
	   * Set the currently selected track for the chapters button.
	   *
	   * @param {TextTrack} track
	   *        The new track to select. Nothing will change if this is the currently selected
	   *        track.
	   */


	  ChaptersButton.prototype.setTrack = function setTrack(track) {
	    if (this.track_ === track) {
	      return;
	    }

	    if (!this.updateHandler_) {
	      this.updateHandler_ = this.update.bind(this);
	    }

	    // here this.track_ refers to the old track instance
	    if (this.track_) {
	      var remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);

	      if (remoteTextTrackEl) {
	        remoteTextTrackEl.removeEventListener('load', this.updateHandler_);
	      }

	      this.track_ = null;
	    }

	    this.track_ = track;

	    // here this.track_ refers to the new track instance
	    if (this.track_) {
	      this.track_.mode = 'hidden';

	      var _remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);

	      if (_remoteTextTrackEl) {
	        _remoteTextTrackEl.addEventListener('load', this.updateHandler_);
	      }
	    }
	  };

	  /**
	   * Find the track object that is currently in use by this ChaptersButton
	   *
	   * @return {TextTrack|undefined}
	   *         The current track or undefined if none was found.
	   */


	  ChaptersButton.prototype.findChaptersTrack = function findChaptersTrack() {
	    var tracks = this.player_.textTracks() || [];

	    for (var i = tracks.length - 1; i >= 0; i--) {
	      // We will always choose the last track as our chaptersTrack
	      var track = tracks[i];

	      if (track.kind === this.kind_) {
	        return track;
	      }
	    }
	  };

	  /**
	   * Get the caption for the ChaptersButton based on the track label. This will also
	   * use the current tracks localized kind as a fallback if a label does not exist.
	   *
	   * @return {string}
	   *         The tracks current label or the localized track kind.
	   */


	  ChaptersButton.prototype.getMenuCaption = function getMenuCaption() {
	    if (this.track_ && this.track_.label) {
	      return this.track_.label;
	    }
	    return this.localize((0, _toTitleCase2['default'])(this.kind_));
	  };

	  /**
	   * Create menu from chapter track
	   *
	   * @return {Menu}
	   *         New menu for the chapter buttons
	   */


	  ChaptersButton.prototype.createMenu = function createMenu() {
	    this.options_.title = this.getMenuCaption();
	    return _TextTrackButton.prototype.createMenu.call(this);
	  };

	  /**
	   * Create a menu item for each text track
	   *
	   * @return {TextTrackMenuItem[]}
	   *         Array of menu items
	   */


	  ChaptersButton.prototype.createItems = function createItems() {
	    var items = [];

	    if (!this.track_) {
	      return items;
	    }

	    var cues = this.track_.cues;

	    if (!cues) {
	      return items;
	    }

	    for (var i = 0, l = cues.length; i < l; i++) {
	      var cue = cues[i];
	      var mi = new _chaptersTrackMenuItem2['default'](this.player_, { track: this.track_, cue: cue });

	      items.push(mi);
	    }

	    return items;
	  };

	  return ChaptersButton;
	}(_textTrackButton2['default']);

	/**
	 * `kind` of TextTrack to look for to associate it with this menu.
	 *
	 * @type {string}
	 * @private
	 */


	ChaptersButton.prototype.kind_ = 'chapters';

	/**
	 * The text that should display over the `ChaptersButton`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */
	ChaptersButton.prototype.controlText_ = 'Chapters';

	_component2['default'].registerComponent('ChaptersButton', ChaptersButton);
	exports['default'] = ChaptersButton;


/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _trackButton = __webpack_require__(334);

	var _trackButton2 = _interopRequireDefault(_trackButton);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _textTrackMenuItem = __webpack_require__(337);

	var _textTrackMenuItem2 = _interopRequireDefault(_textTrackMenuItem);

	var _offTextTrackMenuItem = __webpack_require__(339);

	var _offTextTrackMenuItem2 = _interopRequireDefault(_offTextTrackMenuItem);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file text-track-button.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The base class for buttons that toggle specific text track types (e.g. subtitles)
	 *
	 * @extends MenuButton
	 */
	var TextTrackButton = function (_TrackButton) {
	  _inherits(TextTrackButton, _TrackButton);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options={}]
	   *        The key/value store of player options.
	   */
	  function TextTrackButton(player) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    _classCallCheck(this, TextTrackButton);

	    options.tracks = player.textTracks();

	    return _possibleConstructorReturn(this, _TrackButton.call(this, player, options));
	  }

	  /**
	   * Create a menu item for each text track
	   *
	   * @param {TextTrackMenuItem[]} [items=[]]
	   *        Existing array of items to use during creation
	   *
	   * @return {TextTrackMenuItem[]}
	   *         Array of menu items that were created
	   */


	  TextTrackButton.prototype.createItems = function createItems() {
	    var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

	    // Add an OFF menu item to turn all tracks off
	    items.push(new _offTextTrackMenuItem2['default'](this.player_, { kind: this.kind_ }));

	    var tracks = this.player_.textTracks();

	    if (!tracks) {
	      return items;
	    }

	    for (var i = 0; i < tracks.length; i++) {
	      var track = tracks[i];

	      // only add tracks that are of the appropriate kind and have a label
	      if (track.kind === this.kind_) {
	        items.push(new _textTrackMenuItem2['default'](this.player_, {
	          track: track,
	          // MenuItem is selectable
	          selectable: true
	        }));
	      }
	    }

	    return items;
	  };

	  return TextTrackButton;
	}(_trackButton2['default']);

	_component2['default'].registerComponent('TextTrackButton', TextTrackButton);
	exports['default'] = TextTrackButton;


/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _menuButton = __webpack_require__(335);

	var _menuButton2 = _interopRequireDefault(_menuButton);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _fn = __webpack_require__(268);

	var Fn = _interopRequireWildcard(_fn);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file track-button.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The base class for buttons that toggle specific  track types (e.g. subtitles).
	 *
	 * @extends MenuButton
	 */
	var TrackButton = function (_MenuButton) {
	  _inherits(TrackButton, _MenuButton);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function TrackButton(player, options) {
	    _classCallCheck(this, TrackButton);

	    var tracks = options.tracks;

	    var _this = _possibleConstructorReturn(this, _MenuButton.call(this, player, options));

	    if (_this.items.length <= 1) {
	      _this.hide();
	    }

	    if (!tracks) {
	      return _possibleConstructorReturn(_this);
	    }

	    var updateHandler = Fn.bind(_this, _this.update);

	    tracks.addEventListener('removetrack', updateHandler);
	    tracks.addEventListener('addtrack', updateHandler);

	    _this.player_.on('dispose', function () {
	      tracks.removeEventListener('removetrack', updateHandler);
	      tracks.removeEventListener('addtrack', updateHandler);
	    });
	    return _this;
	  }

	  return TrackButton;
	}(_menuButton2['default']);

	_component2['default'].registerComponent('TrackButton', TrackButton);
	exports['default'] = TrackButton;


/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _clickableComponent = __webpack_require__(302);

	var _clickableComponent2 = _interopRequireDefault(_clickableComponent);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _menu = __webpack_require__(336);

	var _menu2 = _interopRequireDefault(_menu);

	var _dom = __webpack_require__(259);

	var Dom = _interopRequireWildcard(_dom);

	var _fn = __webpack_require__(268);

	var Fn = _interopRequireWildcard(_fn);

	var _toTitleCase = __webpack_require__(269);

	var _toTitleCase2 = _interopRequireDefault(_toTitleCase);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file menu-button.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * A `MenuButton` class for any popup {@link Menu}.
	 *
	 * @extends ClickableComponent
	 */
	var MenuButton = function (_ClickableComponent) {
	  _inherits(MenuButton, _ClickableComponent);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options={}]
	   *        The key/value store of player options.
	   */
	  function MenuButton(player) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    _classCallCheck(this, MenuButton);

	    var _this = _possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));

	    _this.update();

	    _this.enabled_ = true;

	    _this.el_.setAttribute('aria-haspopup', 'true');
	    _this.el_.setAttribute('role', 'menuitem');
	    _this.on('keydown', _this.handleSubmenuKeyPress);
	    return _this;
	  }

	  /**
	   * Update the menu based on the current state of its items.
	   */


	  MenuButton.prototype.update = function update() {
	    var menu = this.createMenu();

	    if (this.menu) {
	      this.removeChild(this.menu);
	    }

	    this.menu = menu;
	    this.addChild(menu);

	    /**
	     * Track the state of the menu button
	     *
	     * @type {Boolean}
	     * @private
	     */
	    this.buttonPressed_ = false;
	    this.el_.setAttribute('aria-expanded', 'false');

	    if (this.items && this.items.length === 0) {
	      this.hide();
	    } else if (this.items && this.items.length > 1) {
	      this.show();
	    }
	  };

	  /**
	   * Create the menu and add all items to it.
	   *
	   * @return {Menu}
	   *         The constructed menu
	   */


	  MenuButton.prototype.createMenu = function createMenu() {
	    var menu = new _menu2['default'](this.player_);

	    // Add a title list item to the top
	    if (this.options_.title) {
	      var title = Dom.createEl('li', {
	        className: 'vjs-menu-title',
	        innerHTML: (0, _toTitleCase2['default'])(this.options_.title),
	        tabIndex: -1
	      });

	      menu.children_.unshift(title);
	      Dom.insertElFirst(title, menu.contentEl());
	    }

	    this.items = this.createItems();

	    if (this.items) {
	      // Add menu items to the menu
	      for (var i = 0; i < this.items.length; i++) {
	        menu.addItem(this.items[i]);
	      }
	    }

	    return menu;
	  };

	  /**
	   * Create the list of menu items. Specific to each subclass.
	   *
	   * @abstract
	   */


	  MenuButton.prototype.createItems = function createItems() {};

	  /**
	   * Create the `MenuButtons`s DOM element.
	   *
	   * @return {Element}
	   *         The element that gets created.
	   */


	  MenuButton.prototype.createEl = function createEl() {
	    return _ClickableComponent.prototype.createEl.call(this, 'div', {
	      className: this.buildCSSClass()
	    });
	  };

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  MenuButton.prototype.buildCSSClass = function buildCSSClass() {
	    var menuButtonClass = 'vjs-menu-button';

	    // If the inline option is passed, we want to use different styles altogether.
	    if (this.options_.inline === true) {
	      menuButtonClass += '-inline';
	    } else {
	      menuButtonClass += '-popup';
	    }

	    return 'vjs-menu-button ' + menuButtonClass + ' ' + _ClickableComponent.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Handle a click on a `MenuButton`.
	   * See {@link ClickableComponent#handleClick} for instances where this is called.
	   *
	   * @param {EventTarget~Event} event
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  MenuButton.prototype.handleClick = function handleClick(event) {
	    // When you click the button it adds focus, which will show the menu.
	    // So we'll remove focus when the mouse leaves the button. Focus is needed
	    // for tab navigation.

	    this.one(this.menu.contentEl(), 'mouseleave', Fn.bind(this, function (e) {
	      this.unpressButton();
	      this.el_.blur();
	    }));
	    if (this.buttonPressed_) {
	      this.unpressButton();
	    } else {
	      this.pressButton();
	    }
	  };

	  /**
	   * Handle tab, escape, down arrow, and up arrow keys for `MenuButton`. See
	   * {@link ClickableComponent#handleKeyPress} for instances where this is called.
	   *
	   * @param {EventTarget~Event} event
	   *        The `keydown` event that caused this function to be called.
	   *
	   * @listens keydown
	   */


	  MenuButton.prototype.handleKeyPress = function handleKeyPress(event) {

	    // Escape (27) key or Tab (9) key unpress the 'button'
	    if (event.which === 27 || event.which === 9) {
	      if (this.buttonPressed_) {
	        this.unpressButton();
	      }
	      // Don't preventDefault for Tab key - we still want to lose focus
	      if (event.which !== 9) {
	        event.preventDefault();
	      }
	      // Up (38) key or Down (40) key press the 'button'
	    } else if (event.which === 38 || event.which === 40) {
	      if (!this.buttonPressed_) {
	        this.pressButton();
	        event.preventDefault();
	      }
	    } else {
	      _ClickableComponent.prototype.handleKeyPress.call(this, event);
	    }
	  };

	  /**
	   * Handle a `keydown` event on a sub-menu. The listener for this is added in
	   * the constructor.
	   *
	   * @param {EventTarget~Event} event
	   *        Key press event
	   *
	   * @listens keydown
	   */


	  MenuButton.prototype.handleSubmenuKeyPress = function handleSubmenuKeyPress(event) {

	    // Escape (27) key or Tab (9) key unpress the 'button'
	    if (event.which === 27 || event.which === 9) {
	      if (this.buttonPressed_) {
	        this.unpressButton();
	      }
	      // Don't preventDefault for Tab key - we still want to lose focus
	      if (event.which !== 9) {
	        event.preventDefault();
	      }
	    }
	  };

	  /**
	   * Put the current `MenuButton` into a pressed state.
	   */


	  MenuButton.prototype.pressButton = function pressButton() {
	    if (this.enabled_) {
	      this.buttonPressed_ = true;
	      this.menu.lockShowing();
	      this.el_.setAttribute('aria-expanded', 'true');
	      // set the focus into the submenu
	      this.menu.focus();
	    }
	  };

	  /**
	   * Take the current `MenuButton` out of a pressed state.
	   */


	  MenuButton.prototype.unpressButton = function unpressButton() {
	    if (this.enabled_) {
	      this.buttonPressed_ = false;
	      this.menu.unlockShowing();
	      this.el_.setAttribute('aria-expanded', 'false');
	      // Set focus back to this menu button
	      this.el_.focus();
	    }
	  };

	  /**
	   * Disable the `MenuButton`. Don't allow it to be clicked.
	   *
	   * @return {MenuButton}
	   *         Returns itself; method can be chained.
	   */


	  MenuButton.prototype.disable = function disable() {
	    // Unpress, but don't force focus on this button
	    this.buttonPressed_ = false;
	    this.menu.unlockShowing();
	    this.el_.setAttribute('aria-expanded', 'false');

	    this.enabled_ = false;

	    return _ClickableComponent.prototype.disable.call(this);
	  };

	  /**
	   * Enable the `MenuButton`. Allow it to be clicked.
	   *
	   * @return {MenuButton}
	   *         Returns itself; method can be chained.
	   */


	  MenuButton.prototype.enable = function enable() {
	    this.enabled_ = true;

	    return _ClickableComponent.prototype.enable.call(this);
	  };

	  return MenuButton;
	}(_clickableComponent2['default']);

	_component2['default'].registerComponent('MenuButton', MenuButton);
	exports['default'] = MenuButton;


/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _dom = __webpack_require__(259);

	var Dom = _interopRequireWildcard(_dom);

	var _fn = __webpack_require__(268);

	var Fn = _interopRequireWildcard(_fn);

	var _events = __webpack_require__(265);

	var Events = _interopRequireWildcard(_events);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file menu.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The Menu component is used to build popup menus, including subtitle and
	 * captions selection menus.
	 *
	 * @extends Component
	 */
	var Menu = function (_Component) {
	  _inherits(Menu, _Component);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Player} player
	   *        the player that this component should attach to
	   *
	   * @param {Object} [options]
	   *        Object of option names and values
	   *
	   */
	  function Menu(player, options) {
	    _classCallCheck(this, Menu);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.focusedChild_ = -1;

	    _this.on('keydown', _this.handleKeyPress);
	    return _this;
	  }

	  /**
	   * Add a {@link MenuItem} to the menu.
	   *
	   * @param {Object|string} component
	   *        The name or instance of the `MenuItem` to add.
	   *
	   */


	  Menu.prototype.addItem = function addItem(component) {
	    this.addChild(component);
	    component.on('click', Fn.bind(this, function (event) {
	      this.unlockShowing();
	      // TODO: Need to set keyboard focus back to the menuButton
	    }));
	  };

	  /**
	   * Create the `Menu`s DOM element.
	   *
	   * @return {Element}
	   *         the element that was created
	   */


	  Menu.prototype.createEl = function createEl() {
	    var contentElType = this.options_.contentElType || 'ul';

	    this.contentEl_ = Dom.createEl(contentElType, {
	      className: 'vjs-menu-content'
	    });

	    this.contentEl_.setAttribute('role', 'menu');

	    var el = _Component.prototype.createEl.call(this, 'div', {
	      append: this.contentEl_,
	      className: 'vjs-menu'
	    });

	    el.setAttribute('role', 'presentation');
	    el.appendChild(this.contentEl_);

	    // Prevent clicks from bubbling up. Needed for Menu Buttons,
	    // where a click on the parent is significant
	    Events.on(el, 'click', function (event) {
	      event.preventDefault();
	      event.stopImmediatePropagation();
	    });

	    return el;
	  };

	  /**
	   * Handle a `keydown` event on this menu. This listener is added in the constructor.
	   *
	   * @param {EventTarget~Event} event
	   *        A `keydown` event that happened on the menu.
	   *
	   * @listens keydown
	   */


	  Menu.prototype.handleKeyPress = function handleKeyPress(event) {
	    // Left and Down Arrows
	    if (event.which === 37 || event.which === 40) {
	      event.preventDefault();
	      this.stepForward();

	      // Up and Right Arrows
	    } else if (event.which === 38 || event.which === 39) {
	      event.preventDefault();
	      this.stepBack();
	    }
	  };

	  /**
	   * Move to next (lower) menu item for keyboard users.
	   */


	  Menu.prototype.stepForward = function stepForward() {
	    var stepChild = 0;

	    if (this.focusedChild_ !== undefined) {
	      stepChild = this.focusedChild_ + 1;
	    }
	    this.focus(stepChild);
	  };

	  /**
	   * Move to previous (higher) menu item for keyboard users.
	   */


	  Menu.prototype.stepBack = function stepBack() {
	    var stepChild = 0;

	    if (this.focusedChild_ !== undefined) {
	      stepChild = this.focusedChild_ - 1;
	    }
	    this.focus(stepChild);
	  };

	  /**
	   * Set focus on a {@link MenuItem} in the `Menu`.
	   *
	   * @param {Object|string} [item=0]
	   *        Index of child item set focus on.
	   */


	  Menu.prototype.focus = function focus() {
	    var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

	    var children = this.children().slice();
	    var haveTitle = children.length && children[0].className && /vjs-menu-title/.test(children[0].className);

	    if (haveTitle) {
	      children.shift();
	    }

	    if (children.length > 0) {
	      if (item < 0) {
	        item = 0;
	      } else if (item >= children.length) {
	        item = children.length - 1;
	      }

	      this.focusedChild_ = item;

	      children[item].el_.focus();
	    }
	  };

	  return Menu;
	}(_component2['default']);

	_component2['default'].registerComponent('Menu', Menu);
	exports['default'] = Menu;


/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _menuItem = __webpack_require__(338);

	var _menuItem2 = _interopRequireDefault(_menuItem);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _fn = __webpack_require__(268);

	var Fn = _interopRequireWildcard(_fn);

	var _window = __webpack_require__(255);

	var _window2 = _interopRequireDefault(_window);

	var _document = __webpack_require__(256);

	var _document2 = _interopRequireDefault(_document);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file text-track-menu-item.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The specific menu item type for selecting a language within a text track kind
	 *
	 * @extends MenuItem
	 */
	var TextTrackMenuItem = function (_MenuItem) {
	  _inherits(TextTrackMenuItem, _MenuItem);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function TextTrackMenuItem(player, options) {
	    _classCallCheck(this, TextTrackMenuItem);

	    var track = options.track;
	    var tracks = player.textTracks();

	    // Modify options for parent MenuItem class's init.
	    options.label = track.label || track.language || 'Unknown';
	    options.selected = track['default'] || track.mode === 'showing';

	    var _this = _possibleConstructorReturn(this, _MenuItem.call(this, player, options));

	    _this.track = track;

	    if (tracks) {
	      (function () {
	        var changeHandler = Fn.bind(_this, _this.handleTracksChange);

	        tracks.addEventListener('change', changeHandler);
	        _this.on('dispose', function () {
	          tracks.removeEventListener('change', changeHandler);
	        });
	      })();
	    }

	    // iOS7 doesn't dispatch change events to TextTrackLists when an
	    // associated track's mode changes. Without something like
	    // Object.observe() (also not present on iOS7), it's not
	    // possible to detect changes to the mode attribute and polyfill
	    // the change event. As a poor substitute, we manually dispatch
	    // change events whenever the controls modify the mode.
	    if (tracks && tracks.onchange === undefined) {
	      (function () {
	        var event = void 0;

	        _this.on(['tap', 'click'], function () {
	          if (_typeof(_window2['default'].Event) !== 'object') {
	            // Android 2.3 throws an Illegal Constructor error for window.Event
	            try {
	              event = new _window2['default'].Event('change');
	            } catch (err) {
	              // continue regardless of error
	            }
	          }

	          if (!event) {
	            event = _document2['default'].createEvent('Event');
	            event.initEvent('change', true, true);
	          }

	          tracks.dispatchEvent(event);
	        });
	      })();
	    }
	    return _this;
	  }

	  /**
	   * This gets called when an `TextTrackMenuItem` is "clicked". See
	   * {@link ClickableComponent} for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} event
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  TextTrackMenuItem.prototype.handleClick = function handleClick(event) {
	    var kind = this.track.kind;
	    var tracks = this.player_.textTracks();

	    _MenuItem.prototype.handleClick.call(this, event);

	    if (!tracks) {
	      return;
	    }

	    for (var i = 0; i < tracks.length; i++) {
	      var track = tracks[i];

	      if (track.kind !== kind) {
	        continue;
	      }

	      if (track === this.track) {
	        track.mode = 'showing';
	      } else {
	        track.mode = 'disabled';
	      }
	    }
	  };

	  /**
	   * Handle text track list change
	   *
	   * @param {EventTarget~Event} event
	   *        The `change` event that caused this function to be called.
	   *
	   * @listens TextTrackList#change
	   */


	  TextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
	    this.selected(this.track.mode === 'showing');
	  };

	  return TextTrackMenuItem;
	}(_menuItem2['default']);

	_component2['default'].registerComponent('TextTrackMenuItem', TextTrackMenuItem);
	exports['default'] = TextTrackMenuItem;


/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _clickableComponent = __webpack_require__(302);

	var _clickableComponent2 = _interopRequireDefault(_clickableComponent);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _obj = __webpack_require__(263);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file menu-item.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The component for a menu item. `<li>`
	 *
	 * @extends ClickableComponent
	 */
	var MenuItem = function (_ClickableComponent) {
	  _inherits(MenuItem, _ClickableComponent);

	  /**
	   * Creates an instance of the this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options={}]
	   *        The key/value store of player options.
	   *
	   */
	  function MenuItem(player, options) {
	    _classCallCheck(this, MenuItem);

	    var _this = _possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));

	    _this.selectable = options.selectable;

	    _this.selected(options.selected);

	    if (_this.selectable) {
	      // TODO: May need to be either menuitemcheckbox or menuitemradio,
	      //       and may need logical grouping of menu items.
	      _this.el_.setAttribute('role', 'menuitemcheckbox');
	    } else {
	      _this.el_.setAttribute('role', 'menuitem');
	    }
	    return _this;
	  }

	  /**
	   * Create the `MenuItem's DOM element
	   *
	   * @param {string} [type=li]
	   *        Element's node type, not actually used, always set to `li`.
	   *
	   * @param {Object} [props={}]
	   *        An object of properties that should be set on the element
	   *
	   * @param {Object} [attrs={}]
	   *        An object of attributes that should be set on the element
	   *
	   * @return {Element}
	   *         The element that gets created.
	   */


	  MenuItem.prototype.createEl = function createEl(type, props, attrs) {
	    return _ClickableComponent.prototype.createEl.call(this, 'li', (0, _obj.assign)({
	      className: 'vjs-menu-item',
	      innerHTML: this.localize(this.options_.label),
	      tabIndex: -1
	    }, props), attrs);
	  };

	  /**
	   * Any click on a `MenuItem` puts int into the selected state.
	   * See {@link ClickableComponent#handleClick} for instances where this is called.
	   *
	   * @param {EventTarget~Event} event
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  MenuItem.prototype.handleClick = function handleClick(event) {
	    this.selected(true);
	  };

	  /**
	   * Set the state for this menu item as selected or not.
	   *
	   * @param {boolean} selected
	   *        if the menu item is selected or not
	   */


	  MenuItem.prototype.selected = function selected(_selected) {
	    if (this.selectable) {
	      if (_selected) {
	        this.addClass('vjs-selected');
	        this.el_.setAttribute('aria-checked', 'true');
	        // aria-checked isn't fully supported by browsers/screen readers,
	        // so indicate selected state to screen reader in the control text.
	        this.controlText(', selected');
	      } else {
	        this.removeClass('vjs-selected');
	        this.el_.setAttribute('aria-checked', 'false');
	        // Indicate un-selected state to screen reader
	        // Note that a space clears out the selected state text
	        this.controlText(' ');
	      }
	    }
	  };

	  return MenuItem;
	}(_clickableComponent2['default']);

	_component2['default'].registerComponent('MenuItem', MenuItem);
	exports['default'] = MenuItem;


/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _textTrackMenuItem = __webpack_require__(337);

	var _textTrackMenuItem2 = _interopRequireDefault(_textTrackMenuItem);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file off-text-track-menu-item.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * A special menu item for turning of a specific type of text track
	 *
	 * @extends TextTrackMenuItem
	 */
	var OffTextTrackMenuItem = function (_TextTrackMenuItem) {
	  _inherits(OffTextTrackMenuItem, _TextTrackMenuItem);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function OffTextTrackMenuItem(player, options) {
	    _classCallCheck(this, OffTextTrackMenuItem);

	    // Create pseudo track info
	    // Requires options['kind']
	    options.track = {
	      player: player,
	      kind: options.kind,
	      label: options.kind + ' off',
	      'default': false,
	      mode: 'disabled'
	    };

	    // MenuItem is selectable
	    options.selectable = true;

	    var _this = _possibleConstructorReturn(this, _TextTrackMenuItem.call(this, player, options));

	    _this.selected(true);
	    return _this;
	  }

	  /**
	   * Handle text track change
	   *
	   * @param {EventTarget~Event} event
	   *        The event that caused this function to run
	   */


	  OffTextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
	    var tracks = this.player().textTracks();
	    var selected = true;

	    for (var i = 0, l = tracks.length; i < l; i++) {
	      var track = tracks[i];

	      if (track.kind === this.track.kind && track.mode === 'showing') {
	        selected = false;
	        break;
	      }
	    }

	    this.selected(selected);
	  };

	  return OffTextTrackMenuItem;
	}(_textTrackMenuItem2['default']);

	_component2['default'].registerComponent('OffTextTrackMenuItem', OffTextTrackMenuItem);
	exports['default'] = OffTextTrackMenuItem;


/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _menuItem = __webpack_require__(338);

	var _menuItem2 = _interopRequireDefault(_menuItem);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _fn = __webpack_require__(268);

	var Fn = _interopRequireWildcard(_fn);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file chapters-track-menu-item.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The chapter track menu item
	 *
	 * @extends MenuItem
	 */
	var ChaptersTrackMenuItem = function (_MenuItem) {
	  _inherits(ChaptersTrackMenuItem, _MenuItem);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function ChaptersTrackMenuItem(player, options) {
	    _classCallCheck(this, ChaptersTrackMenuItem);

	    var track = options.track;
	    var cue = options.cue;
	    var currentTime = player.currentTime();

	    // Modify options for parent MenuItem class's init.
	    options.selectable = true;
	    options.label = cue.text;
	    options.selected = cue.startTime <= currentTime && currentTime < cue.endTime;

	    var _this = _possibleConstructorReturn(this, _MenuItem.call(this, player, options));

	    _this.track = track;
	    _this.cue = cue;
	    track.addEventListener('cuechange', Fn.bind(_this, _this.update));
	    return _this;
	  }

	  /**
	   * This gets called when an `ChaptersTrackMenuItem` is "clicked". See
	   * {@link ClickableComponent} for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  ChaptersTrackMenuItem.prototype.handleClick = function handleClick(event) {
	    _MenuItem.prototype.handleClick.call(this);
	    this.player_.currentTime(this.cue.startTime);
	    this.update(this.cue.startTime);
	  };

	  /**
	   * Update chapter menu item
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `cuechange` event that caused this function to run.
	   *
	   * @listens TextTrack#cuechange
	   */


	  ChaptersTrackMenuItem.prototype.update = function update(event) {
	    var cue = this.cue;
	    var currentTime = this.player_.currentTime();

	    // vjs.log(currentTime, cue.startTime);
	    this.selected(cue.startTime <= currentTime && currentTime < cue.endTime);
	  };

	  return ChaptersTrackMenuItem;
	}(_menuItem2['default']);

	_component2['default'].registerComponent('ChaptersTrackMenuItem', ChaptersTrackMenuItem);
	exports['default'] = ChaptersTrackMenuItem;


/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _textTrackButton = __webpack_require__(333);

	var _textTrackButton2 = _interopRequireDefault(_textTrackButton);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _fn = __webpack_require__(268);

	var Fn = _interopRequireWildcard(_fn);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file descriptions-button.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The button component for toggling and selecting descriptions
	 *
	 * @extends TextTrackButton
	 */
	var DescriptionsButton = function (_TextTrackButton) {
	  _inherits(DescriptionsButton, _TextTrackButton);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   *
	   * @param {Component~ReadyCallback} [ready]
	   *        The function to call when this component is ready.
	   */
	  function DescriptionsButton(player, options, ready) {
	    _classCallCheck(this, DescriptionsButton);

	    var _this = _possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));

	    _this.el_.setAttribute('aria-label', 'Descriptions Menu');

	    var tracks = player.textTracks();

	    if (tracks) {
	      (function () {
	        var changeHandler = Fn.bind(_this, _this.handleTracksChange);

	        tracks.addEventListener('change', changeHandler);
	        _this.on('dispose', function () {
	          tracks.removeEventListener('change', changeHandler);
	        });
	      })();
	    }
	    return _this;
	  }

	  /**
	   * Handle text track change
	   *
	   * @param {EventTarget~Event} event
	   *        The event that caused this function to run
	   *
	   * @listens TextTrackList#change
	   */


	  DescriptionsButton.prototype.handleTracksChange = function handleTracksChange(event) {
	    var tracks = this.player().textTracks();
	    var disabled = false;

	    // Check whether a track of a different kind is showing
	    for (var i = 0, l = tracks.length; i < l; i++) {
	      var track = tracks[i];

	      if (track.kind !== this.kind_ && track.mode === 'showing') {
	        disabled = true;
	        break;
	      }
	    }

	    // If another track is showing, disable this menu button
	    if (disabled) {
	      this.disable();
	    } else {
	      this.enable();
	    }
	  };

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  DescriptionsButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-descriptions-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
	  };

	  return DescriptionsButton;
	}(_textTrackButton2['default']);

	/**
	 * `kind` of TextTrack to look for to associate it with this menu.
	 *
	 * @type {string}
	 * @private
	 */


	DescriptionsButton.prototype.kind_ = 'descriptions';

	/**
	 * The text that should display over the `DescriptionsButton`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */
	DescriptionsButton.prototype.controlText_ = 'Descriptions';

	_component2['default'].registerComponent('DescriptionsButton', DescriptionsButton);
	exports['default'] = DescriptionsButton;


/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _textTrackButton = __webpack_require__(333);

	var _textTrackButton2 = _interopRequireDefault(_textTrackButton);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file subtitles-button.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The button component for toggling and selecting subtitles
	 *
	 * @extends TextTrackButton
	 */
	var SubtitlesButton = function (_TextTrackButton) {
	  _inherits(SubtitlesButton, _TextTrackButton);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   *
	   * @param {Component~ReadyCallback} [ready]
	   *        The function to call when this component is ready.
	   */
	  function SubtitlesButton(player, options, ready) {
	    _classCallCheck(this, SubtitlesButton);

	    var _this = _possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));

	    _this.el_.setAttribute('aria-label', 'Subtitles Menu');
	    return _this;
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  SubtitlesButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-subtitles-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
	  };

	  return SubtitlesButton;
	}(_textTrackButton2['default']);

	/**
	 * `kind` of TextTrack to look for to associate it with this menu.
	 *
	 * @type {string}
	 * @private
	 */


	SubtitlesButton.prototype.kind_ = 'subtitles';

	/**
	 * The text that should display over the `SubtitlesButton`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */
	SubtitlesButton.prototype.controlText_ = 'Subtitles';

	_component2['default'].registerComponent('SubtitlesButton', SubtitlesButton);
	exports['default'] = SubtitlesButton;


/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _textTrackButton = __webpack_require__(333);

	var _textTrackButton2 = _interopRequireDefault(_textTrackButton);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _captionSettingsMenuItem = __webpack_require__(344);

	var _captionSettingsMenuItem2 = _interopRequireDefault(_captionSettingsMenuItem);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file captions-button.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The button component for toggling and selecting captions
	 *
	 * @extends TextTrackButton
	 */
	var CaptionsButton = function (_TextTrackButton) {
	  _inherits(CaptionsButton, _TextTrackButton);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   *
	   * @param {Component~ReadyCallback} [ready]
	   *        The function to call when this component is ready.
	   */
	  function CaptionsButton(player, options, ready) {
	    _classCallCheck(this, CaptionsButton);

	    var _this = _possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));

	    _this.el_.setAttribute('aria-label', 'Captions Menu');
	    return _this;
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  CaptionsButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-captions-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Update caption menu items
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `addtrack` or `removetrack` event that caused this function to be
	   *        called.
	   *
	   * @listens TextTrackList#addtrack
	   * @listens TextTrackList#removetrack
	   */


	  CaptionsButton.prototype.update = function update(event) {
	    var threshold = 2;

	    _TextTrackButton.prototype.update.call(this);

	    // if native, then threshold is 1 because no settings button
	    if (this.player().tech_ && this.player().tech_.featuresNativeTextTracks) {
	      threshold = 1;
	    }

	    if (this.items && this.items.length > threshold) {
	      this.show();
	    } else {
	      this.hide();
	    }
	  };

	  /**
	   * Create caption menu items
	   *
	   * @return {CaptionSettingsMenuItem[]}
	   *         The array of current menu items.
	   */


	  CaptionsButton.prototype.createItems = function createItems() {
	    var items = [];

	    if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks)) {
	      items.push(new _captionSettingsMenuItem2['default'](this.player_, { kind: this.kind_ }));
	    }

	    return _TextTrackButton.prototype.createItems.call(this, items);
	  };

	  return CaptionsButton;
	}(_textTrackButton2['default']);

	/**
	 * `kind` of TextTrack to look for to associate it with this menu.
	 *
	 * @type {string}
	 * @private
	 */


	CaptionsButton.prototype.kind_ = 'captions';

	/**
	 * The text that should display over the `CaptionsButton`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */
	CaptionsButton.prototype.controlText_ = 'Captions';

	_component2['default'].registerComponent('CaptionsButton', CaptionsButton);
	exports['default'] = CaptionsButton;


/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _textTrackMenuItem = __webpack_require__(337);

	var _textTrackMenuItem2 = _interopRequireDefault(_textTrackMenuItem);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file caption-settings-menu-item.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The menu item for caption track settings menu
	 *
	 * @extends TextTrackMenuItem
	 */
	var CaptionSettingsMenuItem = function (_TextTrackMenuItem) {
	  _inherits(CaptionSettingsMenuItem, _TextTrackMenuItem);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function CaptionSettingsMenuItem(player, options) {
	    _classCallCheck(this, CaptionSettingsMenuItem);

	    options.track = {
	      player: player,
	      kind: options.kind,
	      label: options.kind + ' settings',
	      selectable: false,
	      'default': false,
	      mode: 'disabled'
	    };

	    // CaptionSettingsMenuItem has no concept of 'selected'
	    options.selectable = false;

	    var _this = _possibleConstructorReturn(this, _TextTrackMenuItem.call(this, player, options));

	    _this.addClass('vjs-texttrack-settings');
	    _this.controlText(', opens ' + options.kind + ' settings dialog');
	    return _this;
	  }

	  /**
	   * This gets called when an `CaptionSettingsMenuItem` is "clicked". See
	   * {@link ClickableComponent} for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  CaptionSettingsMenuItem.prototype.handleClick = function handleClick(event) {
	    this.player().getChild('textTrackSettings').show();
	    this.player().getChild('textTrackSettings').el_.focus();
	  };

	  return CaptionSettingsMenuItem;
	}(_textTrackMenuItem2['default']);

	_component2['default'].registerComponent('CaptionSettingsMenuItem', CaptionSettingsMenuItem);
	exports['default'] = CaptionSettingsMenuItem;


/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _trackButton = __webpack_require__(334);

	var _trackButton2 = _interopRequireDefault(_trackButton);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _audioTrackMenuItem = __webpack_require__(346);

	var _audioTrackMenuItem2 = _interopRequireDefault(_audioTrackMenuItem);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file audio-track-button.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The base class for buttons that toggle specific {@link AudioTrack} types.
	 *
	 * @extends TrackButton
	 */
	var AudioTrackButton = function (_TrackButton) {
	  _inherits(AudioTrackButton, _TrackButton);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options={}]
	   *        The key/value store of player options.
	   */
	  function AudioTrackButton(player) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    _classCallCheck(this, AudioTrackButton);

	    options.tracks = player.audioTracks && player.audioTracks();

	    var _this = _possibleConstructorReturn(this, _TrackButton.call(this, player, options));

	    _this.el_.setAttribute('aria-label', 'Audio Menu');
	    return _this;
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  AudioTrackButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-audio-button ' + _TrackButton.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Create a menu item for each audio track
	   *
	   * @param {AudioTrackMenuItem[]} [items=[]]
	   *        An array of existing menu items to use.
	   *
	   * @return {AudioTrackMenuItem[]}
	   *         An array of menu items
	   */


	  AudioTrackButton.prototype.createItems = function createItems() {
	    var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

	    var tracks = this.player_.audioTracks && this.player_.audioTracks();

	    if (!tracks) {
	      return items;
	    }

	    for (var i = 0; i < tracks.length; i++) {
	      var track = tracks[i];

	      items.push(new _audioTrackMenuItem2['default'](this.player_, {
	        track: track,
	        // MenuItem is selectable
	        selectable: true
	      }));
	    }

	    return items;
	  };

	  return AudioTrackButton;
	}(_trackButton2['default']);

	/**
	 * The text that should display over the `AudioTrackButton`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */


	AudioTrackButton.prototype.controlText_ = 'Audio Track';
	_component2['default'].registerComponent('AudioTrackButton', AudioTrackButton);
	exports['default'] = AudioTrackButton;


/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _menuItem = __webpack_require__(338);

	var _menuItem2 = _interopRequireDefault(_menuItem);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _fn = __webpack_require__(268);

	var Fn = _interopRequireWildcard(_fn);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file audio-track-menu-item.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * An {@link AudioTrack} {@link MenuItem}
	 *
	 * @extends MenuItem
	 */
	var AudioTrackMenuItem = function (_MenuItem) {
	  _inherits(AudioTrackMenuItem, _MenuItem);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function AudioTrackMenuItem(player, options) {
	    _classCallCheck(this, AudioTrackMenuItem);

	    var track = options.track;
	    var tracks = player.audioTracks();

	    // Modify options for parent MenuItem class's init.
	    options.label = track.label || track.language || 'Unknown';
	    options.selected = track.enabled;

	    var _this = _possibleConstructorReturn(this, _MenuItem.call(this, player, options));

	    _this.track = track;

	    if (tracks) {
	      (function () {
	        var changeHandler = Fn.bind(_this, _this.handleTracksChange);

	        tracks.addEventListener('change', changeHandler);
	        _this.on('dispose', function () {
	          tracks.removeEventListener('change', changeHandler);
	        });
	      })();
	    }
	    return _this;
	  }

	  /**
	   * This gets called when an `AudioTrackMenuItem is "clicked". See {@link ClickableComponent}
	   * for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  AudioTrackMenuItem.prototype.handleClick = function handleClick(event) {
	    var tracks = this.player_.audioTracks();

	    _MenuItem.prototype.handleClick.call(this, event);

	    if (!tracks) {
	      return;
	    }

	    for (var i = 0; i < tracks.length; i++) {
	      var track = tracks[i];

	      track.enabled = track === this.track;
	    }
	  };

	  /**
	   * Handle any {@link AudioTrack} change.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The {@link AudioTrackList#change} event that caused this to run.
	   *
	   * @listens AudioTrackList#change
	   */


	  AudioTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
	    this.selected(this.track.enabled);
	  };

	  return AudioTrackMenuItem;
	}(_menuItem2['default']);

	_component2['default'].registerComponent('AudioTrackMenuItem', AudioTrackMenuItem);
	exports['default'] = AudioTrackMenuItem;


/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _menuButton = __webpack_require__(335);

	var _menuButton2 = _interopRequireDefault(_menuButton);

	var _menu = __webpack_require__(336);

	var _menu2 = _interopRequireDefault(_menu);

	var _playbackRateMenuItem = __webpack_require__(348);

	var _playbackRateMenuItem2 = _interopRequireDefault(_playbackRateMenuItem);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _dom = __webpack_require__(259);

	var Dom = _interopRequireWildcard(_dom);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file playback-rate-menu-button.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The component for controlling the playback rate.
	 *
	 * @extends MenuButton
	 */
	var PlaybackRateMenuButton = function (_MenuButton) {
	  _inherits(PlaybackRateMenuButton, _MenuButton);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function PlaybackRateMenuButton(player, options) {
	    _classCallCheck(this, PlaybackRateMenuButton);

	    var _this = _possibleConstructorReturn(this, _MenuButton.call(this, player, options));

	    _this.updateVisibility();
	    _this.updateLabel();

	    _this.on(player, 'loadstart', _this.updateVisibility);
	    _this.on(player, 'ratechange', _this.updateLabel);
	    return _this;
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  PlaybackRateMenuButton.prototype.createEl = function createEl() {
	    var el = _MenuButton.prototype.createEl.call(this);

	    this.labelEl_ = Dom.createEl('div', {
	      className: 'vjs-playback-rate-value',
	      innerHTML: 1.0
	    });

	    el.appendChild(this.labelEl_);

	    return el;
	  };

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  PlaybackRateMenuButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-playback-rate ' + _MenuButton.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Create the playback rate menu
	   *
	   * @return {Menu}
	   *         Menu object populated with {@link PlaybackRateMenuItem}s
	   */


	  PlaybackRateMenuButton.prototype.createMenu = function createMenu() {
	    var menu = new _menu2['default'](this.player());
	    var rates = this.playbackRates();

	    if (rates) {
	      for (var i = rates.length - 1; i >= 0; i--) {
	        menu.addChild(new _playbackRateMenuItem2['default'](this.player(), { rate: rates[i] + 'x' }));
	      }
	    }

	    return menu;
	  };

	  /**
	   * Updates ARIA accessibility attributes
	   */


	  PlaybackRateMenuButton.prototype.updateARIAAttributes = function updateARIAAttributes() {
	    // Current playback rate
	    this.el().setAttribute('aria-valuenow', this.player().playbackRate());
	  };

	  /**
	   * This gets called when an `PlaybackRateMenuButton` is "clicked". See
	   * {@link ClickableComponent} for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  PlaybackRateMenuButton.prototype.handleClick = function handleClick(event) {
	    // select next rate option
	    var currentRate = this.player().playbackRate();
	    var rates = this.playbackRates();

	    // this will select first one if the last one currently selected
	    var newRate = rates[0];

	    for (var i = 0; i < rates.length; i++) {
	      if (rates[i] > currentRate) {
	        newRate = rates[i];
	        break;
	      }
	    }
	    this.player().playbackRate(newRate);
	  };

	  /**
	   * Get possible playback rates
	   *
	   * @return {Array}
	   *         All possible playback rates
	   */


	  PlaybackRateMenuButton.prototype.playbackRates = function playbackRates() {
	    return this.options_.playbackRates || this.options_.playerOptions && this.options_.playerOptions.playbackRates;
	  };

	  /**
	   * Get whether playback rates is supported by the tech
	   * and an array of playback rates exists
	   *
	   * @return {boolean}
	   *         Whether changing playback rate is supported
	   */


	  PlaybackRateMenuButton.prototype.playbackRateSupported = function playbackRateSupported() {
	    return this.player().tech_ && this.player().tech_.featuresPlaybackRate && this.playbackRates() && this.playbackRates().length > 0;
	  };

	  /**
	   * Hide playback rate controls when they're no playback rate options to select
	   *
	   * @param {EventTarget~Event} [event]
	   *        The event that caused this function to run.
	   *
	   * @listens Player#loadstart
	   */


	  PlaybackRateMenuButton.prototype.updateVisibility = function updateVisibility(event) {
	    if (this.playbackRateSupported()) {
	      this.removeClass('vjs-hidden');
	    } else {
	      this.addClass('vjs-hidden');
	    }
	  };

	  /**
	   * Update button label when rate changed
	   *
	   * @param {EventTarget~Event} [event]
	   *        The event that caused this function to run.
	   *
	   * @listens Player#ratechange
	   */


	  PlaybackRateMenuButton.prototype.updateLabel = function updateLabel(event) {
	    if (this.playbackRateSupported()) {
	      this.labelEl_.innerHTML = this.player().playbackRate() + 'x';
	    }
	  };

	  return PlaybackRateMenuButton;
	}(_menuButton2['default']);

	/**
	 * The text that should display over the `FullscreenToggle`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */


	PlaybackRateMenuButton.prototype.controlText_ = 'Playback Rate';

	_component2['default'].registerComponent('PlaybackRateMenuButton', PlaybackRateMenuButton);
	exports['default'] = PlaybackRateMenuButton;


/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _menuItem = __webpack_require__(338);

	var _menuItem2 = _interopRequireDefault(_menuItem);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file playback-rate-menu-item.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The specific menu item type for selecting a playback rate.
	 *
	 * @extends MenuItem
	 */
	var PlaybackRateMenuItem = function (_MenuItem) {
	  _inherits(PlaybackRateMenuItem, _MenuItem);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function PlaybackRateMenuItem(player, options) {
	    _classCallCheck(this, PlaybackRateMenuItem);

	    var label = options.rate;
	    var rate = parseFloat(label, 10);

	    // Modify options for parent MenuItem class's init.
	    options.label = label;
	    options.selected = rate === 1;

	    var _this = _possibleConstructorReturn(this, _MenuItem.call(this, player, options));

	    _this.label = label;
	    _this.rate = rate;

	    _this.on(player, 'ratechange', _this.update);
	    return _this;
	  }

	  /**
	   * This gets called when an `PlaybackRateMenuItem` is "clicked". See
	   * {@link ClickableComponent} for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  PlaybackRateMenuItem.prototype.handleClick = function handleClick(event) {
	    _MenuItem.prototype.handleClick.call(this);
	    this.player().playbackRate(this.rate);
	  };

	  /**
	   * Update the PlaybackRateMenuItem when the playbackrate changes.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `ratechange` event that caused this function to run.
	   *
	   * @listens Player#ratechange
	   */


	  PlaybackRateMenuItem.prototype.update = function update(event) {
	    this.selected(this.player().playbackRate() === this.rate);
	  };

	  return PlaybackRateMenuItem;
	}(_menuItem2['default']);

	/**
	 * The text that should display over the `PlaybackRateMenuItem`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */


	PlaybackRateMenuItem.prototype.contentElType = 'button';

	_component2['default'].registerComponent('PlaybackRateMenuItem', PlaybackRateMenuItem);
	exports['default'] = PlaybackRateMenuItem;


/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _spacer = __webpack_require__(350);

	var _spacer2 = _interopRequireDefault(_spacer);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file custom-control-spacer.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Spacer specifically meant to be used as an insertion point for new plugins, etc.
	 *
	 * @extends Spacer
	 */
	var CustomControlSpacer = function (_Spacer) {
	  _inherits(CustomControlSpacer, _Spacer);

	  function CustomControlSpacer() {
	    _classCallCheck(this, CustomControlSpacer);

	    return _possibleConstructorReturn(this, _Spacer.apply(this, arguments));
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */
	  CustomControlSpacer.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-custom-control-spacer ' + _Spacer.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  CustomControlSpacer.prototype.createEl = function createEl() {
	    var el = _Spacer.prototype.createEl.call(this, {
	      className: this.buildCSSClass()
	    });

	    // No-flex/table-cell mode requires there be some content
	    // in the cell to fill the remaining space of the table.
	    el.innerHTML = '&nbsp;';
	    return el;
	  };

	  return CustomControlSpacer;
	}(_spacer2['default']);

	_component2['default'].registerComponent('CustomControlSpacer', CustomControlSpacer);
	exports['default'] = CustomControlSpacer;


/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file spacer.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Just an empty spacer element that can be used as an append point for plugins, etc.
	 * Also can be used to create space between elements when necessary.
	 *
	 * @extends Component
	 */
	var Spacer = function (_Component) {
	  _inherits(Spacer, _Component);

	  function Spacer() {
	    _classCallCheck(this, Spacer);

	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */
	  Spacer.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-spacer ' + _Component.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  Spacer.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: this.buildCSSClass()
	    });
	  };

	  return Spacer;
	}(_component2['default']);

	_component2['default'].registerComponent('Spacer', Spacer);

	exports['default'] = Spacer;


/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _modalDialog = __webpack_require__(279);

	var _modalDialog2 = _interopRequireDefault(_modalDialog);

	var _mergeOptions = __webpack_require__(270);

	var _mergeOptions2 = _interopRequireDefault(_mergeOptions);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file error-display.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * A display that indicates an error has occurred. This means that the video
	 * is unplayable.
	 *
	 * @extends ModalDialog
	 */
	var ErrorDisplay = function (_ModalDialog) {
	  _inherits(ErrorDisplay, _ModalDialog);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param  {Player} player
	   *         The `Player` that this class should be attached to.
	   *
	   * @param  {Object} [options]
	   *         The key/value store of player options.
	   */
	  function ErrorDisplay(player, options) {
	    _classCallCheck(this, ErrorDisplay);

	    var _this = _possibleConstructorReturn(this, _ModalDialog.call(this, player, options));

	    _this.on(player, 'error', _this.open);
	    return _this;
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   *
	   * @deprecated Since version 5.
	   */


	  ErrorDisplay.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-error-display ' + _ModalDialog.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Gets the localized error message based on the `Player`s error.
	   *
	   * @return {string}
	   *         The `Player`s error message localized or an empty string.
	   */


	  ErrorDisplay.prototype.content = function content() {
	    var error = this.player().error();

	    return error ? this.localize(error.message) : '';
	  };

	  return ErrorDisplay;
	}(_modalDialog2['default']);

	/**
	 * The default options for an `ErrorDisplay`.
	 *
	 * @private
	 */


	ErrorDisplay.prototype.options_ = (0, _mergeOptions2['default'])(_modalDialog2['default'].prototype.options_, {
	  fillAlways: true,
	  temporary: false,
	  uncloseable: true
	});

	_component2['default'].registerComponent('ErrorDisplay', ErrorDisplay);
	exports['default'] = ErrorDisplay;


/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _window = __webpack_require__(255);

	var _window2 = _interopRequireDefault(_window);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _dom = __webpack_require__(259);

	var _fn = __webpack_require__(268);

	var Fn = _interopRequireWildcard(_fn);

	var _obj = __webpack_require__(263);

	var Obj = _interopRequireWildcard(_obj);

	var _log = __webpack_require__(261);

	var _log2 = _interopRequireDefault(_log);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file text-track-settings.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	var LOCAL_STORAGE_KEY = 'vjs-text-track-settings';

	var COLOR_BLACK = ['#000', 'Black'];
	var COLOR_BLUE = ['#00F', 'Blue'];
	var COLOR_CYAN = ['#0FF', 'Cyan'];
	var COLOR_GREEN = ['#0F0', 'Green'];
	var COLOR_MAGENTA = ['#F0F', 'Magenta'];
	var COLOR_RED = ['#F00', 'Red'];
	var COLOR_WHITE = ['#FFF', 'White'];
	var COLOR_YELLOW = ['#FF0', 'Yellow'];

	var OPACITY_OPAQUE = ['1', 'Opaque'];
	var OPACITY_SEMI = ['0.5', 'Semi-Transparent'];
	var OPACITY_TRANS = ['0', 'Transparent'];

	// Configuration for the various <select> elements in the DOM of this component.
	//
	// Possible keys include:
	//
	// `default`:
	//   The default option index. Only needs to be provided if not zero.
	// `parser`:
	//   A function which is used to parse the value from the selected option in
	//   a customized way.
	// `selector`:
	//   The selector used to find the associated <select> element.
	var selectConfigs = {
	  backgroundColor: {
	    selector: '.vjs-bg-color > select',
	    id: 'captions-background-color-%s',
	    label: 'Color',
	    options: [COLOR_BLACK, COLOR_WHITE, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]
	  },

	  backgroundOpacity: {
	    selector: '.vjs-bg-opacity > select',
	    id: 'captions-background-opacity-%s',
	    label: 'Transparency',
	    options: [OPACITY_OPAQUE, OPACITY_SEMI, OPACITY_TRANS]
	  },

	  color: {
	    selector: '.vjs-fg-color > select',
	    id: 'captions-foreground-color-%s',
	    label: 'Color',
	    options: [COLOR_WHITE, COLOR_BLACK, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]
	  },

	  edgeStyle: {
	    selector: '.vjs-edge-style > select',
	    id: '%s',
	    label: 'Text Edge Style',
	    options: [['none', 'None'], ['raised', 'Raised'], ['depressed', 'Depressed'], ['uniform', 'Uniform'], ['dropshadow', 'Dropshadow']]
	  },

	  fontFamily: {
	    selector: '.vjs-font-family > select',
	    id: 'captions-font-family-%s',
	    label: 'Font Family',
	    options: [['proportionalSansSerif', 'Proportional Sans-Serif'], ['monospaceSansSerif', 'Monospace Sans-Serif'], ['proportionalSerif', 'Proportional Serif'], ['monospaceSerif', 'Monospace Serif'], ['casual', 'Casual'], ['script', 'Script'], ['small-caps', 'Small Caps']]
	  },

	  fontPercent: {
	    selector: '.vjs-font-percent > select',
	    id: 'captions-font-size-%s',
	    label: 'Font Size',
	    options: [['0.50', '50%'], ['0.75', '75%'], ['1.00', '100%'], ['1.25', '125%'], ['1.50', '150%'], ['1.75', '175%'], ['2.00', '200%'], ['3.00', '300%'], ['4.00', '400%']],
	    'default': 2,
	    parser: function parser(v) {
	      return v === '1.00' ? null : Number(v);
	    }
	  },

	  textOpacity: {
	    selector: '.vjs-text-opacity > select',
	    id: 'captions-foreground-opacity-%s',
	    label: 'Transparency',
	    options: [OPACITY_OPAQUE, OPACITY_SEMI]
	  },

	  // Options for this object are defined below.
	  windowColor: {
	    selector: '.vjs-window-color > select',
	    id: 'captions-window-color-%s',
	    label: 'Color'
	  },

	  // Options for this object are defined below.
	  windowOpacity: {
	    selector: '.vjs-window-opacity > select',
	    id: 'captions-window-opacity-%s',
	    label: 'Transparency',
	    options: [OPACITY_TRANS, OPACITY_SEMI, OPACITY_OPAQUE]
	  }
	};

	selectConfigs.windowColor.options = selectConfigs.backgroundColor.options;

	/**
	 * Get the actual value of an option.
	 *
	 * @param  {string} value
	 *         The value to get
	 *
	 * @param  {Function} [parser]
	 *         Optional function to adjust the value.
	 *
	 * @return {Mixed}
	 *         - Will be `undefined` if no value exists
	 *         - Will be `undefined` if the given value is "none".
	 *         - Will be the actual value otherwise.
	 *
	 * @private
	 */
	function parseOptionValue(value, parser) {
	  if (parser) {
	    value = parser(value);
	  }

	  if (value && value !== 'none') {
	    return value;
	  }
	}

	/**
	 * Gets the value of the selected <option> element within a <select> element.
	 *
	 * @param  {Element} el
	 *         the element to look in
	 *
	 * @param  {Function} [parser]
	 *         Optional function to adjust the value.
	 *
	 * @return {Mixed}
	 *         - Will be `undefined` if no value exists
	 *         - Will be `undefined` if the given value is "none".
	 *         - Will be the actual value otherwise.
	 *
	 * @private
	 */
	function getSelectedOptionValue(el, parser) {
	  var value = el.options[el.options.selectedIndex].value;

	  return parseOptionValue(value, parser);
	}

	/**
	 * Sets the selected <option> element within a <select> element based on a
	 * given value.
	 *
	 * @param {Element} el
	 *        The element to look in.
	 *
	 * @param {string} value
	 *        the property to look on.
	 *
	 * @param {Function} [parser]
	 *        Optional function to adjust the value before comparing.
	 *
	 * @private
	 */
	function setSelectedOption(el, value, parser) {
	  if (!value) {
	    return;
	  }

	  for (var i = 0; i < el.options.length; i++) {
	    if (parseOptionValue(el.options[i].value, parser) === value) {
	      el.selectedIndex = i;
	      break;
	    }
	  }
	}

	/**
	 * Manipulate Text Tracks settings.
	 *
	 * @extends Component
	 */

	var TextTrackSettings = function (_Component) {
	  _inherits(TextTrackSettings, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *         The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *         The key/value store of player options.
	   */
	  function TextTrackSettings(player, options) {
	    _classCallCheck(this, TextTrackSettings);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.setDefaults();
	    _this.hide();

	    _this.updateDisplay = Fn.bind(_this, _this.updateDisplay);

	    // Grab `persistTextTrackSettings` from the player options if not passed in child options
	    if (options.persistTextTrackSettings === undefined) {
	      _this.options_.persistTextTrackSettings = _this.options_.playerOptions.persistTextTrackSettings;
	    }

	    _this.on(_this.$('.vjs-done-button'), 'click', function () {
	      _this.saveSettings();
	      _this.hide();
	    });

	    _this.on(_this.$('.vjs-default-button'), 'click', function () {
	      _this.setDefaults();
	      _this.updateDisplay();
	    });

	    Obj.each(selectConfigs, function (config) {
	      _this.on(_this.$(config.selector), 'change', _this.updateDisplay);
	    });

	    if (_this.options_.persistTextTrackSettings) {
	      _this.restoreSettings();
	    }
	    return _this;
	  }

	  /**
	   * Create a <select> element with configured options.
	   *
	   * @param {string} key
	   *        Configuration key to use during creation.
	   *
	   * @return {Element}
	   *         The DOM element that gets created.
	   * @private
	   */


	  TextTrackSettings.prototype.createElSelect_ = function createElSelect_(key) {
	    var _this2 = this;

	    var config = selectConfigs[key];
	    var id = config.id.replace('%s', this.id_);

	    return [(0, _dom.createEl)('label', {
	      className: 'vjs-label',
	      textContent: config.label
	    }, {
	      'for': id
	    }), (0, _dom.createEl)('select', { id: id }, undefined, config.options.map(function (o) {
	      return (0, _dom.createEl)('option', {
	        textContent: _this2.localize(o[1]),
	        value: o[0]
	      });
	    }))];
	  };

	  /**
	   * Create foreground color element for the component
	   *
	   * @return {Element}
	   *         The element that was created.
	   *
	   * @private
	   */


	  TextTrackSettings.prototype.createElFgColor_ = function createElFgColor_() {
	    var legend = (0, _dom.createEl)('legend', {
	      textContent: this.localize('Text')
	    });

	    var select = this.createElSelect_('color');

	    var opacity = (0, _dom.createEl)('span', {
	      className: 'vjs-text-opacity vjs-opacity'
	    }, undefined, this.createElSelect_('textOpacity'));

	    return (0, _dom.createEl)('fieldset', {
	      className: 'vjs-fg-color vjs-tracksetting'
	    }, undefined, [legend].concat(select, opacity));
	  };

	  /**
	   * Create background color element for the component
	   *
	   * @return {Element}
	   *         The element that was created
	   *
	   * @private
	   */


	  TextTrackSettings.prototype.createElBgColor_ = function createElBgColor_() {
	    var legend = (0, _dom.createEl)('legend', {
	      textContent: this.localize('Background')
	    });

	    var select = this.createElSelect_('backgroundColor');

	    var opacity = (0, _dom.createEl)('span', {
	      className: 'vjs-bg-opacity vjs-opacity'
	    }, undefined, this.createElSelect_('backgroundOpacity'));

	    return (0, _dom.createEl)('fieldset', {
	      className: 'vjs-bg-color vjs-tracksetting'
	    }, undefined, [legend].concat(select, opacity));
	  };

	  /**
	   * Create window color element for the component
	   *
	   * @return {Element}
	   *         The element that was created
	   *
	   * @private
	   */


	  TextTrackSettings.prototype.createElWinColor_ = function createElWinColor_() {
	    var legend = (0, _dom.createEl)('legend', {
	      textContent: this.localize('Window')
	    });

	    var select = this.createElSelect_('windowColor');

	    var opacity = (0, _dom.createEl)('span', {
	      className: 'vjs-window-opacity vjs-opacity'
	    }, undefined, this.createElSelect_('windowOpacity'));

	    return (0, _dom.createEl)('fieldset', {
	      className: 'vjs-window-color vjs-tracksetting'
	    }, undefined, [legend].concat(select, opacity));
	  };

	  /**
	   * Create color elements for the component
	   *
	   * @return {Element}
	   *         The element that was created
	   *
	   * @private
	   */


	  TextTrackSettings.prototype.createElColors_ = function createElColors_() {
	    return (0, _dom.createEl)('div', {
	      className: 'vjs-tracksettings-colors'
	    }, undefined, [this.createElFgColor_(), this.createElBgColor_(), this.createElWinColor_()]);
	  };

	  /**
	   * Create font elements for the component
	   *
	   * @return {Element}
	   *         The element that was created.
	   *
	   * @private
	   */


	  TextTrackSettings.prototype.createElFont_ = function createElFont_() {
	    var fontPercent = (0, _dom.createEl)('div', {
	      className: 'vjs-font-percent vjs-tracksetting'
	    }, undefined, this.createElSelect_('fontPercent'));

	    var edgeStyle = (0, _dom.createEl)('div', {
	      className: 'vjs-edge-style vjs-tracksetting'
	    }, undefined, this.createElSelect_('edgeStyle'));

	    var fontFamily = (0, _dom.createEl)('div', {
	      className: 'vjs-font-family vjs-tracksetting'
	    }, undefined, this.createElSelect_('fontFamily'));

	    return (0, _dom.createEl)('div', {
	      className: 'vjs-tracksettings-font'
	    }, undefined, [fontPercent, edgeStyle, fontFamily]);
	  };

	  /**
	   * Create controls for the component
	   *
	   * @return {Element}
	   *         The element that was created.
	   *
	   * @private
	   */


	  TextTrackSettings.prototype.createElControls_ = function createElControls_() {
	    var defaultsButton = (0, _dom.createEl)('button', {
	      className: 'vjs-default-button',
	      textContent: this.localize('Defaults')
	    });

	    var doneButton = (0, _dom.createEl)('button', {
	      className: 'vjs-done-button',
	      textContent: 'Done'
	    });

	    return (0, _dom.createEl)('div', {
	      className: 'vjs-tracksettings-controls'
	    }, undefined, [defaultsButton, doneButton]);
	  };

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  TextTrackSettings.prototype.createEl = function createEl() {
	    var settings = (0, _dom.createEl)('div', {
	      className: 'vjs-tracksettings'
	    }, undefined, [this.createElColors_(), this.createElFont_(), this.createElControls_()]);

	    var heading = (0, _dom.createEl)('div', {
	      className: 'vjs-control-text',
	      id: 'TTsettingsDialogLabel-' + this.id_,
	      textContent: 'Caption Settings Dialog'
	    }, {
	      'aria-level': '1',
	      'role': 'heading'
	    });

	    var description = (0, _dom.createEl)('div', {
	      className: 'vjs-control-text',
	      id: 'TTsettingsDialogDescription-' + this.id_,
	      textContent: 'Beginning of dialog window. Escape will cancel and close the window.'
	    });

	    var doc = (0, _dom.createEl)('div', undefined, {
	      role: 'document'
	    }, [heading, description, settings]);

	    return (0, _dom.createEl)('div', {
	      className: 'vjs-caption-settings vjs-modal-overlay',
	      tabIndex: -1
	    }, {
	      'role': 'dialog',
	      'aria-labelledby': heading.id,
	      'aria-describedby': description.id
	    }, doc);
	  };

	  /**
	   * Gets an object of text track settings (or null).
	   *
	   * @return {Object}
	   *         An object with config values parsed from the DOM or localStorage.
	   */


	  TextTrackSettings.prototype.getValues = function getValues() {
	    var _this3 = this;

	    return Obj.reduce(selectConfigs, function (accum, config, key) {
	      var value = getSelectedOptionValue(_this3.$(config.selector), config.parser);

	      if (value !== undefined) {
	        accum[key] = value;
	      }

	      return accum;
	    }, {});
	  };

	  /**
	   * Sets text track settings from an object of values.
	   *
	   * @param {Object} values
	   *        An object with config values parsed from the DOM or localStorage.
	   */


	  TextTrackSettings.prototype.setValues = function setValues(values) {
	    var _this4 = this;

	    Obj.each(selectConfigs, function (config, key) {
	      setSelectedOption(_this4.$(config.selector), values[key], config.parser);
	    });
	  };

	  /**
	   * Sets all <select> elements to their default values.
	   */


	  TextTrackSettings.prototype.setDefaults = function setDefaults() {
	    var _this5 = this;

	    Obj.each(selectConfigs, function (config) {
	      var index = config.hasOwnProperty('default') ? config['default'] : 0;

	      _this5.$(config.selector).selectedIndex = index;
	    });
	  };

	  /**
	   * Restore texttrack settings from localStorage
	   */


	  TextTrackSettings.prototype.restoreSettings = function restoreSettings() {
	    var values = void 0;

	    try {
	      values = JSON.parse(_window2['default'].localStorage.getItem(LOCAL_STORAGE_KEY));
	    } catch (err) {
	      _log2['default'].warn(err);
	    }

	    if (values) {
	      this.setValues(values);
	    }
	  };

	  /**
	   * Save text track settings to localStorage
	   */


	  TextTrackSettings.prototype.saveSettings = function saveSettings() {
	    if (!this.options_.persistTextTrackSettings) {
	      return;
	    }

	    var values = this.getValues();

	    try {
	      if (Object.keys(values).length) {
	        _window2['default'].localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(values));
	      } else {
	        _window2['default'].localStorage.removeItem(LOCAL_STORAGE_KEY);
	      }
	    } catch (err) {
	      _log2['default'].warn(err);
	    }
	  };

	  /**
	   * Update display of text track settings
	   */


	  TextTrackSettings.prototype.updateDisplay = function updateDisplay() {
	    var ttDisplay = this.player_.getChild('textTrackDisplay');

	    if (ttDisplay) {
	      ttDisplay.updateDisplay();
	    }
	  };

	  return TextTrackSettings;
	}(_component2['default']);

	_component2['default'].registerComponent('TextTrackSettings', TextTrackSettings);

	exports['default'] = TextTrackSettings;


/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _templateObject = _taggedTemplateLiteralLoose(['Text Tracks are being loaded from another origin but the crossorigin attribute isn\'t used.\n            This may prevent text tracks from loading.'], ['Text Tracks are being loaded from another origin but the crossorigin attribute isn\'t used.\n            This may prevent text tracks from loading.']);

	var _tech = __webpack_require__(280);

	var _tech2 = _interopRequireDefault(_tech);

	var _component = __webpack_require__(267);

	var _component2 = _interopRequireDefault(_component);

	var _dom = __webpack_require__(259);

	var Dom = _interopRequireWildcard(_dom);

	var _url = __webpack_require__(286);

	var Url = _interopRequireWildcard(_url);

	var _fn = __webpack_require__(268);

	var Fn = _interopRequireWildcard(_fn);

	var _log = __webpack_require__(261);

	var _log2 = _interopRequireDefault(_log);

	var _tsml = __webpack_require__(264);

	var _tsml2 = _interopRequireDefault(_tsml);

	var _browser = __webpack_require__(262);

	var browser = _interopRequireWildcard(_browser);

	var _document = __webpack_require__(256);

	var _document2 = _interopRequireDefault(_document);

	var _window = __webpack_require__(255);

	var _window2 = _interopRequireDefault(_window);

	var _obj = __webpack_require__(263);

	var _mergeOptions = __webpack_require__(270);

	var _mergeOptions2 = _interopRequireDefault(_mergeOptions);

	var _toTitleCase = __webpack_require__(269);

	var _toTitleCase2 = _interopRequireDefault(_toTitleCase);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _taggedTemplateLiteralLoose(strings, raw) { strings.raw = raw; return strings; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file html5.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * HTML5 Media Controller - Wrapper for HTML5 Media API
	 *
	 * @mixes Tech~SouceHandlerAdditions
	 * @extends Tech
	 */
	var Html5 = function (_Tech) {
	  _inherits(Html5, _Tech);

	  /**
	   * Create an instance of this Tech.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   *
	   * @param {Component~ReadyCallback} ready
	   *        Callback function to call when the `HTML5` Tech is ready.
	   */
	  function Html5(options, ready) {
	    _classCallCheck(this, Html5);

	    var _this = _possibleConstructorReturn(this, _Tech.call(this, options, ready));

	    var source = options.source;
	    var crossoriginTracks = false;

	    // Set the source if one is provided
	    // 1) Check if the source is new (if not, we want to keep the original so playback isn't interrupted)
	    // 2) Check to see if the network state of the tag was failed at init, and if so, reset the source
	    // anyway so the error gets fired.
	    if (source && (_this.el_.currentSrc !== source.src || options.tag && options.tag.initNetworkState_ === 3)) {
	      _this.setSource(source);
	    } else {
	      _this.handleLateInit_(_this.el_);
	    }

	    if (_this.el_.hasChildNodes()) {

	      var nodes = _this.el_.childNodes;
	      var nodesLength = nodes.length;
	      var removeNodes = [];

	      while (nodesLength--) {
	        var node = nodes[nodesLength];
	        var nodeName = node.nodeName.toLowerCase();

	        if (nodeName === 'track') {
	          if (!_this.featuresNativeTextTracks) {
	            // Empty video tag tracks so the built-in player doesn't use them also.
	            // This may not be fast enough to stop HTML5 browsers from reading the tags
	            // so we'll need to turn off any default tracks if we're manually doing
	            // captions and subtitles. videoElement.textTracks
	            removeNodes.push(node);
	          } else {
	            // store HTMLTrackElement and TextTrack to remote list
	            _this.remoteTextTrackEls().addTrackElement_(node);
	            _this.remoteTextTracks().addTrack_(node.track);
	            if (!crossoriginTracks && !_this.el_.hasAttribute('crossorigin') && Url.isCrossOrigin(node.src)) {
	              crossoriginTracks = true;
	            }
	          }
	        }
	      }

	      for (var i = 0; i < removeNodes.length; i++) {
	        _this.el_.removeChild(removeNodes[i]);
	      }
	    }

	    // TODO: add text tracks into this list
	    var trackTypes = ['audio', 'video'];

	    // ProxyNative Video/Audio Track
	    trackTypes.forEach(function (type) {
	      var elTracks = _this.el()[type + 'Tracks'];
	      var techTracks = _this[type + 'Tracks']();
	      var capitalType = (0, _toTitleCase2['default'])(type);

	      if (!_this['featuresNative' + capitalType + 'Tracks'] || !elTracks || !elTracks.addEventListener) {
	        return;
	      }

	      _this['handle' + capitalType + 'TrackChange_'] = function (e) {
	        techTracks.trigger({
	          type: 'change',
	          target: techTracks,
	          currentTarget: techTracks,
	          srcElement: techTracks
	        });
	      };

	      _this['handle' + capitalType + 'TrackAdd_'] = function (e) {
	        return techTracks.addTrack(e.track);
	      };
	      _this['handle' + capitalType + 'TrackRemove_'] = function (e) {
	        return techTracks.removeTrack(e.track);
	      };

	      elTracks.addEventListener('change', _this['handle' + capitalType + 'TrackChange_']);
	      elTracks.addEventListener('addtrack', _this['handle' + capitalType + 'TrackAdd_']);
	      elTracks.addEventListener('removetrack', _this['handle' + capitalType + 'TrackRemove_']);
	      _this['removeOld' + capitalType + 'Tracks_'] = function (e) {
	        return _this.removeOldTracks_(techTracks, elTracks);
	      };

	      // Remove (native) tracks that are not used anymore
	      _this.on('loadstart', _this['removeOld' + capitalType + 'Tracks_']);
	    });

	    if (_this.featuresNativeTextTracks) {
	      if (crossoriginTracks) {
	        _log2['default'].warn((0, _tsml2['default'])(_templateObject));
	      }

	      _this.handleTextTrackChange_ = Fn.bind(_this, _this.handleTextTrackChange);
	      _this.handleTextTrackAdd_ = Fn.bind(_this, _this.handleTextTrackAdd);
	      _this.handleTextTrackRemove_ = Fn.bind(_this, _this.handleTextTrackRemove);
	      _this.proxyNativeTextTracks_();
	    }

	    // Determine if native controls should be used
	    // Our goal should be to get the custom controls on mobile solid everywhere
	    // so we can remove this all together. Right now this will block custom
	    // controls on touch enabled laptops like the Chrome Pixel
	    if ((browser.TOUCH_ENABLED || browser.IS_IPHONE || browser.IS_NATIVE_ANDROID) && options.nativeControlsForTouch === true) {
	      _this.setControls(true);
	    }

	    // on iOS, we want to proxy `webkitbeginfullscreen` and `webkitendfullscreen`
	    // into a `fullscreenchange` event
	    _this.proxyWebkitFullscreen_();

	    _this.triggerReady();
	    return _this;
	  }

	  /**
	   * Dispose of `HTML5` media element and remove all tracks.
	   */


	  Html5.prototype.dispose = function dispose() {
	    var _this2 = this;

	    // Un-ProxyNativeTracks
	    ['audio', 'video', 'text'].forEach(function (type) {
	      var capitalType = (0, _toTitleCase2['default'])(type);
	      var tl = _this2.el_[type + 'Tracks'];

	      if (tl && tl.removeEventListener) {
	        tl.removeEventListener('change', _this2['handle' + capitalType + 'TrackChange_']);
	        tl.removeEventListener('addtrack', _this2['handle' + capitalType + 'TrackAdd_']);
	        tl.removeEventListener('removetrack', _this2['handle' + capitalType + 'TrackRemove_']);
	      }

	      // Stop removing old text tracks
	      if (tl) {
	        _this2.off('loadstart', _this2['removeOld' + capitalType + 'Tracks_']);
	      }
	    });

	    Html5.disposeMediaElement(this.el_);
	    // tech will handle clearing of the emulated track list
	    _Tech.prototype.dispose.call(this);
	  };

	  /**
	   * Create the `Html5` Tech's DOM element.
	   *
	   * @return {Element}
	   *         The element that gets created.
	   */


	  Html5.prototype.createEl = function createEl() {
	    var el = this.options_.tag;

	    // Check if this browser supports moving the element into the box.
	    // On the iPhone video will break if you move the element,
	    // So we have to create a brand new element.
	    // If we ingested the player div, we do not need to move the media element.
	    if (!el || !(this.options_.playerElIngest || this.movingMediaElementInDOM)) {

	      // If the original tag is still there, clone and remove it.
	      if (el) {
	        var clone = el.cloneNode(true);

	        if (el.parentNode) {
	          el.parentNode.insertBefore(clone, el);
	        }
	        Html5.disposeMediaElement(el);
	        el = clone;
	      } else {
	        el = _document2['default'].createElement('video');

	        // determine if native controls should be used
	        var tagAttributes = this.options_.tag && Dom.getElAttributes(this.options_.tag);
	        var attributes = (0, _mergeOptions2['default'])({}, tagAttributes);

	        if (!browser.TOUCH_ENABLED || this.options_.nativeControlsForTouch !== true) {
	          delete attributes.controls;
	        }

	        Dom.setElAttributes(el, (0, _obj.assign)(attributes, {
	          id: this.options_.techId,
	          'class': 'vjs-tech'
	        }));
	      }

	      el.playerId = this.options_.playerId;
	    }

	    // Update specific tag settings, in case they were overridden
	    var settingsAttrs = ['autoplay', 'preload', 'loop', 'muted'];

	    for (var i = settingsAttrs.length - 1; i >= 0; i--) {
	      var attr = settingsAttrs[i];
	      var overwriteAttrs = {};

	      if (typeof this.options_[attr] !== 'undefined') {
	        overwriteAttrs[attr] = this.options_[attr];
	      }
	      Dom.setElAttributes(el, overwriteAttrs);
	    }

	    return el;
	  };

	  /**
	   * This will be triggered if the loadstart event has already fired, before videojs was
	   * ready. Two known examples of when this can happen are:
	   * 1. If we're loading the playback object after it has started loading
	   * 2. The media is already playing the (often with autoplay on) then
	   *
	   * This function will fire another loadstart so that videojs can catchup.
	   *
	   * @fires Tech#loadstart
	   *
	   * @return {undefined}
	   *         returns nothing.
	   */


	  Html5.prototype.handleLateInit_ = function handleLateInit_(el) {
	    var _this3 = this;

	    if (el.networkState === 0 || el.networkState === 3) {
	      // The video element hasn't started loading the source yet
	      // or didn't find a source
	      return;
	    }

	    if (el.readyState === 0) {
	      var _ret = function () {
	        // NetworkState is set synchronously BUT loadstart is fired at the
	        // end of the current stack, usually before setInterval(fn, 0).
	        // So at this point we know loadstart may have already fired or is
	        // about to fire, and either way the player hasn't seen it yet.
	        // We don't want to fire loadstart prematurely here and cause a
	        // double loadstart so we'll wait and see if it happens between now
	        // and the next loop, and fire it if not.
	        // HOWEVER, we also want to make sure it fires before loadedmetadata
	        // which could also happen between now and the next loop, so we'll
	        // watch for that also.
	        var loadstartFired = false;
	        var setLoadstartFired = function setLoadstartFired() {
	          loadstartFired = true;
	        };

	        _this3.on('loadstart', setLoadstartFired);

	        var triggerLoadstart = function triggerLoadstart() {
	          // We did miss the original loadstart. Make sure the player
	          // sees loadstart before loadedmetadata
	          if (!loadstartFired) {
	            this.trigger('loadstart');
	          }
	        };

	        _this3.on('loadedmetadata', triggerLoadstart);

	        _this3.ready(function () {
	          this.off('loadstart', setLoadstartFired);
	          this.off('loadedmetadata', triggerLoadstart);

	          if (!loadstartFired) {
	            // We did miss the original native loadstart. Fire it now.
	            this.trigger('loadstart');
	          }
	        });

	        return {
	          v: void 0
	        };
	      }();

	      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
	    }

	    // From here on we know that loadstart already fired and we missed it.
	    // The other readyState events aren't as much of a problem if we double
	    // them, so not going to go to as much trouble as loadstart to prevent
	    // that unless we find reason to.
	    var eventsToTrigger = ['loadstart'];

	    // loadedmetadata: newly equal to HAVE_METADATA (1) or greater
	    eventsToTrigger.push('loadedmetadata');

	    // loadeddata: newly increased to HAVE_CURRENT_DATA (2) or greater
	    if (el.readyState >= 2) {
	      eventsToTrigger.push('loadeddata');
	    }

	    // canplay: newly increased to HAVE_FUTURE_DATA (3) or greater
	    if (el.readyState >= 3) {
	      eventsToTrigger.push('canplay');
	    }

	    // canplaythrough: newly equal to HAVE_ENOUGH_DATA (4)
	    if (el.readyState >= 4) {
	      eventsToTrigger.push('canplaythrough');
	    }

	    // We still need to give the player time to add event listeners
	    this.ready(function () {
	      eventsToTrigger.forEach(function (type) {
	        this.trigger(type);
	      }, this);
	    });
	  };

	  /**
	   * Add event listeners to native text track events. This adds the native text tracks
	   * to our emulated {@link TextTrackList}.
	   */


	  Html5.prototype.proxyNativeTextTracks_ = function proxyNativeTextTracks_() {
	    var tt = this.el().textTracks;

	    if (tt) {
	      // Add tracks - if player is initialised after DOM loaded, textTracks
	      // will not trigger addtrack
	      for (var i = 0; i < tt.length; i++) {
	        this.textTracks().addTrack_(tt[i]);
	      }

	      if (tt.addEventListener) {
	        tt.addEventListener('change', this.handleTextTrackChange_);
	        tt.addEventListener('addtrack', this.handleTextTrackAdd_);
	        tt.addEventListener('removetrack', this.handleTextTrackRemove_);
	      }

	      // Remove (native) texttracks that are not used anymore
	      this.on('loadstart', this.removeOldTextTracks_);
	    }
	  };

	  /**
	   * Handle any {@link TextTrackList} `change` event.
	   *
	   * @param {EventTarget~Event} e
	   *        The `change` event that caused this to run.
	   *
	   * @listens TextTrackList#change
	   */


	  Html5.prototype.handleTextTrackChange = function handleTextTrackChange(e) {
	    var tt = this.textTracks();

	    this.textTracks().trigger({
	      type: 'change',
	      target: tt,
	      currentTarget: tt,
	      srcElement: tt
	    });
	  };

	  /**
	   * Handle any {@link TextTrackList} `addtrack` event.
	   *
	   * @param {EventTarget~Event} e
	   *        The `addtrack` event that caused this to run.
	   *
	   * @listens TextTrackList#addtrack
	   */


	  Html5.prototype.handleTextTrackAdd = function handleTextTrackAdd(e) {
	    this.textTracks().addTrack_(e.track);
	  };

	  /**
	   * Handle any {@link TextTrackList} `removetrack` event.
	   *
	   * @param {EventTarget~Event} e
	   *        The `removetrack` event that caused this to run.
	   *
	   * @listens TextTrackList#removetrack
	   */


	  Html5.prototype.handleTextTrackRemove = function handleTextTrackRemove(e) {
	    this.textTracks().removeTrack_(e.track);
	  };

	  /**
	   * This function removes any {@link AudioTrack}s, {@link VideoTrack}s, or
	   * {@link TextTrack}s that are not in the media elements TrackList.
	   *
	   * @param {TrackList} techTracks
	   *        HTML5 Tech's TrackList to search through
	   *
	   * @param {TrackList} elTracks
	   *        HTML5 media elements TrackList to search trough.
	   *
	   * @private
	   */


	  Html5.prototype.removeOldTracks_ = function removeOldTracks_(techTracks, elTracks) {
	    // This will loop over the techTracks and check if they are still used by the HTML5 media element
	    // If not, they will be removed from the emulated list
	    var removeTracks = [];

	    if (!elTracks) {
	      return;
	    }

	    for (var i = 0; i < techTracks.length; i++) {
	      var techTrack = techTracks[i];
	      var found = false;

	      for (var j = 0; j < elTracks.length; j++) {
	        if (elTracks[j] === techTrack) {
	          found = true;
	          break;
	        }
	      }

	      if (!found) {
	        removeTracks.push(techTrack);
	      }
	    }

	    for (var _i = 0; _i < removeTracks.length; _i++) {
	      var track = removeTracks[_i];

	      techTracks.removeTrack_(track);
	    }
	  };

	  /**
	   * Remove {@link TextTrack}s that dont exist in the native track list from our
	   * emulated {@link TextTrackList}.
	   *
	   * @listens Tech#loadstart
	   */


	  Html5.prototype.removeOldTextTracks_ = function removeOldTextTracks_(e) {
	    var techTracks = this.textTracks();
	    var elTracks = this.el().textTracks;

	    this.removeOldTracks_(techTracks, elTracks);
	  };

	  /**
	   * Called by {@link Player#play} to play using the `Html5` `Tech`.
	   */


	  Html5.prototype.play = function play() {
	    var playPromise = this.el_.play();

	    // Catch/silence error when a pause interrupts a play request
	    // on browsers which return a promise
	    if (playPromise !== undefined && typeof playPromise.then === 'function') {
	      playPromise.then(null, function (e) {});
	    }
	  };

	  /**
	   * Set current time for the `HTML5` tech.
	   *
	   * @param {number} seconds
	   *        Set the current time of the media to this.
	   */


	  Html5.prototype.setCurrentTime = function setCurrentTime(seconds) {
	    try {
	      this.el_.currentTime = seconds;
	    } catch (e) {
	      (0, _log2['default'])(e, 'Video is not ready. (Video.js)');
	      // this.warning(VideoJS.warnings.videoNotReady);
	    }
	  };

	  /**
	   * Get the current duration of the HTML5 media element.
	   *
	   * @return {number}
	   *         The duration of the media or 0 if there is no duration.
	   */


	  Html5.prototype.duration = function duration() {
	    var _this4 = this;

	    // Android Chrome will report duration as Infinity for VOD HLS until after
	    // playback has started, which triggers the live display erroneously.
	    // Return NaN if playback has not started and trigger a durationupdate once
	    // the duration can be reliably known.
	    if (this.el_.duration === Infinity && browser.IS_ANDROID && browser.IS_CHROME) {
	      if (this.el_.currentTime === 0) {
	        var _ret2 = function () {
	          // Wait for the first `timeupdate` with currentTime > 0 - there may be
	          // several with 0
	          var checkProgress = function checkProgress() {
	            if (_this4.el_.currentTime > 0) {
	              // Trigger durationchange for genuinely live video
	              if (_this4.el_.duration === Infinity) {
	                _this4.trigger('durationchange');
	              }
	              _this4.off('timeupdate', checkProgress);
	            }
	          };

	          _this4.on('timeupdate', checkProgress);
	          return {
	            v: NaN
	          };
	        }();

	        if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === "object") return _ret2.v;
	      }
	    }
	    return this.el_.duration || NaN;
	  };

	  /**
	   * Get the current width of the HTML5 media element.
	   *
	   * @return {number}
	   *         The width of the HTML5 media element.
	   */


	  Html5.prototype.width = function width() {
	    return this.el_.offsetWidth;
	  };

	  /**
	   * Get the current height of the HTML5 media element.
	   *
	   * @return {number}
	   *         The heigth of the HTML5 media element.
	   */


	  Html5.prototype.height = function height() {
	    return this.el_.offsetHeight;
	  };

	  /**
	   * Proxy iOS `webkitbeginfullscreen` and `webkitendfullscreen` into
	   * `fullscreenchange` event.
	   *
	   * @private
	   * @fires fullscreenchange
	   * @listens webkitendfullscreen
	   * @listens webkitbeginfullscreen
	   * @listens webkitbeginfullscreen
	   */


	  Html5.prototype.proxyWebkitFullscreen_ = function proxyWebkitFullscreen_() {
	    var _this5 = this;

	    if (!('webkitDisplayingFullscreen' in this.el_)) {
	      return;
	    }

	    var endFn = function endFn() {
	      this.trigger('fullscreenchange', { isFullscreen: false });
	    };

	    var beginFn = function beginFn() {
	      this.one('webkitendfullscreen', endFn);

	      this.trigger('fullscreenchange', { isFullscreen: true });
	    };

	    this.on('webkitbeginfullscreen', beginFn);
	    this.on('dispose', function () {
	      _this5.off('webkitbeginfullscreen', beginFn);
	      _this5.off('webkitendfullscreen', endFn);
	    });
	  };

	  /**
	   * Check if fullscreen is supported on the current playback device.
	   *
	   * @return {boolean}
	   *         - True if fullscreen is supported.
	   *         - False if fullscreen is not supported.
	   */


	  Html5.prototype.supportsFullScreen = function supportsFullScreen() {
	    if (typeof this.el_.webkitEnterFullScreen === 'function') {
	      var userAgent = _window2['default'].navigator && _window2['default'].navigator.userAgent || '';

	      // Seems to be broken in Chromium/Chrome && Safari in Leopard
	      if (/Android/.test(userAgent) || !/Chrome|Mac OS X 10.5/.test(userAgent)) {
	        return true;
	      }
	    }
	    return false;
	  };

	  /**
	   * Request that the `HTML5` Tech enter fullscreen.
	   */


	  Html5.prototype.enterFullScreen = function enterFullScreen() {
	    var video = this.el_;

	    if (video.paused && video.networkState <= video.HAVE_METADATA) {
	      // attempt to prime the video element for programmatic access
	      // this isn't necessary on the desktop but shouldn't hurt
	      this.el_.play();

	      // playing and pausing synchronously during the transition to fullscreen
	      // can get iOS ~6.1 devices into a play/pause loop
	      this.setTimeout(function () {
	        video.pause();
	        video.webkitEnterFullScreen();
	      }, 0);
	    } else {
	      video.webkitEnterFullScreen();
	    }
	  };

	  /**
	   * Request that the `HTML5` Tech exit fullscreen.
	   */


	  Html5.prototype.exitFullScreen = function exitFullScreen() {
	    this.el_.webkitExitFullScreen();
	  };

	  /**
	   * A getter/setter for the `Html5` Tech's source object.
	   * > Note: Please use {@link Html5#setSource}
	   *
	   * @param {Tech~SourceObject} [src]
	   *        The source object you want to set on the `HTML5` techs element.
	   *
	   * @return {Tech~SourceObject|undefined}
	   *         - The current source object when a source is not passed in.
	   *         - undefined when setting
	   *
	   * @deprecated Since version 5.
	   */


	  Html5.prototype.src = function src(_src) {
	    if (_src === undefined) {
	      return this.el_.src;
	    }

	    // Setting src through `src` instead of `setSrc` will be deprecated
	    this.setSrc(_src);
	  };

	  /**
	   * Reset the tech by removing all sources and then calling
	   * {@link Html5.resetMediaElement}.
	   */


	  Html5.prototype.reset = function reset() {
	    Html5.resetMediaElement(this.el_);
	  };

	  /**
	   * Get the current source on the `HTML5` Tech. Falls back to returning the source from
	   * the HTML5 media element.
	   *
	   * @return {Tech~SourceObject}
	   *         The current source object from the HTML5 tech. With a fallback to the
	   *         elements source.
	   */


	  Html5.prototype.currentSrc = function currentSrc() {
	    if (this.currentSource_) {
	      return this.currentSource_.src;
	    }
	    return this.el_.currentSrc;
	  };

	  /**
	   * Set controls attribute for the HTML5 media Element.
	   *
	   * @param {string} val
	   *        Value to set the controls attribute to
	   */


	  Html5.prototype.setControls = function setControls(val) {
	    this.el_.controls = !!val;
	  };

	  /**
	   * Create and returns a remote {@link TextTrack} object.
	   *
	   * @param {string} kind
	   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
	   *
	   * @param {string} [label]
	   *        Label to identify the text track
	   *
	   * @param {string} [language]
	   *        Two letter language abbreviation
	   *
	   * @return {TextTrack}
	   *         The TextTrack that gets created.
	   */


	  Html5.prototype.addTextTrack = function addTextTrack(kind, label, language) {
	    if (!this.featuresNativeTextTracks) {
	      return _Tech.prototype.addTextTrack.call(this, kind, label, language);
	    }

	    return this.el_.addTextTrack(kind, label, language);
	  };

	  /**
	   * Creates either native TextTrack or an emulated TextTrack depending
	   * on the value of `featuresNativeTextTracks`
	   *
	   * @param {Object} options
	   *        The object should contain the options to intialize the TextTrack with.
	   *
	   * @param {string} [options.kind]
	   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).
	   *
	   * @param {string} [options.label].
	   *        Label to identify the text track
	   *
	   * @param {string} [options.language]
	   *        Two letter language abbreviation.
	   *
	   * @param {boolean} [options.default]
	   *        Default this track to on.
	   *
	   * @param {string} [options.id]
	   *        The internal id to assign this track.
	   *
	   * @param {string} [options.src]
	   *        A source url for the track.
	   *
	   * @return {HTMLTrackElement}
	   *         The track element that gets created.
	   */


	  Html5.prototype.createRemoteTextTrack = function createRemoteTextTrack(options) {
	    if (!this.featuresNativeTextTracks) {
	      return _Tech.prototype.createRemoteTextTrack.call(this, options);
	    }
	    var htmlTrackElement = _document2['default'].createElement('track');

	    if (options.kind) {
	      htmlTrackElement.kind = options.kind;
	    }
	    if (options.label) {
	      htmlTrackElement.label = options.label;
	    }
	    if (options.language || options.srclang) {
	      htmlTrackElement.srclang = options.language || options.srclang;
	    }
	    if (options['default']) {
	      htmlTrackElement['default'] = options['default'];
	    }
	    if (options.id) {
	      htmlTrackElement.id = options.id;
	    }
	    if (options.src) {
	      htmlTrackElement.src = options.src;
	    }

	    return htmlTrackElement;
	  };

	  /**
	   * Creates a remote text track object and returns an html track element.
	   *
	   * @param {Object} options The object should contain values for
	   * kind, language, label, and src (location of the WebVTT file)
	   * @param {Boolean} [manualCleanup=true] if set to false, the TextTrack will be
	   * automatically removed from the video element whenever the source changes
	   * @return {HTMLTrackElement} An Html Track Element.
	   * This can be an emulated {@link HTMLTrackElement} or a native one.
	   * @deprecated The default value of the "manualCleanup" parameter will default
	   * to "false" in upcoming versions of Video.js
	   */


	  Html5.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {
	    var htmlTrackElement = _Tech.prototype.addRemoteTextTrack.call(this, options, manualCleanup);

	    if (this.featuresNativeTextTracks) {
	      this.el().appendChild(htmlTrackElement);
	    }

	    return htmlTrackElement;
	  };

	  /**
	   * Remove remote `TextTrack` from `TextTrackList` object
	   *
	   * @param {TextTrack} track
	   *        `TextTrack` object to remove
	   */


	  Html5.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {
	    _Tech.prototype.removeRemoteTextTrack.call(this, track);

	    if (this.featuresNativeTextTracks) {
	      var tracks = this.$$('track');

	      var i = tracks.length;

	      while (i--) {
	        if (track === tracks[i] || track === tracks[i].track) {
	          this.el().removeChild(tracks[i]);
	        }
	      }
	    }
	  };

	  return Html5;
	}(_tech2['default']);

	/* HTML5 Support Testing ---------------------------------------------------- */

	if (Dom.isReal()) {

	  /**
	   * Element for testing browser HTML5 media capabilities
	   *
	   * @type {Element}
	   * @constant
	   * @private
	   */
	  Html5.TEST_VID = _document2['default'].createElement('video');
	  var track = _document2['default'].createElement('track');

	  track.kind = 'captions';
	  track.srclang = 'en';
	  track.label = 'English';
	  Html5.TEST_VID.appendChild(track);
	}

	/**
	 * Check if HTML5 media is supported by this browser/device.
	 *
	 * @return {boolean}
	 *         - True if HTML5 media is supported.
	 *         - False if HTML5 media is not supported.
	 */
	Html5.isSupported = function () {
	  // IE9 with no Media Player is a LIAR! (#984)
	  try {
	    Html5.TEST_VID.volume = 0.5;
	  } catch (e) {
	    return false;
	  }

	  return !!(Html5.TEST_VID && Html5.TEST_VID.canPlayType);
	};

	/**
	 * Check if the volume can be changed in this browser/device.
	 * Volume cannot be changed in a lot of mobile devices.
	 * Specifically, it can't be changed from 1 on iOS.
	 *
	 * @return {boolean}
	 *         - True if volume can be controlled
	 *         - False otherwise
	 */
	Html5.canControlVolume = function () {
	  // IE will error if Windows Media Player not installed #3315
	  try {
	    var volume = Html5.TEST_VID.volume;

	    Html5.TEST_VID.volume = volume / 2 + 0.1;
	    return volume !== Html5.TEST_VID.volume;
	  } catch (e) {
	    return false;
	  }
	};

	/**
	 * Check if the playback rate can be changed in this browser/device.
	 *
	 * @return {boolean}
	 *         - True if playback rate can be controlled
	 *         - False otherwise
	 */
	Html5.canControlPlaybackRate = function () {
	  // Playback rate API is implemented in Android Chrome, but doesn't do anything
	  // https://github.com/videojs/video.js/issues/3180
	  if (browser.IS_ANDROID && browser.IS_CHROME) {
	    return false;
	  }
	  // IE will error if Windows Media Player not installed #3315
	  try {
	    var playbackRate = Html5.TEST_VID.playbackRate;

	    Html5.TEST_VID.playbackRate = playbackRate / 2 + 0.1;
	    return playbackRate !== Html5.TEST_VID.playbackRate;
	  } catch (e) {
	    return false;
	  }
	};

	/**
	 * Check to see if native `TextTrack`s are supported by this browser/device.
	 *
	 * @return {boolean}
	 *         - True if native `TextTrack`s are supported.
	 *         - False otherwise
	 */
	Html5.supportsNativeTextTracks = function () {
	  return browser.IS_ANY_SAFARI;
	};

	/**
	 * Check to see if native `VideoTrack`s are supported by this browser/device
	 *
	 * @return {boolean}
	 *        - True if native `VideoTrack`s are supported.
	 *        - False otherwise
	 */
	Html5.supportsNativeVideoTracks = function () {
	  return !!(Html5.TEST_VID && Html5.TEST_VID.videoTracks);
	};

	/**
	 * Check to see if native `AudioTrack`s are supported by this browser/device
	 *
	 * @return {boolean}
	 *        - True if native `AudioTrack`s are supported.
	 *        - False otherwise
	 */
	Html5.supportsNativeAudioTracks = function () {
	  return !!(Html5.TEST_VID && Html5.TEST_VID.audioTracks);
	};

	/**
	 * An array of events available on the Html5 tech.
	 *
	 * @private
	 * @type {Array}
	 */
	Html5.Events = ['loadstart', 'suspend', 'abort', 'error', 'emptied', 'stalled', 'loadedmetadata', 'loadeddata', 'canplay', 'canplaythrough', 'playing', 'waiting', 'seeking', 'seeked', 'ended', 'durationchange', 'timeupdate', 'progress', 'play', 'pause', 'ratechange', 'volumechange'];

	/**
	 * Boolean indicating whether the `Tech` supports volume control.
	 *
	 * @type {boolean}
	 * @default {@link Html5.canControlVolume}
	 */
	Html5.prototype.featuresVolumeControl = Html5.canControlVolume();

	/**
	 * Boolean indicating whether the `Tech` supports changing the speed at which the media
	 * plays. Examples:
	 *   - Set player to play 2x (twice) as fast
	 *   - Set player to play 0.5x (half) as fast
	 *
	 * @type {boolean}
	 * @default {@link Html5.canControlPlaybackRate}
	 */
	Html5.prototype.featuresPlaybackRate = Html5.canControlPlaybackRate();

	/**
	 * Boolean indicating whether the `HTML5` tech currently supports the media element
	 * moving in the DOM. iOS breaks if you move the media element, so this is set this to
	 * false there. Everywhere else this should be true.
	 *
	 * @type {boolean}
	 * @default
	 */
	Html5.prototype.movingMediaElementInDOM = !browser.IS_IOS;

	// TODO: Previous comment: No longer appears to be used. Can probably be removed.
	//       Is this true?
	/**
	 * Boolean indicating whether the `HTML5` tech currently supports automatic media resize
	 * when going into fullscreen.
	 *
	 * @type {boolean}
	 * @default
	 */
	Html5.prototype.featuresFullscreenResize = true;

	/**
	 * Boolean indicating whether the `HTML5` tech currently supports the progress event.
	 * If this is false, manual `progress` events will be triggred instead.
	 *
	 * @type {boolean}
	 * @default
	 */
	Html5.prototype.featuresProgressEvents = true;

	/**
	 * Boolean indicating whether the `HTML5` tech currently supports the timeupdate event.
	 * If this is false, manual `timeupdate` events will be triggred instead.
	 *
	 * @default
	 */
	Html5.prototype.featuresTimeupdateEvents = true;

	/**
	 * Boolean indicating whether the `HTML5` tech currently supports native `TextTrack`s.
	 *
	 * @type {boolean}
	 * @default {@link Html5.supportsNativeTextTracks}
	 */
	Html5.prototype.featuresNativeTextTracks = Html5.supportsNativeTextTracks();

	/**
	 * Boolean indicating whether the `HTML5` tech currently supports native `VideoTrack`s.
	 *
	 * @type {boolean}
	 * @default {@link Html5.supportsNativeVideoTracks}
	 */
	Html5.prototype.featuresNativeVideoTracks = Html5.supportsNativeVideoTracks();

	/**
	 * Boolean indicating whether the `HTML5` tech currently supports native `AudioTrack`s.
	 *
	 * @type {boolean}
	 * @default {@link Html5.supportsNativeAudioTracks}
	 */
	Html5.prototype.featuresNativeAudioTracks = Html5.supportsNativeAudioTracks();

	// HTML5 Feature detection and Device Fixes --------------------------------- //
	var canPlayType = Html5.TEST_VID && Html5.TEST_VID.constructor.prototype.canPlayType;
	var mpegurlRE = /^application\/(?:x-|vnd\.apple\.)mpegurl/i;
	var mp4RE = /^video\/mp4/i;

	Html5.patchCanPlayType = function () {

	  // Android 4.0 and above can play HLS to some extent but it reports being unable to do so
	  if (browser.ANDROID_VERSION >= 4.0 && !browser.IS_FIREFOX) {
	    Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {
	      if (type && mpegurlRE.test(type)) {
	        return 'maybe';
	      }
	      return canPlayType.call(this, type);
	    };

	    // Override Android 2.2 and less canPlayType method which is broken
	  } else if (browser.IS_OLD_ANDROID) {
	    Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {
	      if (type && mp4RE.test(type)) {
	        return 'maybe';
	      }
	      return canPlayType.call(this, type);
	    };
	  }
	};

	Html5.unpatchCanPlayType = function () {
	  var r = Html5.TEST_VID.constructor.prototype.canPlayType;

	  Html5.TEST_VID.constructor.prototype.canPlayType = canPlayType;
	  return r;
	};

	// by default, patch the media element
	Html5.patchCanPlayType();

	Html5.disposeMediaElement = function (el) {
	  if (!el) {
	    return;
	  }

	  if (el.parentNode) {
	    el.parentNode.removeChild(el);
	  }

	  // remove any child track or source nodes to prevent their loading
	  while (el.hasChildNodes()) {
	    el.removeChild(el.firstChild);
	  }

	  // remove any src reference. not setting `src=''` because that causes a warning
	  // in firefox
	  el.removeAttribute('src');

	  // force the media element to update its loading state by calling load()
	  // however IE on Windows 7N has a bug that throws an error so need a try/catch (#793)
	  if (typeof el.load === 'function') {
	    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)
	    (function () {
	      try {
	        el.load();
	      } catch (e) {
	        // not supported
	      }
	    })();
	  }
	};

	Html5.resetMediaElement = function (el) {
	  if (!el) {
	    return;
	  }

	  var sources = el.querySelectorAll('source');
	  var i = sources.length;

	  while (i--) {
	    el.removeChild(sources[i]);
	  }

	  // remove any src reference.
	  // not setting `src=''` because that throws an error
	  el.removeAttribute('src');

	  if (typeof el.load === 'function') {
	    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)
	    (function () {
	      try {
	        el.load();
	      } catch (e) {
	        // satisfy linter
	      }
	    })();
	  }
	};

	/* Native HTML5 element property wrapping ----------------------------------- */
	// Wrap native properties with a getter
	[
	/**
	 * Get the value of `paused` from the media element. `paused` indicates whether the media element
	 * is currently paused or not.
	 *
	 * @method Html5#paused
	 * @return {boolean}
	 *         The value of `paused` from the media element.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-paused}
	 */
	'paused',

	/**
	 * Get the value of `currentTime` from the media element. `currentTime` indicates
	 * the current second that the media is at in playback.
	 *
	 * @method Html5#currentTime
	 * @return {number}
	 *         The value of `currentTime` from the media element.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-currenttime}
	 */
	'currentTime',

	/**
	 * Get the value of `buffered` from the media element. `buffered` is a `TimeRange`
	 * object that represents the parts of the media that are already downloaded and
	 * available for playback.
	 *
	 * @method Html5#buffered
	 * @return {TimeRange}
	 *         The value of `buffered` from the media element.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-buffered}
	 */
	'buffered',

	/**
	 * Get the value of `volume` from the media element. `volume` indicates
	 * the current playback volume of audio for a media. `volume` will be a value from 0
	 * (silent) to 1 (loudest and default).
	 *
	 * @method Html5#volume
	 * @return {number}
	 *         The value of `volume` from the media element. Value will be between 0-1.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}
	 */
	'volume',

	/**
	 * Get the value of `muted` from the media element. `muted` indicates
	 * that the volume for the media should be set to silent. This does not actually change
	 * the `volume` attribute.
	 *
	 * @method Html5#muted
	 * @return {boolean}
	 *         - True if the value of `volume` should be ignored and the audio set to silent.
	 *         - False if the value of `volume` should be used.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}
	 */
	'muted',

	/**
	 * Get the value of `poster` from the media element. `poster` indicates
	 * that the url of an image file that can/will be shown when no media data is available.
	 *
	 * @method Html5#poster
	 * @return {string}
	 *         The value of `poster` from the media element. Value will be a url to an
	 *         image.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-video-poster}
	 */
	'poster',

	/**
	 * Get the value of `preload` from the media element. `preload` indicates
	 * what should download before the media is interacted with. It can have the following
	 * values:
	 * - none: nothing should be downloaded
	 * - metadata: poster and the first few frames of the media may be downloaded to get
	 *   media dimensions and other metadata
	 * - auto: allow the media and metadata for the media to be downloaded before
	 *    interaction
	 *
	 * @method Html5#preload
	 * @return {string}
	 *         The value of `preload` from the media element. Will be 'none', 'metadata',
	 *         or 'auto'.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}
	 */
	'preload',

	/**
	 * Get the value of `autoplay` from the media element. `autoplay` indicates
	 * that the media should start to play as soon as the page is ready.
	 *
	 * @method Html5#autoplay
	 * @return {boolean}
	 *         - The value of `autoplay` from the media element.
	 *         - True indicates that the media should start as soon as the page loads.
	 *         - False indicates that the media should not start as soon as the page loads.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}
	 */
	'autoplay',

	/**
	 * Get the value of `controls` from the media element. `controls` indicates
	 * whether the native media controls should be shown or hidden.
	 *
	 * @method Html5#controls
	 * @return {boolean}
	 *         - The value of `controls` from the media element.
	 *         - True indicates that native controls should be showing.
	 *         - False indicates that native controls should be hidden.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-controls}
	 */
	'controls',

	/**
	 * Get the value of `loop` from the media element. `loop` indicates
	 * that the media should return to the start of the media and continue playing once
	 * it reaches the end.
	 *
	 * @method Html5#loop
	 * @return {boolean}
	 *         - The value of `loop` from the media element.
	 *         - True indicates that playback should seek back to start once
	 *           the end of a media is reached.
	 *         - False indicates that playback should not loop back to the start when the
	 *           end of the media is reached.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}
	 */
	'loop',

	/**
	 * Get the value of the `error` from the media element. `error` indicates any
	 * MediaError that may have occured during playback. If error returns null there is no
	 * current error.
	 *
	 * @method Html5#error
	 * @return {MediaError|null}
	 *         The value of `error` from the media element. Will be `MediaError` if there
	 *         is a current error and null otherwise.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-error}
	 */
	'error',

	/**
	 * Get the value of `seeking` from the media element. `seeking` indicates whether the
	 * media is currently seeking to a new position or not.
	 *
	 * @method Html5#seeking
	 * @return {boolean}
	 *         - The value of `seeking` from the media element.
	 *         - True indicates that the media is currently seeking to a new position.
	 *         - Flase indicates that the media is not seeking to a new position at this time.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seeking}
	 */
	'seeking',

	/**
	 * Get the value of `seekable` from the media element. `seekable` returns a
	 * `TimeRange` object indicating ranges of time that can currently be `seeked` to.
	 *
	 * @method Html5#seekable
	 * @return {TimeRange}
	 *         The value of `seekable` from the media element. A `TimeRange` object
	 *         indicating the current ranges of time that can be seeked to.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seekable}
	 */
	'seekable',

	/**
	 * Get the value of `ended` from the media element. `ended` indicates whether
	 * the media has reached the end or not.
	 *
	 * @method Html5#ended
	 * @return {boolean}
	 *         - The value of `ended` from the media element.
	 *         - True indicates that the media has ended.
	 *         - False indicates that the media has not ended.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}
	 */
	'ended',

	/**
	 * Get the value of `defaultMuted` from the media element. `defaultMuted` indicates
	 * whether the media should start muted or not. Only changes the default state of the
	 * media. `muted` and `defaultMuted` can have different values. `muted` indicates the
	 * current state.
	 *
	 * @method Html5#defaultMuted
	 * @return {boolean}
	 *         - The value of `defaultMuted` from the media element.
	 *         - True indicates that the media should start muted.
	 *         - False indicates that the media should not start muted
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}
	 */
	'defaultMuted',

	/**
	 * Get the value of `playbackRate` from the media element. `playbackRate` indicates
	 * the rate at which the media is currently playing back. Examples:
	 *   - if playbackRate is set to 2, media will play twice as fast.
	 *   - if playbackRate is set to 0.5, media will play half as fast.
	 *
	 * @method Html5#playbackRate
	 * @return {number}
	 *         The value of `playbackRate` from the media element. A number indicating
	 *         the current playback speed of the media, where 1 is normal speed.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
	 */
	'playbackRate',

	/**
	 * Get the value of `played` from the media element. `played` returns a `TimeRange`
	 * object representing points in the media timeline that have been played.
	 *
	 * @method Html5#played
	 * @return {TimeRange}
	 *         The value of `played` from the media element. A `TimeRange` object indicating
	 *         the ranges of time that have been played.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-played}
	 */
	'played',

	/**
	 * Get the value of `networkState` from the media element. `networkState` indicates
	 * the current network state. It returns an enumeration from the following list:
	 * - 0: NETWORK_EMPTY
	 * - 1: NEWORK_IDLE
	 * - 2: NETWORK_LOADING
	 * - 3: NETWORK_NO_SOURCE
	 *
	 * @method Html5#networkState
	 * @return {number}
	 *         The value of `networkState` from the media element. This will be a number
	 *         from the list in the description.
	 *
	 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-networkstate}
	 */
	'networkState',

	/**
	 * Get the value of `readyState` from the media element. `readyState` indicates
	 * the current state of the media element. It returns an enumeration from the
	 * following list:
	 * - 0: HAVE_NOTHING
	 * - 1: HAVE_METADATA
	 * - 2: HAVE_CURRENT_DATA
	 * - 3: HAVE_FUTURE_DATA
	 * - 4: HAVE_ENOUGH_DATA
	 *
	 * @method Html5#readyState
	 * @return {number}
	 *         The value of `readyState` from the media element. This will be a number
	 *         from the list in the description.
	 *
	 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#ready-states}
	 */
	'readyState',

	/**
	 * Get the value of `videoWidth` from the video element. `videoWidth` indicates
	 * the current width of the video in css pixels.
	 *
	 * @method Html5#videoWidth
	 * @return {number}
	 *         The value of `videoWidth` from the video element. This will be a number
	 *         in css pixels.
	 *
	 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}
	 */
	'videoWidth',

	/**
	 * Get the value of `videoHeight` from the video element. `videoHeigth` indicates
	 * the current height of the video in css pixels.
	 *
	 * @method Html5#videoHeight
	 * @return {number}
	 *         The value of `videoHeight` from the video element. This will be a number
	 *         in css pixels.
	 *
	 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}
	 */
	'videoHeight'].forEach(function (prop) {
	  Html5.prototype[prop] = function () {
	    return this.el_[prop];
	  };
	});

	// Wrap native properties with a setter in this format:
	// set + toTitleCase(name)
	[
	/**
	 * Set the value of `volume` on the media element. `volume` indicates the current
	 * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and
	 * so on.
	 *
	 * @method Html5#setVolume
	 * @param {number} percentAsDecimal
	 *        The volume percent as a decimal. Valid range is from 0-1.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}
	 */
	'volume',

	/**
	 * Set the value of `muted` on the media element. `muted` indicates the current
	 * audio level should be silent.
	 *
	 * @method Html5#setMuted
	 * @param {boolean} muted
	 *        - True if the audio should be set to silent
	 *        - False otherwise
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}
	 */
	'muted',

	/**
	 * Set the value of `src` on the media element. `src` indicates the current
	 * {@link Tech~SourceObject} for the media.
	 *
	 * @method Html5#setSrc
	 * @param {Tech~SourceObject} src
	 *        The source object to set as the current source.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-src}
	 */
	'src',

	/**
	 * Set the value of `poster` on the media element. `poster` is the url to
	 * an image file that can/will be shown when no media data is available.
	 *
	 * @method Html5#setPoster
	 * @param {string} poster
	 *        The url to an image that should be used as the `poster` for the media
	 *        element.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-poster}
	 */
	'poster',

	/**
	 * Set the value of `preload` on the media element. `preload` indicates
	 * what should download before the media is interacted with. It can have the following
	 * values:
	 * - none: nothing should be downloaded
	 * - metadata: poster and the first few frames of the media may be downloaded to get
	 *   media dimensions and other metadata
	 * - auto: allow the media and metadata for the media to be downloaded before
	 *    interaction
	 *
	 * @method Html5#setPreload
	 * @param {string} preload
	 *         The value of `preload` to set on the media element. Must be 'none', 'metadata',
	 *         or 'auto'.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}
	 */
	'preload',

	/**
	 * Set the value of `autoplay` on the media element. `autoplay` indicates
	 * that the media should start to play as soon as the page is ready.
	 *
	 * @method Html5#setAutoplay
	 * @param {boolean} autoplay
	 *         - True indicates that the media should start as soon as the page loads.
	 *         - False indicates that the media should not start as soon as the page loads.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}
	 */
	'autoplay',

	/**
	 * Set the value of `loop` on the media element. `loop` indicates
	 * that the media should return to the start of the media and continue playing once
	 * it reaches the end.
	 *
	 * @method Html5#setLoop
	 * @param {boolean} loop
	 *         - True indicates that playback should seek back to start once
	 *           the end of a media is reached.
	 *         - False indicates that playback should not loop back to the start when the
	 *           end of the media is reached.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}
	 */
	'loop',

	/**
	 * Set the value of `playbackRate` on the media element. `playbackRate` indicates
	 * the rate at which the media should play back. Examples:
	 *   - if playbackRate is set to 2, media will play twice as fast.
	 *   - if playbackRate is set to 0.5, media will play half as fast.
	 *
	 * @method Html5#setPlaybackRate
	 * @return {number}
	 *         The value of `playbackRate` from the media element. A number indicating
	 *         the current playback speed of the media, where 1 is normal speed.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
	 */
	'playbackRate'].forEach(function (prop) {
	  Html5.prototype['set' + (0, _toTitleCase2['default'])(prop)] = function (v) {
	    this.el_[prop] = v;
	  };
	});

	// wrap native functions with a function
	[
	/**
	 * A wrapper around the media elements `pause` function. This will call the `HTML5`
	 * media elements `pause` function.
	 *
	 * @method Html5#pause
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-pause}
	 */
	'pause',

	/**
	 * A wrapper around the media elements `load` function. This will call the `HTML5`s
	 * media element `load` function.
	 *
	 * @method Html5#load
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-load}
	 */
	'load'].forEach(function (prop) {
	  Html5.prototype[prop] = function () {
	    return this.el_[prop]();
	  };
	});

	_tech2['default'].withSourceHandlers(Html5);

	/**
	 * Native source handler for Html5, simply passes the source to the media element.
	 *
	 * @proprety {Tech~SourceObject} source
	 *        The source object
	 *
	 * @proprety {Html5} tech
	 *        The instance of the HTML5 tech.
	 */
	Html5.nativeSourceHandler = {};

	/**
	 * Check if the media element can play the given mime type.
	 *
	 * @param {string} type
	 *        The mimetype to check
	 *
	 * @return {string}
	 *         'probably', 'maybe', or '' (empty string)
	 */
	Html5.nativeSourceHandler.canPlayType = function (type) {
	  // IE9 on Windows 7 without MediaPlayer throws an error here
	  // https://github.com/videojs/video.js/issues/519
	  try {
	    return Html5.TEST_VID.canPlayType(type);
	  } catch (e) {
	    return '';
	  }
	};

	/**
	 * Check if the media element can handle a source natively.
	 *
	 * @param {Tech~SourceObject} source
	 *         The source object
	 *
	 * @param {Object} [options]
	 *         Options to be passed to the tech.
	 *
	 * @return {string}
	 *         'probably', 'maybe', or '' (empty string).
	 */
	Html5.nativeSourceHandler.canHandleSource = function (source, options) {

	  // If a type was provided we should rely on that
	  if (source.type) {
	    return Html5.nativeSourceHandler.canPlayType(source.type);

	    // If no type, fall back to checking 'video/[EXTENSION]'
	  } else if (source.src) {
	    var ext = Url.getFileExtension(source.src);

	    return Html5.nativeSourceHandler.canPlayType('video/' + ext);
	  }

	  return '';
	};

	/**
	 * Pass the source to the native media element.
	 *
	 * @param {Tech~SourceObject} source
	 *        The source object
	 *
	 * @param {Html5} tech
	 *        The instance of the Html5 tech
	 *
	 * @param {Object} [options]
	 *        The options to pass to the source
	 */
	Html5.nativeSourceHandler.handleSource = function (source, tech, options) {
	  tech.setSrc(source.src);
	};

	/**
	 * A noop for the native dispose function, as cleanup is not needed.
	 */
	Html5.nativeSourceHandler.dispose = function () {};

	// Register the native source handler
	Html5.registerSourceHandler(Html5.nativeSourceHandler);

	_component2['default'].registerComponent('Html5', Html5);
	_tech2['default'].registerTech('Html5', Html5);
	exports['default'] = Html5;


/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _player = __webpack_require__(272);

	var _player2 = _interopRequireDefault(_player);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * The method for registering a video.js plugin. {@link videojs:videojs.registerPlugin].
	 *
	 * @param {string} name
	 *        The name of the plugin that is being registered
	 *
	 * @param {plugins:PluginFn} init
	 *        The function that gets run when a `Player` initializes.
	 */
	var plugin = function plugin(name, init) {
	  _player2['default'].prototype[name] = init;
	}; /**
	    * @file plugins.js
	    * @module plugins
	    */
	exports['default'] = plugin;


/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _trackEnums = __webpack_require__(284);

	var _track = __webpack_require__(285);

	var _track2 = _interopRequireDefault(_track);

	var _mergeOptions = __webpack_require__(270);

	var _mergeOptions2 = _interopRequireDefault(_mergeOptions);

	var _browser = __webpack_require__(262);

	var browser = _interopRequireWildcard(_browser);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * A representation of a single `AudioTrack`. If it is part of an {@link AudioTrackList}
	 * only one `AudioTrack` in the list will be enabled at a time.
	 *
	 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotrack}
	 * @extends Track
	 */
	var AudioTrack = function (_Track) {
	  _inherits(AudioTrack, _Track);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Object} [options={}]
	   *        Object of option names and values
	   *
	   * @param {AudioTrack~Kind} [options.kind='']
	   *        A valid audio track kind
	   *
	   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
	   *        A unique id for this AudioTrack.
	   *
	   * @param {string} [options.label='']
	   *        The menu label for this track.
	   *
	   * @param {string} [options.language='']
	   *        A valid two character language code.
	   *
	   * @param {boolean} [options.enabled]
	   *        If this track is the one that is currently playing. If this track is part of
	   *        an {@link AudioTrackList}, only one {@link AudioTrack} will be enabled.
	   */
	  function AudioTrack() {
	    var _this, _ret;

	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    _classCallCheck(this, AudioTrack);

	    var settings = (0, _mergeOptions2['default'])(options, {
	      kind: _trackEnums.AudioTrackKind[options.kind] || ''
	    });
	    // on IE8 this will be a document element
	    // for every other browser this will be a normal object
	    var track = (_this = _possibleConstructorReturn(this, _Track.call(this, settings)), _this);
	    var enabled = false;

	    if (browser.IS_IE8) {
	      for (var prop in AudioTrack.prototype) {
	        if (prop !== 'constructor') {
	          track[prop] = AudioTrack.prototype[prop];
	        }
	      }
	    }
	    /**
	     * @member {boolean} enabled
	     *         If this `AudioTrack` is enabled or not. When setting this will
	     *         fire {@link AudioTrack#enabledchange} if the state of enabled is changed.
	     *
	     * @fires VideoTrack#selectedchange
	     */
	    Object.defineProperty(track, 'enabled', {
	      get: function get() {
	        return enabled;
	      },
	      set: function set(newEnabled) {
	        // an invalid or unchanged value
	        if (typeof newEnabled !== 'boolean' || newEnabled === enabled) {
	          return;
	        }
	        enabled = newEnabled;

	        /**
	         * An event that fires when enabled changes on this track. This allows
	         * the AudioTrackList that holds this track to act accordingly.
	         *
	         * > Note: This is not part of the spec! Native tracks will do
	         *         this internally without an event.
	         *
	         * @event AudioTrack#enabledchange
	         * @type {EventTarget~Event}
	         */
	        this.trigger('enabledchange');
	      }
	    });

	    // if the user sets this track to selected then
	    // set selected to that true value otherwise
	    // we keep it false
	    if (settings.enabled) {
	      track.enabled = settings.enabled;
	    }
	    track.loaded_ = true;

	    return _ret = track, _possibleConstructorReturn(_this, _ret);
	  }

	  return AudioTrack;
	}(_track2['default']);

	exports['default'] = AudioTrack;


/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _trackEnums = __webpack_require__(284);

	var _track = __webpack_require__(285);

	var _track2 = _interopRequireDefault(_track);

	var _mergeOptions = __webpack_require__(270);

	var _mergeOptions2 = _interopRequireDefault(_mergeOptions);

	var _browser = __webpack_require__(262);

	var browser = _interopRequireWildcard(_browser);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * A representation of a single `VideoTrack`.
	 *
	 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotrack}
	 * @extends Track
	 */
	var VideoTrack = function (_Track) {
	  _inherits(VideoTrack, _Track);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Object} [options={}]
	   *        Object of option names and values
	   *
	   * @param {string} [options.kind='']
	   *        A valid {@link VideoTrack~Kind}
	   *
	   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
	   *        A unique id for this AudioTrack.
	   *
	   * @param {string} [options.label='']
	   *        The menu label for this track.
	   *
	   * @param {string} [options.language='']
	   *        A valid two character language code.
	   *
	   * @param {boolean} [options.selected]
	   *        If this track is the one that is currently playing.
	   */
	  function VideoTrack() {
	    var _this, _ret;

	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    _classCallCheck(this, VideoTrack);

	    var settings = (0, _mergeOptions2['default'])(options, {
	      kind: _trackEnums.VideoTrackKind[options.kind] || ''
	    });

	    // on IE8 this will be a document element
	    // for every other browser this will be a normal object
	    var track = (_this = _possibleConstructorReturn(this, _Track.call(this, settings)), _this);
	    var selected = false;

	    if (browser.IS_IE8) {
	      for (var prop in VideoTrack.prototype) {
	        if (prop !== 'constructor') {
	          track[prop] = VideoTrack.prototype[prop];
	        }
	      }
	    }

	    /**
	     * @member {boolean} selected
	     *         If this `VideoTrack` is selected or not. When setting this will
	     *         fire {@link VideoTrack#selectedchange} if the state of selected changed.
	     *
	     * @fires VideoTrack#selectedchange
	     */
	    Object.defineProperty(track, 'selected', {
	      get: function get() {
	        return selected;
	      },
	      set: function set(newSelected) {
	        // an invalid or unchanged value
	        if (typeof newSelected !== 'boolean' || newSelected === selected) {
	          return;
	        }
	        selected = newSelected;

	        /**
	         * An event that fires when selected changes on this track. This allows
	         * the VideoTrackList that holds this track to act accordingly.
	         *
	         * > Note: This is not part of the spec! Native tracks will do
	         *         this internally without an event.
	         *
	         * @event VideoTrack#selectedchange
	         * @type {EventTarget~Event}
	         */
	        this.trigger('selectedchange');
	      }
	    });

	    // if the user sets this track to selected then
	    // set selected to that true value otherwise
	    // we keep it false
	    if (settings.selected) {
	      track.selected = settings.selected;
	    }

	    return _ret = track, _possibleConstructorReturn(_this, _ret);
	  }

	  return VideoTrack;
	}(_track2['default']);

	exports['default'] = VideoTrack;


/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _log = __webpack_require__(261);

	var _log2 = _interopRequireDefault(_log);

	var _obj = __webpack_require__(263);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * @file extend.js
	 * @module extend
	 */

	/**
	 * A combination of node inherits and babel's inherits (after transpile).
	 * Both work the same but node adds `super_` to the subClass
	 * and Bable adds the superClass as __proto__. Both seem useful.
	 *
	 * @param {Object} subClass
	 *        The class to inherit to
	 *
	 * @param {Object} superClass
	 *        The class to inherit from
	 *
	 * @private
	 */
	var _inherits = function _inherits(subClass, superClass) {
	  if (typeof superClass !== 'function' && superClass !== null) {
	    throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });

	  if (superClass) {
	    // node
	    subClass.super_ = superClass;
	  }
	};

	/**
	 * Function for subclassing using the same inheritance that
	 * videojs uses internally
	 *
	 * @param {Object} superClass
	 *        The class to inherit from
	 *
	 * @param {Object} [subClassMethods={}]
	 *        The class to inherit to
	 *
	 * @return {Object}
	 *         The new object with subClassMethods that inherited superClass.
	 */
	var extendFn = function extendFn(superClass) {
	  var subClassMethods = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  var subClass = function subClass() {
	    superClass.apply(this, arguments);
	  };

	  var methods = {};

	  if ((0, _obj.isObject)(subClassMethods)) {
	    if (typeof subClassMethods.init === 'function') {
	      _log2['default'].warn('Constructor logic via init() is deprecated; please use constructor() instead.');
	      subClassMethods.constructor = subClassMethods.init;
	    }
	    if (subClassMethods.constructor !== Object.prototype.constructor) {
	      subClass = subClassMethods.constructor;
	    }
	    methods = subClassMethods;
	  } else if (typeof subClassMethods === 'function') {
	    subClass = subClassMethods;
	  }

	  _inherits(subClass, superClass);

	  // Extend subObj's prototype with functions and other properties from props
	  for (var name in methods) {
	    if (methods.hasOwnProperty(name)) {
	      subClass.prototype[name] = methods[name];
	    }
	  }

	  return subClass;
	};

	exports['default'] = extendFn;


/***/ }
/******/ ]);